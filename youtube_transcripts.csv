video_id,transcript
6Iu45VZGQDk,hello everyone and welcome to the course of database management systems or in short we call it as dbms in this video we will be seeing the basic introduction to dbms before dbms we were using the file system approach in the later videos we will see more about file systems and why we prefer dbms approach over the file system approach before we get into the topic let us see the outlines or the topics that we are going to cover in this video the first one we are going to see is the basic definitions or the basic terminologies that we need to know next we'll be looking into the definition and functionalities of database management system and then we'll be discussing about the properties of database next we'll be briefly looking into an illustration of a simplified database system environment and then finally to understand database and its functionalities better we'll be looking into an example of university database so as we discussed first we'll be looking into the basic definitions in relation to dbms the first one is data data is any raw facts or unprocessed facts that you can record like for example any numbers name of a person name of a place any kind of text images audio video etc all these are called as data next what is information these unprocessed facts or otherwise called as data when they are processed to make a meaningful context then that is called as information or in other words i can say it is the processed data like for example the age of suresh is 25. so here i take the raw facts or the unprocessed facts process it to make a meaningful context and that is called as information next let us see what is a database database is a collection of related data now a random collection of data or data that is not related cannot be referred to as a database it has to be a collection of related data like for example the data in an online banking system database has to be related to that particular bank similarly the data in library management system database has to be related to that particular library so this is what we call as a database the next one is metadata metadata is nothing but the database definition or in other words i can say it is the complete description of a database or it defines the database information like the storage format or the data type of the data that we are going to store in the database or the constraints on the data all these information is called as metadata so these are the basic definitions we have seen in the further videos we will see more definitions in relation to dbms next let us see the definition of database management system database management system is a system to manage the database and here managing could be either storing of data or retrieval of data from the database now let's look into the proper definition of database management system database management system is a system or it is a software or i can say it is a collection of programs that enables users or that allows the users to create and maintain the database so this is a very simple definition now let's move on to the functionalities of database management system database management system allows users to define the database to construct the database manipulate and share the database now defining the database involves specifying the data type for the data that we are going to store in the database also specifying the structures and constraints for the data now constraints is nothing but the limits on the data like for example if i have age as the data to be stored then i can have a constraint say age greater than 18 so only if age is greater than 18 then only that data can be stored in the database so that is what we call as a constraint the next functionality constructing the database is nothing but the process of storing data on some storage medium or in other words i can say it is a storage of data so when data is stored a database is being constructed the next functionality manipulation of a database includes functions like querying the database to retrieve or to get any data that the user needs it also allows users to update the database and for generating reports the next functionality sharing the database allows multiple users and programs to access the database concurrently or simultaneously or in other words i can say many users can access or share the same database at the same time in an efficient manner so these are the main functionalities that dbms provides the other functions provided by dbms are protection of the database from unauthorized access or from hardware or software failures and also maintenance of the database for a long period of time so that is with the functionalities of database management system next we will be discussing the properties of database there are three properties of database the first one is a database represents some aspects of the real world or otherwise called as the mini world so anything in this mini world the objects their properties the relationships between them all that is represented by a database and if there is any change in the real world that change will also be reflected in the database the second property is a database is a logically coherent collection of data with some inherent meaning so as i said earlier a random collection of data or unrelated data cannot be referred to as a database the data in the database has to be related or logically coherent the next property is a database is designed and then built and populated with data for a specific purpose so these are the three main properties of database the first one is a database represents the real world secondly it is a logically coherent collection of data and thirdly a database is designed built and then filled with data for some purpose next let us look into an illustration of database system environment so here we have the users or the programmer who writes queries or programs and these queries or programs are processed by the dbms software and then based on the processed queries dbms software accesses the stored data in the database that is it accesses the stored database as well as it accesses the metadata as we have already seen metadata is the database definition so this is a simple illustration of a database system environment where users write their queries and it is processed by the dbms software and based on the processed queries dbms software accesses the store database as well as the metadata as we discussed in the outlines finally to understand a database and its functionality is better we'll be taking an example of a university database that stores student and course information so here i have taken three tables the first one is the student table which holds information about the students in that university the second table is the course table which holds information about the courses available and third table is a grade report table which contains information about the grades received by each student in a particular course as we have seen earlier the four functionalities provided by dbms let us try to understand those functionalities better with this example as we learn defining the database involves specifying the data type structures and constraints for the data that we are going to store in the database so here specifying the structure of each record means specifying the different types of data elements present in that particular record so here we have three records the student record the course record and the grade report record and these columns are called as data elements in each record now specifying a data type would be now for example for student name i can say the data type should be a string of characters or for data element role number i can say the data type should be an integer and so on and we've already discussed what a constraint is i can give a constraint on the student name saying that student name cannot be null so this is all about defining the database the next functionality constructing the database is nothing but storing data so once data is being stored a database is being constructed the next functionality is constructing the database which is nothing but storage of data so when data is stored a database is being constructed then we saw database manipulation as the next functionality which involves querying and updating the database examples of queries would be listing all the students in the cs branch in that university or listing the grades received by a particular student in each course and then we saw sharing the database where this particular database can be shared by many users at the same time in an efficient manner so this is a very simple example of a database that i've taken to help you understand what a database is and also to understand its functionalities with this we come to the end of this video hope you all have understood the basic introduction to dbms thank you you
7S_tz1z_5bA,"Hi, my name is Mosh Hamedani, and I'm  super excited to be your instructor. In this three hour course, you're going to learn everything  you need to get started with SQL or SQUEL. First I'm going to give you a three minute introduction to SQL, then we're going to install the necessary  tools and write our first SQL query. This course is ideal for anyone who wants to learn SQL from scratch, but also  anyone with some basic knowledge who wants to fill in the missing gaps. By the end  of this course, you'll be able to retrieve insert, update, and  delete data in databases. We'll talk about tables, relationships,  different types of joints, sub-queries regular expressions and  much, much, more. These are the essential concepts every software developer  or data scientist must know. This SQL course is packed with tons  of exercises that help you both learn and remember the SQL syntax. Also, there is a table of content below this video so you can quickly jump to specific tutorials, now let's jump in and get started.  Let's start the course with a quick overview of databases, what they are and  how we use them. A database is a collection of data stored  in a format that can be easily accessed. In order to manage our databases, we use a software application called database management system,  or, DBMS. We connect to a DBMS and give it  instructions for querying or modifying data. The DMBS will execute our instructions and send results back. Now we have  several database management systems out there, and these are classified into two categories, relational and non relational, also  called NoSQL. In relational databases, we store data in tables that are linked to each other using relationships. That's why we call these databases relational databases, each table  stores data about a specific type of object, like customer product, order and so on. SQL or SQUEL is the language that we use to work with these relational database management systems. It looks like this. We use SQL to query or modify our data. In this course you're going to learn everything there is to know about this powerful  language. Now, there are many different relational database management systems,  out there, some of the most popular ones are MySQL, SQL Server my Microsoft, and Oracle. But of course, there are plenty  more. Each database management system has a different flavor of SQL.  But all these implementations are very similar and are based on the standard SQL specification. So most of the SQL  code that you will learn in this course will work with any database management system.  In this course, we'll be using MySQL, which is the most popular  open source database in the world. Okay, now back to this diagram,  what about non relational databases? In non relational databases,  we don't have tables or relationships, these databases are different from relational databases, but that's a topic for an entirely different course.  What you need to know is non relational database systems  don't understand SQL. They have their own query language.  So, we use SQL to work with relational database management  systems. Now, before we jump in and install MySql, let me clarify  something quickly, as you talk to different people, you will hear two different pronunciations  of SQL. SQUEL, or SQL.  What is the correct way? Well, it depends on who you ask, and of course everybody thinks their way of pronouncing this word is the right way. But here's a  history about this language. SQL was originally developed at IBM in the 70s and back then it was initially called SQUEL short for structured English query language. But they changed the acronym to SQL, because SQUEL was the trademark of an airplane  company. So to this day, there has been an argument about what is the right generally speaking, people in non-English speaking  countries call it SQL. I'm used to calling it SQUEL because it's shorter and sweeter than SQL. But if you prefer to call it SQL, that's totally fine with me, I'm not going to get mad at you. So that's the history behind this language. But what about MySQL as a  software product? Developers of this product prefer to call it MySQL rather than mySQL. But they don't mind if they call it MySQL.  In this course, I'll be teaching you SQL with MySQL.  Hey guys, Mosh here. I just wanted to let you know that  you really don't have to memorize anything in this course, because I've created a  complete cheat sheet with summary notes for you. You can find it below this video  in the description box. So I have done my best to create the best possible, most comprehensive SQL course for you, and I would really appreciate it if you would support my hard work by liking and sharing this  video. Thank you so much, now, let's continue.  In this tutorial,  I'm going to show you how to install MySQL on your computer. Now I'm using a Mac, so first I will show you how to install MySQL on a Mac  computer, and then I will show you how to install it on Windows. So if you're a Windows user,  feel free to skip this tutorial. Now, open up your browser and head over to MySQL.com. Then, go to the downloads page, and scroll down to the bottom. Here you should see MySQL community edition, this is absolutely  free, and we're going to use that throughout this course. So let's go ahead  and look at that, now on this page, click on MySQL,  community server, and then on this page,  you should see available releases for Mac OS.  So, in this list, download the first item which is a dmg archive.  Alright, now, on the next page, click on no thanks, just start my download. Okay, as you can see, we are getting a dmg file, which is basically a setup wizard.  Alright, now the DMG is downloaded, so let's open it,  and then double click on this package, this will launch an installation wizard which is pretty easy to use, so simply  click on continue and again, and again,  agree with the license agreement, and  install MySQL, it's going to ask for your password, this is the password  that you used to log into your computer, so let's put that here,  alright, now here we need to set a password to the root for the admin user. So click next, and  in this box, type a complex password,  alright, now, let's finish the installation,  and enter your computer's password one more time,  and we are done!  That was super easy and sweet.  Alright, we installed MySQL community server, now we  need the graphical tool to connect with this server and manage our databases.  So, back to the downloads page, one more time,  scroll to the bottom, and go to MySQL  community addition, and on this page, somewhere  you should see MySQL workbench. This is a graphical tool that we use to connect to our database server. So let's go ahead and  download this as well. Now once again on this page, we need to download a dmg archive, so,  download, and, again we have  to say no we don't want to login or sign up, so let's go ahead and download  the dmg, and then  open it, alright, you're going to see something like this, so  drag this MySQL workbench and drop it onto the applications folder.  So, let's go ahead with that, now it's going to copy  this into the applications folder, beautiful,  so we're done with the installation, that was super easy, now press command and space, and search for MySQL,  work bench, there you go, let's open it, now the  first time we get this message, because this is an application we downloaded from the internet.  So, we need to tell Mac that we trust this, let's go ahead with that,  so this is MySQL workbench, now by default  you see a connection here, if you don't see that, you need to create it. Let me show you how to do that. So for this demo I'm going to right click this and delete this connection, alright,  now let's create a connection from scratch. So click on this plus icon,  on this page, give this connection a name, let's  say local instance, now the connection method  we're going to use is tcip, which is set by default, the  host name is 127.0.0.1, which  is the address of the local machine, and the port is 33 06, this is the default port for MySQL server, that is the user name of the admin, now we need to enter the password. This is the password that we set during the installation. So, click on  store in keychain, and in this box, type the  password for the MySQL server. Alright  and finally, let's test the  connection, okay, we successfully connected to MySQL server on the local machine, beautiful, let's click okay,  and here we have a connection on the homepage of MySQL workbench, every time we open MySQL workbench, we use this connection to connect to our local server. Alright, we're done with the installation of MySQL on a Mac, next I will talk about MySQL on a Windows computer, so feel free to skip that tutorial. In this tutorial, I'm going to show you how to install MySQL on Windows. So open up your browser and head over to MySQL.com, then, go to the downloads page now here, scroll down to the bottom,  we're going to use MySQL community edition which is absolutely  free. So, let's go with this, now,  select MySQL community server,  and then scroll down so here you should see something like this, MySQL installer for Windows. This is the  recommended method for installing MySQL on Windows. So,  click on this, alright, on the next page, scroll down,  and  download the first installer here. On the next page  scroll downs nd click on no thanks just start my  download. Otherwise you have to create an account and log, which is unnecessary for knowing this course, so, let's go with this,  and save this file to our computer, and then  run it.  Alright, we're going to use this setup wizard to install MySQL,  on our computer.  This is very easy, all you have to do is click next,  but there are a couple places where you need to enter a password, let me show you. So, on the first page, for the setup type we're going to use the  developer default setup. Go to the next page. Now here we're getting a little warning, because this installation wizard wants to install the connector for python 3.7, but I don't have Python on this machine, so that's why I'm getting this warning, now on your  machine, you might or you might not get this error, just click  next, and one more time, so here are the products that I want to get installed the first one is MySQL server,  the second one is MySQL workbench, this is the graphical tool that we use to connect to our database server, and manage our database.  You're going to see that soon. So click on execute,  now this is going to take about 5-10 minutes, so,  I'm going to pause the recording.  Alright, all the products are installed, beautiful, let's go to the next page,  and again, here our the group replication  page, also click on next, and the next page which is  about networking, leave all the default settings, so,  let's go to the next page, now we should set a password for the root for  the admin user. So, click on next,  and in this box, type a password for the admin user.  Alright, and then  let's go to the next page, once again leave all the default settings,  and click on next, and execute one more time,  alright, and now  let's finish our installation, once again we have to click on next,  and then finish. One more time,  there are so many steps. Now here's the page where you need to enter the admin password, so the page is called connect to server, you can see the username is root, which represents the admin user,  so in this box enter the password that you said earlier,  then click on check, okay, connection was successful  beautiful, let's go to the next page, and  click on execute, and finally finish.  There you go, we have one more step, next the  finally after all these steps the installation is complete. Now, this is going to start, MySQL workbench, which is the graphical tool we use to manage our database and run SQL queries.  So, click on finish, so now we have a command  prompt window, where we can type instructions to talk to our MySQL server,  we don't really need this, so close it,  and here's MySQL workbench, now the first time you open this page,  by default you should see a connection here, if you don't see it,  click on this plus icon,  on this page give this connection a name, let's say local  instance, now leave all their settings to their default value,  but here for the password click on store involved.  And in this box, type the password that you used for the admin user.  So, I'm going to put that here, okay,  now click on test connection,  alright, we successfully connected to the MySQL server on this  computer, alright, then, click on okay,  now we click on this connection to connect to our database server.  Alright, so here's the interface you'll be using throughout this course,  on the left hand side we have the navigator panel, in the middle we have the query editor which we can resize  this is where we're going to write our SQL queries, and on the right side we have  additions. So we're done with MySQL  on our computer, next, I'm going to show you how to create our databases for this query.  In this tutorial, I'm going to show you how to create the databases for this course. So here I've got MySQL workbench open, let me quickly give you an overview of this interface because  the first time you open it it might appear a little bit intimidating.  But actually it's not that difficult. So here on the top we have this tool bar with these buttons for creating a new tab for writing SQL code  as well as opening a SQL file. And next to that  we've got a bunch of buttons for creating a database, creating new tables and  so on. On the left side, we've got the navigator panel with two tabs  administration and schemas. We use the administration tab to do administrative work, such as starting or stopping our server. Importing or exporting data and so on. The schemas  tab shows the databases that we have in the current database server.  So currently we only have one database, that is sis, and this is the database that MySQL uses internally to do it's work.  Now, in the middle we've got this query editor window, this is where we write our SQL code, so we'll be spending most of our time in this course, in this window, and on the right side we've got another panel with two tabs,  contacts held, and snippets, now chances are this interface  might look slightly different on Windows, but what I'm showing you here is  almost identical to what we have on Windows. So don't get hung up if it  looks slightly different on your machine. It doesn't really matter. Now up here,  we've got these buttons for showing or hiding these panels, so to clean this interface, I'm going to hide this panel on the right side.  As well as the panel on the bottom. That is better. Now,  to create the databases for this course, download the zip file attached,  below this video. When you extract the (?) you're going to see a bunch of SQL files like this. So the main one you'll be using in this tutorial is called create databases.SQL. So this file contains all the SQL code to create all the databases that we need  in this course, now we also have individual files for creating  individual databases, I've just added these files in case you need to recreate  one of these databases in the future. But for now don't worry about them. Now,  back to MySQL work bench, let's open  the main SQL file. That is create databases.  So this is an example of SQL code.  Now this may look complex at the beginning, but trust me, as you go through the course  you're going to understand exactly how everything works here. You're going to be able to write SQL code like this. So, you want to execute  this, to create all the databases for this course. To do that, we click  on this icon, this yellow thunder icon that we have  on this tool bar here. This will execute either the selection or the  entire code if there is nothing selected for example, if I select this line here,  and click on this icon, this will execute only this line. In this case we want to execute the entire code, so we shouldn't select anything,  and now let's execute this, beautiful, now here down on the bottom,  we have this panel called the output window that shows all the  operations perform in our database server, so we can see  all the operations completed successfully, or something went wrong.  As you can see you've got these green ticks next to each operation.  Beautiful, so I'm going to close this panel, that's better.  Now on the left side in this schemas tab you don't see this new database  so we'll have to refresh this view, beautiful.  So we've got all these databases that are prefixed with SQL or SQL, I decided to prefix them with SQL so we know that  these are the databases for this course, they don't accidentally clash with  a database on the same name of your database server. Now,  at the time of recording this video, there are only 4 databases here, but as we go through  the course, I'm going to update the script for creating the databases, so,  when you watch this course, chances are you're going to see more databases here. Don't worry  worry about the difference. Now as an example let's explore  these databases. And by the way we don't need this tab anymore so let's close it.  That's better. Let's expand the SQL store database, now in every database we have these objects, we have  tables, this is where we store our data, we have views,  which are kind of like virtual cables, so we can combine data from multiple  tables, and put them in a view. And this is especially powerful  for creating reports, you're going to learn about them in the future. You also have  store procedures and functions, and these are little programs that we  stored inside of our database for querying data. For example,  you can have a store procedure for getting all the customers in a given city.  So we call that procedure and we say hey, give me all the customers in San Francisco  And this will return all the customers in San Francisco.  Okay, now, let's expand the tables,  so here are the tables in this database. We have customers,  we have orders, products, shippers and so on.  Now, select this customers table whenever you hover your mouse  over this item and see these three items on the right side.  Click on the right most icon, that looks like a table with a  thunder. With this we can see all the data, in this  table. So this is our customers table. In this table, we have these columns like customer id which we use to uniquely identify  customers. We all have first name, last name, birth  date, phone, address and so on. So these are the columns  in this table and every row is called a  record. So every row represents one customer and these are the pieces of  information we know for each customer. Now let's look at  another table, let's open the orders table,  in this table we have these columns like order ID, customer ID,  order date, status, and so on. What is this customer ID here.  We use this column to identify who has placed  each order. Now what is interesting here is you have referred to this customer  using their customer ID which uniquely identifies that.  In other words, if Jon Smith has placed an order, we don't  store John Smith here, we only store John's customer ID.  Why is that? Here is the reason. It is possible  John Smith might have placed multiple orders in our system.  Now every time John places his order, we need to look up his address and  phone to ship his order. Now it is possible that some of this information  might change in the future. John might move to a new place or change his  phone number, he might even change his name, if you repeat all that information next to each order, then we'll have to come back and make changes in multiple places. In contrast, with this design we only  store the ID of john here, so anytime we want to change  any information about John, instead of changing that here. We go back to our customers table, so let's look at  customer with ID 6, that is actually called (?) So here is all the information about Elka. This is her phone number, this is her address, and by the way this is all dummy data that I created using a tool.  So, if any information about elka changes in the future,  this is the only place that we need to modify. So  this is how these databases work. We refer to these databases as  relational databases. That basically means in these kind of databases we have  multiple tables that are related to each other using  a relationship. So internally there is a relationship between the customers table, and the orders table. So the customer  ID column in the customers table is related  or linked or associated with the customer ID column.  In the orders table. Here's the orders table, and here we have  the customer ID column. So this was a brief introduction to  relational databases, you learned about databases, tables,  columns, rows and relationships. In the next section I'm going to show you how to retrieve data from a single table in this database.  But, before going any further as an exercise I want you to explore  the invoicing database. Look at the all the tables, look at all the data to get an id of the kind of data that we have in this database. You're going to use this database  a lot in the future, so let's spend a couple minutes to explore this database.  In this tutorial I'm going to show you how  to retrieve data from a single panel. Now look at the navigator panel.  Currently none of our databases is displayed in bold, and that means none of these databases are selected for query. So the first step to rate a query to get data from a database, is to select a database.  The query that we'll write will be executed against that database.  In this demo, we're going to use the SEQUEL store database.  So we type our use SQL_ store. Now use is a keyword in the SQL language, and that's  displayed in blue. Now SQL is not a case sensitive language,  and that means we can use upper case or lower case characters, it doesn't really  matter, but as a best practice, we should capitalize the  SQL keywords, and use lower case characters for everything else.  So now, let's go ahead and execute this query. Alright,  Look, the SQL store database is now displayed in bold.  Now in MySQL workbench, we can also select a database  by double clicking that, so now I double click SQL invoice  and it's the current database. Now if we run this query again,  the SQL store database becomes selected.  Alright, now let's write our first query to retrieve all the customers in this database. So after the you statement we're going to use  select statement. Here is the basic syntax or basic structure  of the select statement, we type out select in front  of that we specify the columns that we want to retrieve, for example we can retrieve  the customer ID column as well as the first name column or  we can retrieve all columns using an asterisk.  Now after that we use the from clause and this is where we specify the  table that we want to query, in this case the customer's table.  So this is the simplest query to select all the customers in a given table,  now whenever you have multiple SQL statements you need to terminate each statement using a semicolon. So,  look, we have a red underline here that indicates an error, if you hover your mouse over here,  you can see this tool tip saying select is not valid at this position.  Because we didn't terminate the first statement with a semi colon.  Okay, now let's execute this query one more time, once again,  we can click on this button here, or we can use a short cut,  so look at the query menu on the top, the first line is execute. Now here's the shortcut for this command, on Mac, it's shift  command and enter. On Windows its going to be different honestly  I'm not sure. So whatever it is, use that. So I'm going to press  shift command enter, and here are  all the customers in this table. So this  next statement has two clauses, the select clause and the  from clause. But there are other clauses we can use to filter  and sort data. For example, you can use the wear clause  to filter the result and get the customer with ID one. So we can write an expression like this. Where  _ID = 1. Now when we execute this  query, we'll only get the customer with ID  1. So this is the where clause. We can also sort  the data so after wear we use the order by  clause and here we specify the columns that we're going to sort the results from on. Let's say we want to sort these customers by their first name so we type out  first_name. That is the name of one of the columns in this  table, right? Now if you execute this query this order by doesn't really have  an impact, because we only get one record in the result  so let me temporarily take out the where clause,  to do that we can put two hyphens in front of this line, now this line,  is treated as a comment, which means the SQL engine is not going to execute this, okay, so let's execute this query one more time,  now all the customers that we get our sorted  based on their first name. So that's the basic idea.  Now over the next few tutorials your'e going to learn more about these clauses in detail. But what you need to take away in this tutorial is that  is that these 3 clauses from where an order by are  optional. As you can see in this example, I'm not using the where clause,  we can also comment out the order by clause, we can also comment  out the from clause, so instead of selecting all the columns,  in a given table, we can select some values like one and two. Now,  if you execute this query one more time, in the result, we get something like this. Two columns called one and two, and in these columns  we have these values. So all these clauses are optional but in the  real world we quite often use all of them. Now what you need to understand here is that  the order of these clauses matter, so we always have select first,  then we have from, then where, and finally order by.  We cannot change the order of these clauses, otherwise we get a syntax error.  Which basically means the syntax, or the grammar or the structure  of our simple statement is incorrect. So it cannot be executed.  And one last thing before we finish this tutorial, you can see I've listed all these clauses on a  new line, now technically you don't have to do this, because line breaks, white spaces and tabs are ignored  when executing SQL statements. So we could come back here and  put from in front of select, so select store  from customers all in one line, and that's perfectly acceptable for simple queries,  but as your queries get more complex, it's better to put each clause on a new line. So that's all for this tutorial. In the next  tutorial, we'll explore the select  clause in detail.  In this tutorial, we're going to look at the select clause in detail.  So, since our current database is SQL store, to  clean things up I'm going to remove the first statement, you don't really need it now,  also, I'm going to delete these two comments, we just want  to focus on the select clause. Alright, so what can we do with this select clause? Well in the last tutorial we learned that if you use  an asterisk, this will return all the columns. Alternatively we can specify  the columns that we want and this is helpful in situations where you have a  big table with so many columns and perhaps millions of record.  If you want to bring back all that data, that's going to put a lot of pressure  on the database server, in this case MySQL, as well as the network.  So, that's when we explicitly specify the columns that we  want to get. Let's say we want to get the first name  and last name columns. Execute the query, as you can see, we only get these two columns.  And they are in the same order we specified here. So if we  change the order and put the last name first and execute the  query again, now we can see the last name column comes first.  Now let's add a new column, at the end, let's get the points for each customer as well, run the query, so these are the points for each customer which are calculated based on their shopping.  Now let's say we want to get these points and put them in a mathematical formula  to calculate the discount that we can give to each customer.  So here we can use an arithmetic expression, that's points plus ten.  This is an arithmetic expression. So now we can execute this query  for the first record you can see that their points will end up being 2283. Let's run the query one more time there you go. Now we can put the original points column here for clarity.  So points, points plus 10. Let's run the query one more time, now you can see the original points, and next  to that you can see the value that we're going to use to calculate the discount.  Now here we're using the plus operator which is for addition, we also have  multiplication, division, subtraction, and  module which is the remainder of the division. So let's change this to something  more complex. Let's say we want to get the points, multiply by 10,  and then add 100 to it.  Now we can immediately see that this line one is getting too long  and it doesn't fit on the screen, in situations like this, you can break up the select clause by placing each column on a new line, so,  select last name, then first name  points finally points times 10,  plus 100. So let's execute this query one more time.  So this is our new column with the new calculated value.  Now one thing you need to understand in this arithmetic expression is the order  of operators, and this is based on the order of operators in math.  So in math, the multiplication and division  operators have nighter precedence then addition and subtraction, so in this expression, points is multiplied by 10 and then the result is added  to 100. If this is not what you want you can always change the order by using parenthesis, as an example, let's change this multiplication to addition and then put that  multiplication here. In this expression, first 10 is  multiplied by 100, and then the result is added to the points.  Now let's say this is not what we want, so we can change the order by using parenthesis here.  With these parenthesis, first we get the points add 10 to them  and then multiply the result by 100. So this parenthesis are useful for changing the order of operations as well as  adding clarity to our code. So someone else reading this code can easily understand.  the order of these operations. Now let's execute this query one more time,  alright, now look at the name of this column here,  its set to the expression that we have on line 5.  That doesn't quite make sense you want to have a clear descriptive name,  so we can give this column an alias using the as keyword.  So, as and then we give it a name like discount  discount _factor. Let's run the query again.  now the name of this column has changed, so this is the  benefit of using an alias, we can give descriptive names to the  columns and the results sets. Now if you want to have a space in the  column name, you need to surround it with quotes, either  single, or double quotes. So we put quotes here and then  we can add a space in between these two words. Let me  execute the query one more time. Now we have discount factor. So let's quickly recap everything you learned about the select  clause. We cause an asterisk to return the columns, or  we can explicitly specify the columns that you want to return.  We can also use, arithmetic expressions here, and optionally, we can even  gibe an alias to each column in the results set. Now there is one more thing you need to know about the select clause. So let's delete this query  and select the state column,  of the customers table. Take a look. These are the  states in which our customers our located. Now currently in the sample  data we don't have any duplicates, in other words we don't have multiple customer in any of these states. But for this demo I want to change the  state of the first customer to Virginia, so we end up with duplicates  in the result set. So let's open up navigator panel here's our customers table, let's look at all the data,  and here's our first customer,  here a you can see, it's located in the state of Massachusetts  now I want to change this to Virginia. So double click VA for Virginia, enter, now  on the bottom right corner of the screen, you should see two buttons,  apply and revert. Unfortunately I cannot show you this button  because the recording window is a bit smaller then MySQL  But look down in the bottom right hand corner, click and apply. You're going to see a dial up box like this asking you to review the changes, so go ahead and click that button one more time alright, now, let's go back to our first query window, and execute this query one more time.  As you can see, the first two customers are located in Virginia. What if you wanted to get a unique list of states in the results set, that's when we use a distinct  keyword. So select distinct set.  With his query, we'll retrieve a unique list of states from the  customers table. So with the distinct keyword we can remove  let's execute the query one more time, now you can see Virginia is not duplicated.  Alright here's an exercise for you.  I want you to write a SQL query to return all the products in our database  in the result set. I want to see three columns, name,  unit price, and a new column called new price which is based on this expression, unit price  times 1.1. So let's say you want to increase the price of each product by 10%. With this query you want to get all the products  the original price and the new price. So pause the video and spend  one or two minutes on this exercise, when you are done come back and see my solution.  Alright this is pretty easy, so we start with select  now what columns do we want to select? Name, unit _price and then here we're going to use an arithmetic  expression to calculate the new price. So we type  out unit price times 1.1 and then give it a  alias, o as new_price or we can put this in quotes  and put a space between new and price. Now where do we want to select these columns from? From the products table, so from  products. Note that I've used upper case characters for all the SQL keywords and lowercase characters for everything else. So,  let's go ahead and execute tis query, this is what we get  so these are all the products, you can see their original price  as well as the new price which is 10 % more expensive.  In this tutorial, we're going to look at the where clause in SQL. So earlier I told you that we use the where clause to filter  data. For example, let's say we only want to get the customers with  points greater than 3000. So here in the where clause you can type out the condition like this. Points, greater than  3000. When we execute this query, the query execution engine in MySQL is going to iterate over all the customers  in the customers table. For each customer it's going to evaluate this condition  if this condition is true, it will return that customer in the  result set. So let's go ahead and execute this,  and here's the result, as you can see you only have two customers  with points greater than 3000.  So, thesis what we call the greater than operator which is one of the  comparison operators in SQL. Let me show you the completeness of comparison  operators, so, we have  greater than, greater than, or equal to, we have less then,  less than or equal to, here's the equality  operator, and for not equality, we can use an exclamation  followed by an equal sign, or something like this. So both  of these are not equal operators. Let me show you examples of  these operators. So I'm going to delete all these and bring back the previous query, let's say we want to get only the customers in the state of Virginia. So we can change our condition to something like this.  Where state equals Virginia.  Note that I've put Virginia in quotes, because this is what we call a  string. A string is a sequence of characters. So whenever you're dealing with a sequence of characters, or basically textural data, we  need to enclose your values with either single or double quotes.  But quite often, by convention, we use single quotes  so let's execute this query and here's the result, you can see we only have these two customers with ID 1 and 2, who are located in Virginia. And it doesn't matter if you use upper case or lower case characters, so if you type out the a in lower case and execute the query you get the exact same result. Now what if you want to get all the customers  outside of the state of Virginia, you can use the not equal operator.  So, we can either prefix this with an exclamation  or use this other notation.  Either way we get the same result. So these are  the customers that are not located in Virginia. Now we can  use these comparison operators for date values as well. For example,  let's say you want to get only the customers born after January  1st, 1990. So we change out condition to first date, greater then, once again we use quotes,  for representing date values even though dates are actually not  strings. But in the sequel language, we should enclose dates with quotes,  so, here we type out 1990,  01 for January, -01 for date. So this is the standard or default format for representing  dates in MySQL. 4 digits for the year, two digits for the month, and 2 digits for the day. So let's go ahead and execute this query. I actually made a mistake here, so we don't see the  result, instead we see the action output, or the output window. If you scroll to the bottom, you can see the details of the error. So here I used  the wrong name for the column, which should separate these two words with an underscore. That is the name of our column. So,  let's execute the query one more time, so we only have 3 customers born after January 1st 1990. So these  are examples of comparison operators in SQL. In the next tutorial I'm going to show you how to combine multiple conditions when filtering data.  Alright, here's your exercise. I want you to write a query to get the  orders that are placed this year, so look at the orders table, see what columns to do we have there, and based on that write query with a  where clause.  So here's the orders table, in this table we have this column, order date. We can use this problem to see the orders that are placed this year  so here's our query, select, start from order  where order_date, is  greater than or equal to 2019, assuming  this is the current yer, so 2019, 0101.  Now since currently we are in the year 2019, this query will return all the orders placed this year. But next year this query  is not going to give us the right result. But don't worry about it, later in the course I will show you how to write a query to get the orders placed in the current year,  so for the purpose of the new exercise, this is a valid solution. Now let's execute this query and see what we get. So, we have  only one order, order ID 1, that is placed in the current  year.  In this tutorial I'm going to show you how to combine multiple search conditions when filtering data. So, let's say you want to get all the customers that were born after January 1st, 1990, who also happen to have more then  1000 points. So this is where we use the and operator.  So we type out and, and after we type out another condition.  Like points, greater than 1000.  Now when we execute this query, we only get customers who have  both these conditions. Let's take a look, so execute  we only have 2 customers and if you look both these people are born after 1990, and they have more then  1000 points. So this is the and operator. When we use this  operator, both these conditions should be true. In contrast to the and  operator, we have the or operator. So with or if at least one of these conditions is true, that row will be returned in the  result set. Let's take a look. Now we execute this query again,  2 records we have quite a few records. So for example,  we have this person who's not born after 1990  but if you look at their points they have more then 1000 points.  So any customer records that satisfies at least one of these conditions will be returned. Now let's take this to the next level. Let's say we want to get customers who are either born after 1990, or  they should have at least 1000 points and live in Virginia  so this is how we do this, we type out and  and then we add another condition, state equals  Virginia. Let's execute this query and see what we get. We only get 4 records, so these are the customers that are either born after 1990 or they have more then 1000 points and live  in Virginia. If you look at the first customer here this person is not born after 1990. But you can see that she lives in Virginia and she has more than 1000 points. So the last two conditions.  are true for this customer. Now when combining multiple logical operators. You need to be aware of the order of these operators.  So earlier I talked about he order of arithmetic operators. I told you that multiplication have a higher order then addition and  subtraction. And we can use parenthesis to override  the default order. We have the same concept in logical operator  So the and operator is always evaluated first.  So when this query is executed, the query execution engine  first evaluates this condition, because here we're using an and it doesn't matter that we typed out this condition after the first condition.  Because the and operator has a higher precedence. Now you can always change the order using parenthesis. And this also makes your code cleaner  and easier to understand. So here we can put parenthesis,  around these last two conditions,  and also we can put these in a  new line for  clarity. Something like this. So anyone  who reads this code can easily understand what is the intent of this query.  Now we also have logical operator called  not. And we use that to negate a condition. So,  I'm going to simplify our where clause. Let's say we're searching for customers who were born after 1990 or  we have more then 1000 points. If we execute this query  we get these people. Customers with  ID 1, 3, 5 and so on. Now we can use the not operator  to negate this condition. So we apply not here, and  preferably we also put parenthesis around this condition.  Now when we execute this query, we see other customers that are not  in the current results set. Let's take a look. So,  instead of customers with id's 1356 and so on, we get customers with id's 2 4 and 10.  Now technically these customers were born before 1990. And we have less then 1000 points. So if you look here,  this first customer was born before 1990 and  he has less then 1000 points. How do they know that? Let me show you a trick that I learned in math. Whenever you have a not  operator. You can simplify your expression like this. We apply the not operator  to the first condition. People who were born after 1990, how can we negate this condition? Well,  the greater than operator becomes less then or equal to.  That is the inverse of that condition. Now we  apply the not to or to negate the or. What do we get? We get and. Finally apply the not operator on the last condition. We both have more then 1000 points.  When we negate this condition we get customers with less then or equal  to 1000 points. Now, you can remove the not operator  to simplify this, we don't need parenthesis anymore because we  only have 2 conditions that are combined with an end. Here is the result.  As you can see, this is much easier to read and understand  people who were born before this day and they have less then 1000 points  Alright, here's your exercise. From the order items  table, get the items for order number 6,  where the total price for the total item is greater then  30.  Alright, here's the order items table, in this table we have these columns order id, product id, quality, and unit  price. If we multiply the quantity by unit price we can  get the total cost of that item. And then we can compare it with  30. So, let's go ahead and write this query.  Select star  from order items. Where  here we need two conditions one is for order, so order  _id should be 6, and the second condition  we want to calculate the total price. So we get the unit price multiply it by quantity and this  value should be greater than 30. So as you can see,  we can use an arithmetic expression in the where clause. It's not limited  to the select clause. Okay? Now let's execute this query and see what we get. We should get only 1 item,  that is for product 1, here in quantities 4 and unit price  is just over 8 dollars, so the total price for this item, is greater than 30.  Hey guys, Mosh here.  In case you haven't seen my website yet, head over to codewithmosh.com.  This is my coding school where you can find plenty of courses  on web and mobile application development. In fact recently I  published a complete SQL course that is about 10 hours long,  and it teaches you everything you need to know from the basic to advanced topics  such as database design, security, writing complex queries,  transactions, events, and much much more. These are the topics that every software engineer must master. This YouTube course  you're watching, is the first 3 hours of my complete SQL course that is about 10 hours long. So if you want to master SQL and get job ready, I highly encourage you to enroll in my  complete SQL course. You can watch it anytime, anywhere, as many times as you want, you can watch it online or download the videos. The course comes  with a 30 day money back guarantee, and a certificate of completion  that you can add to your resume. The price for this course is $149 dollars, but the first 200 students can get it for just over  10 dollars. So if you're interested the link is below this video.  In this tutorial I'm going to show you how to use the  in operator in SQL. So, as an example, let's say you want to get the customers that are in Virginia or Florida, or Georgia. One way to write this query is like this. So, where state equals Virginia, or  a state equals Georgia, or a state equals Florida. Now people who are new to the SQL language or  programming in general find this expression a little bit strange.  They ask, ""Mosh, why can't we write this expression like this?"" where state equals Virginia or Georgia or  Florida. Here's the reason, we use the or operator  to combine multiple conditions. So here we have a condition  or an expression more accurately, but on the right side of this or operator  we have a string. In SQL we cannot combine a string  with a boolean expression that expresses a boolean value which can be  true or false. So that is why we have to write our query  like this. So we have multiple expressions or multiple conditions  and we're combining them using the or operator.  So, now if we execute this query we get these customers here.  customers here but there is a shorter and cleaner way to get the same result.  Instead of combining multiple conditions using the or operator we can use the in operator. So, where state  is in and then in parenthesis we add all the values,  like Virginia, comma, Florida, comma Georgia and the order doesn't matter, this query is exactly equivalent  to what we had earlier, but a you can see it's shorter and easier to understand.  So, let's execute it, look, we get the exact same result. Now here we can also use the not operator. Let's say you want to get the customer's outside of these states, so we can use  rare state, not in this list.  Now if you execute this query, we get customers who are located in Colorado,  Texas and so on. So use the in operator whenever  you want to compare an attribute to a list of values.  Now here is your  exercise. I want you to write a query to get the products where  their quantity in stock equals on of these values.  49, 38, and 72, so pause the video, do this exercise, and  then come back and continue watching.  Alright, this is pretty easy, so we do a  select star to get all the columns from the products table,  where quantity in stock  in we use the in operator to compare this attribute with these values.  49, 38, and 72, let's execute the query,  we get only 2 records because we  don't have a product with quantity in stock equal to 72.  In this tutorial, we're going to look at the between operator  in SQL, so that means we want to get the customers who have more then 1000 and less then 3000 points. What made you write these queries like this? Where, points, greater than thousand, more accurately greater than or equal to 1000.  And, points less then or equal to  3000. When we execute this query we get  how many, we get 4 people that satisfy my criteria.  Now whenever you're comparing an attribute with a range of values,  you can use the between operator, and that makes your code shorter and cleaner.  So, we can rewrite this expression like this, where points,  between 1000 and 3000.  This is exactly equivalent to what we had before, so these range values are also inclusive, so that means points is going to be  greater than or equal to 1000 or greater than or equal to  3000. Let's execute the query, we get the exact same result.  Alright, now as an exercise, I want you to write a query, to get the customers  that are born between January 1st 1990 and January  21st, 2000.  Alright, so we start the  select star from customers,  where birth_date between  so what matters here is we can use the between operator  as well. It's not limited to using numbers. So with birth date between now we need to supply two date values, so as I told you before,  the format for dates is four digits for the year, so  1990, two digits for the month, and two digits for the date.  So, the birthdate should be between this value and  here's a second value. 2000, 0, 1, and  01. Let's execute this query, we get  only 3 people who match this criteria.  In this tutorial, I'm going to show you how to retrieve  rows that match a specific string pattern, for example,  let's say we only want to get to customers who's last name start with  3. So, here in the where clause we type out where last name this is where we use the like operator,  and right after that we have a string pattern, so,  you want to get the customers who's last name start with b and we have  any number of characters after b. So use the  percent sign to indicate any number of characters, you may have  one character after b or no characters or 10 characters, with this pattern, you get all the customers who's patterns start with b.  And also it doesn't matter if it's an upper case or lower case b.  So, let's execute this query, there you go, so you only have  3 customers who's last name starts with b. As another  example, let's say we only want to get the customers who's last name starts with  brush. So, we change our pattern to brush,  percent. Now, let's execute the query, we only get  this one customer here. Now this percent sign doesn't have to be  at the end of the pattern, it can be anywhere. For example, let's say we want  to search for customers who have an e in their last name, whether it's at the beginning  in the middle or at the end, so we change our pattern to  percent e percent this pattern means we can  have any number of characters before or after b. Let's execute the query, these are the customers that have a b  somewhere in their last name. It doesn't matter if b is in the beginning  or in the middle or at the end. Let's look at another example,  I want to get all the customers who's last names end  with y, so here's the pattern we use,  let's execute this query, so we have 5 customers  who's last name ends with a y. So this is how we use the  percent sign. Now we also have an underscore and  that matches a single character so with this pattern you get customer  who's last name is exactly two characters long,  we don't care what the first character is, but the second character should be y.  Let's execute his for you. Obviously we don't have any customers who's last  name matches this pattern. But if you change this pattern to  5 under score, so 1234 5, followed by a y we should get  these customers. So their last name is exactly  6 characters, we don't care about the first 5 characters, but all of them end with a y. Now, as another example,  we can replace the first underscore with b, and that means  we want to get the customers who's last names start with b, and  after b we have exactly 4 characters followed by a  y. Let's execute this query. So we only have one customer,  that matches this pattern. So this is how we use the  light operator, use the percent sign to represent  any number of characters and an underscore  to represent a single character.  Now this like operator in MySQL is an older operator  but we also have a newer one that is more powerful and it allows us to search for any string patterns. And that's what I'm going to show you next.  Alright.  Here I'm going to give you two exercises for the like operator.  First, I want you to get the customers who's addresses contain trade or avenue, and next I want you to get the customers who's phone  numbers end with 9.  Alright, let's get started with the first exercise. So  start from customers where address like now here we want to use a search pattern like this.  You want to have tray (?) but tray can be anywhere in the address. So,  we put a percent before and after tray.  Next, we should use the or operator to search for another pattern.  Or address like, let me  put this on a new line that is better, address once again, percent, avenue percent, that's it.  So, let's execute this query,  here is the result, you should get the customers with ID's  2, 9, and 10. If you look at their addresses, all of them have either tray or avenue in their address. Now let's work on the second exercise, you want to get  the customers who's phone numbers end with 9. That is pretty easy,  so, let me change our where clause. Where  phone once again we use the like operator and a percent,  followed by a 9. That's all you have to do. Let's execute the  query. So, here's the result, customers with  id's 3 and 7, their phone numbers, and  9. So this is how we use the like operator. And by the way you can always use the not operator here let's say you want to get the  customers who's phone numbers don't end with 9,  so we simply prefix like with not. Now,  if we execute this query one more time, we get all the other  customers in the database.  In the last tutorial you learned about the like operator in SQL. So as another example  let's say you want to search for the customers who have the word  field in their last name. So we type out the where clause like this,  where last name, like, percent,  field, percent, so the word field,  can be anywhere in the last name. Let's execute this query, we get  only one customer, beautiful. Now we also have another operator in MySQL, that is reg x which is  short for regular expression, and regular expressions are extremely  powerful when it comes to searching for strings. So they allow us to search for more complex patterns. Here's an example. If I want to rewrite this last where clause using a regular  expression it looks like. Where last name  ragexp now here in our string pattern  we don't have to type out the person's size we only type  out field so what we have on line 4 is exactly  identical to what we have on line 3, let's execute this query  we get the same result, beautiful, now here in regular  expressions, we have additional characters that we don't have when we use the  like operator. For example, we can use the carrot sign to indicate the beginning of a string. So if I put a carrot  just before the word field, that means our  last name must start with field. Obviously, if you execute this query, we don't get anyone that matches this criteria, so we use the  carrot sign to represent the beginning of a string. We  also have a dollar sign to represent the end of a string.  So this pattern means the last name must end with field.  Let's execute this query, you get the same result as before. Now we can also search for multiple words here, for example let' say we want to find  the customers who have the word field or mac in their last name So, we use a pipe, a vertical bar,  and type out another pattern. Let's execute this query, so here we have two customers, one of them has the word  mac, the other has the word field and the last name.  Now we can take this to the next level. Let's say we want  to find the customers who have the words field, or Mac, or rows  in their last name. Let's execute the query we get 3 customers.  Beautiful. So we use a pipe or a vertical board  to represent multiple search patterns. Now as another example,  we can change our first search pattern to something like this. Now this pattern means this last name should either start  with the word field, or it should have the word mac in it or it should have the word rows. Let's execute the query, now we get only two customers, because our customer with the last name brush field doesn't match this pattern.  However, if we change our first pattern to field  $ and execute the query we get 3 people here,  3 customers. So this is how we can combine multiple special characters when building a complex pattern. Now let's look at another  example, let's say you want to search for customers who have an e in their last name.  So these are all the people, alright, now let's say  you want to make sure that before the letter e, we should either have a  g or an i. So this is where we use square brackets.  And inside the brackets we add multiple characters like g, i, m and that matches any customers who have  ge or ie or me  in their last name. So any of these characters can come before e.  Now, let's execute this query,  there you go, we only get 2 customers, and the first example before e we have i which is one of the characters  inside the brackets, in the second example, before e we have  a g which is also another valid character before  and once again the square brackets don't have to be before we could add them after e, any customers who have e  followed by an f or an m or a q in their last  name, can be returned with this pattern,  if we don't have anyone in the database so this is how we use square brackets,  now we can also supply a range of characters, for example  we can have e and just before e you can have  as many characters from a to h, you don't have to type them out explicitly like abcdefg, that's very  verbose, so, we can type out a to h.  And then if we execute this query we get these three people.  So, let's quickly recap everything you learned about regular expressions in this tutorial. Use a carrot to represent the beginning of a string, so beginning, we use a dollar sign to represent  the end of a string, we use a vertical bar or pipe,  to represent a logical or so we can supply multiple search patterns, we use square brackets to  match any single characters listed in the brackets, and finally  we use square brackets with a  hyphen to represent a range.  So any characters from a to f.  Technically MySQL supports more special characters but quite honestly, the ones that I've listed in this tutorial are the ones that you'll be using 90% of the time. So just memorize these and you're good to go. With honesty a lot of beginners find the syntax for regular expressions confusing, so in this video I'm going to give you 4 exercises that I have carefully  designed to help you quickly learn about this syntax. Here's the first exercise, get the customer's who's first names are Elka  or Ambur. And note that this is Ambur with a U.  Now for the second episode return the customer's who's names  end with ei or on.  Here's the third exercise get the customer's who's last names start with my or it contains se, and finally  as the last exercise return the customer's who's last names contain e followed by r or a u.  So, go ahead and spend 2-3 minutes on this exercise,  when you're done come back and continue watching.  Alright, let's knock out the first exercise. So we'll get  allows, there's a c here, so let's start from  regular expression, and here's our pattern, you're going to search  for two words either Elka or Ambur.  As simple as that. Let's execute this query, we should get two customers, there you go, Ambur and Elka. Alright. Now, let's knock out the second exercise. So I'm going to delete these  we don't need them anymore. So we want to get the customers  select start from customers, where  last name should end with either ey or  om. So, in the search pattern we type out  ey followed by a dollar sign to indicate the end of a string then we add a vertical bar to supply the second search pattern. So On and once again dollar sign.  Let's execute this query, oops I forgot to type out regular expression, there you go. So,  Let's execute this query, and you should get  these four customers with ID's one  three, five and seven. The first three, five, and seven, the first three, their last names  end with ey, and the last customer, his or her last  name ends with on. Alright, Now, let's  work on the third exercise. So I'm just going to change the regular expression  here, we want to get the customers whose last names start with my or contains se. So we use  a carrot to indicate the beginning of a string so  it should start with my, or it should contain se,  again, very easy, let's execute this query  and we get the customer's with ID's  4, 8, and 10 and finally  we want to get the customers who's last names contain e  so, let's change the search pattern, we should have a b,  followed by r or u. Now there are two ways to write  this regular expression, we can use square brackets so  we have b followed by r or u, that's one way, or the other way is to use a vertical bar. So b r or bu. These are both valid solutions. So, I hope you knocked out these exercises, in the next tutorial I'm going to show you  how to get the records with missing values.  In this tutorial, I'm going to show you how to look for records that miss  an attribute. For example, if you select all the customers in our database,  you can see that the customer with id 5 doesn't have  a full number. So if you look closely here, you can see the value of null. Null means the absence of a value. Now let's say we want to search for all the customers who don't have a phone. Perhaps you want to send them an email and say hey, your phone is missing in our system. So how can we get these customers? That is very easy? We use the is null operator, so in the where clause, we type out  where phone is null. Now let's execute  this query, we only get one customer who doesn't have a phone,  now here we can also use the not operator to get  the customers who do have a phone. So we change the conditions to is not null. Let's execute the query,  now in the query results, every customer  does have a phone number.  For this exercise, I want you to write a query  to get the orders that are not shipped yet. This is a very useful query  that is used in a  lot of real applications. For example, let's say you're an admin for online shop. You want to see the orders that are not shipped yet, so you can see  them all. So write a query, and get these orders.  So here we have the orders table, let's have a quick look at the data in this table. So if you pay close attention  you see some of these orders don't have a date. And these orders also don't have a shipper id which  is a unique number for identifying the shippers. So any order that misses the value for the ship date or shipper ID,  is considered an order that is not shipped. So let's go ahead and write  a query to get these orders. So back to our query editor  select star from orders where  ship_date is  null. You could also write shipper id is null. They're both equally correct. So let's execute this query, and you should get  5 orders. Orders 1, 3, 4, 6,  and 8.  In this tutorial I'm going to show you how to sort data in your sequel queries. So here in your have a query to select all the customers from the customers table, if you look at  the query result, you can see that our customer's or sorted by id,  so we have customers 1, 2, 3, 4, and so on. This is the  default sort column. But we can always change this using the  order by clause. But first, let me explain  why the customer id column is the default sort column. So first of all the first I'm going to open up the navigators panel on the left side here's the customers table, now let's click on this middle icon here that looks like  tool. This opens up our customers table in the design mode,  here we can change our columns we cana dd new column or  remove existing ones or change that name and order and so on.  Now if you pay close attention you can see a yellow key just before  This means that this column is the primary key column.  For this query. So in relational databases every table should have a primary key column, and the values in that column  should uniquely identify the records in that table. So  back to our query window, you can see that the values in this column  uniquely identify each customer, so the customer id column  is the primary key column in this table, and that is why when you write a  query against this table, our customers will sort it by id by default.  Now, let me show you how to sort customers by a different column.  So, here in the order by clause, you type out the name of another column, like first name. Let's execute the query, now we can  see our customers are no longer sorted by their id, instead  they are sorted by their first name in ascending order. Now,  if you want to reverse the sort order, simply type out de,  e, sc, which is short for descending. Now,  you're sorting the customers in this order, okay,  we can also sort data by multiple columns, for example,  let's say first we want to sort customers based on their state,  and then within each state, we want to sort them by their first name.  So, we type out multiple columns here, state  and first name. Let's execute the query  now, you can see that the first state we have here is california, followed  by Colorado, and new here in Florida, you have two customers  and these customers are sorted by their first name. Let's have a  close look here, so first we have Ambur and then we have other customers here. Now we can also use the descending argument anywhere here.  For example, we can sort these customers by their state in descending  order. And then sort them by their first name in ascending order  or once, again in descending order. So there are various ways we can sort data. Now one of the differences between MySQL, and  other database management systems, is that in MySQL you can sort data by any columns whether that column is in the select clause  or not. For example, let's say you only want to select  the first and last name for each customer. Now we can sort the result by any columns in this table, they don't have to be first name and last names For example, we can sort them by their birthdate,  take a look, so this is a valid query in MySQL, but other databases management sometimes yell at you when you update a query like this.  Now we can also sort data by an alias for example, here in out select clause let's add the number ten and give it a  alias. As let's say points, so points is not a valid column in this table, it's simply an alias  or expression, in this case a simple number. And here we could have a complex  mathematical expression, it doesn't really matter, we can still sort  data by Alias, so we can order by points  and then first name. Once again this is a valid,  query from MySQL's point of view. Now one last thing before we finish  this tutorial, I've seen some tutorials that teach you how to sort data by calling positions, for example, here we can order it by  1, 2, and that basically means sort the data by the first name,  and then, the last name. So these are the orders of these columns,  if you execute this query, you can see that our customers are sorted by their first  name and then last name. Why this approach works, it's something that you should avoid. Because if in the future you come back here and add  a new column, in front of the first name column, let's say  first, date. Now our customers are no longer sorted  in this order. So sorting data by calling positions  produces unexpected results and is something you should avoid.  always sort by column names like first,  Alright, here's your exercise for this tutorial. In this database, we have this table,  called order items, where we find the items for each order. Now,  I've written the query that you cannot see here, because that's the solution to the exercise  I'm going to give you, that query produces this results. So  we only have the items for the order with ID 2, and we  have sorted these items based on the total price  for each item. So the total price for each item equals quantity times unit price. In this case the total price of product 1 is just  over 18 dollars. So go ahead and write a query  to select all the items for order with ID2. And  sort them by their total price in descending order.  Alright, let's select everything from order  items, where order id equals 2.  that returns all the items for this order. Now we want to make sure  to sort them by their total price, so,  here in order by clause, we write an expression. Quantity times  unit price, this returns the total price for each item.  And then we add the descending argument here. So,  once again the expression that we use in the order by clause doesn't have to be  column name, it can be an alias or an arithmetic expression like this.  Let's go ahead and execute this query. This is what we get  now for clarity, I would like to add another column in the result  So, let's say quantity times unit _price. We give it an alias like total  price. Let's execute the query, you can clearly  see, that this data ia sorted by the total rice in descending order.  However, there is a bit of duplication in our query, you have to repeated this expression in two places. So now we can simplify our  by clause, by using an alias that is total price.  And we gwet the exact same result. Net I'm going to show you how to mimic the number of records returned form your queries.  In this tutorial, I'm going to show you how to limit the  records returned from the query. For example, when we return this query  we get all the customers in the customer, table, so we have to  ten customers here. Now what if we only want to get,  the first 3 customers. That's where we use the limit clause.  Let me show you. So, after from, you type out limit 3, and this will return only the first 3  customers. Now if the argument that we pass here is greater than the number of records that our query produces, we'll get  the records in the query result. For example, if I pass 300 here,  obviously we don't have 300 customers in this table, so when we execute this query. We get all the ten customers in this table.  So this is how the limit clause works.  Now here we can optionally supply an offset, and this is very  useful in situations where you want to paginate the data. For example,  let's say we have a website, and on this website we have a web page for the user to see all the customers int he database. Now for simplicity  let's imagine, we want to show only there customers per page. So,  what are the customer's you're going to have on page 1? We're going to have  customers 123. On page 2 we're going to have customers 456 and on page 3 we're going to have customers 789.  Now, let's say we want to write a query to retrieve the customers on page 3.  How can we do that? Well, you want to skip the first  6 records and then pick 3 records. So,  we change our limit clause to something like this. 6 and 3. So 6 is what we call an offset.  And that basically tells MySQL to skip the first records  and then take 3 records. Let's execute this query. Alright, now we get  customers 789.  Now, for your  exercise, I want you to get the top 3 loyal customers. These are the customers that have more points then everyone else.  Alright, first we select everything from the customers table,  now we need to order these customers by their points,  in descending order. So if you look at the query result  you can see that customers are sorted by their loyalty. So,  the most loyal customers come first, now we want to pick  only the first three customers, and that's where  we sue the limit clause, so limit,  let's execute this query. And these are the  most loyal customers, customers with id's 56 and 3. Now, here's one thing I want you to remember and that is  the order of the limit clause. The limit clause should always  come at the end. So first we have the select clause and then we have from optionally you can have where followed by order by and finally limit. Order of these clauses matter  If you change the order MySQL is going to yell at you. So pay attention to the order when writing your queries.  So far you have only selected columns from a single but in a real  world, we quite often select columns from multiple tables. And that's what I'm going to show you over the next few tutorials, so on the left side if you put  our orders table. Let's select all the data here,  in this table we're using the customer id column to identify the customer  that has placed each order. Now as I have told you before  we don't store customers information here like their phone number, their email their address,  because this information can change in the future. And if  even a customer has placed multiple orders then we have to change multiple records, you don't want to do that. That's why we have separate tables  for customers and orders. Now in this tutorial I'm going to show you how to select the orders in the orders table, but instead of showing the customer id, we showed full name for each customer. So lets go back to our query window. Okay, so,  we want to select everything from the orders table. Now we should combine the  columns in this table with he columns in the customers table. That  is where we use the join keyword. And here we can optionally  type inner join, because we in SQL we have two types of join inner join and over join. You'll look at outer joins later in this section,  so for now we are only using inner join and these inner keyword,  is actually optional, so we don't have to type it. So, you want to join the orders table with the customer table. Now, on what basis do we want to join these tables?  Well, here in the customers table, we have this customer id column.  So if you put these two tables next to each other you want to line up the records  such that the customer ID's are equal. That is where  we use the on phrase. So after we type out a condition, here's a condition we need to type out,  orders.customer_id. Should be equal to  customers.customer id.  Now, this is getting outside of the screen, so let's break up the line,  that's better, so with this query, we're telling MySQl that hey, whenever you're going the orders table  with the customers table, make sure that the customer ID column,  in the orders table, equals the customer ID  column, in the customers table. Now let's execute this query,  look at the result,  since we are selecting everything here, the first few columns are from the orders table, because we have listed that first  now after all the columns in the  customer table. So customer ID first name, last name and so on.  Now let's simplify the result set and select only  border id, first name, and last name, so query  we select order ID, first  name, and last name. Now let's execute the query  that is better. So next to each order ID, you can see the  name of the customer that placed that order. Now what if you want to display  the customer ID here as well. Well, let's put that here and  see what happens. Customer ID, execute the query  we get an error, so if you look at the output window, down at the bottom,  we should see an error saying column, customer id, field this is ambiguous. Now unfortunately I cannot show you this error, because the size of my recording window is smaller then MySQL workbench. But that aside, let me explain why we're getting this error. Because we have this customer ID  column in both the orders and the customers table,  so MySQL is not sure which table we want to select this column from. That is why it's saying this column is ambiguous  so we need to qualify this column by prefixing it with a table name.  We can either pick it from order table or  the customers table, it doesn't really matter, because the values are equal, right? So, in situations where you have  the same column in multiple tables, you need to qualify them,  by prefixing them with the name of the table, okay, now,  we say tot he query one more time, there you go, you have order ID,  customer ID and the full name. Now one more thing  before we finish this tutorial, if you pay close attention we have repeated the word  orders in multipel places, you have it here, as well as  in the join condition, the same is true about he customers table, you have repeated that here. We can get rid of this repetition  and make our code simpler by using an alias. So write  after each table you can do it in alias,  as a short for orders, so by convention we abbreviate the table's name.  Now, wherever we have orders you should replace that with  o. So here in the join condition, we're going to replace orders  with o, and also one more time, in the select  clause. There you go. You can also apply an alias for  a customer's table, call it c, and then simplify  our join condition like this. So this is how we can join  columns for multiple tables.  Now for your  exercise, I want you to look at the order items table.  So, in this table we have these columns, order ID, column ID,  product id, quantity, and unit price. Now I want you to write a query  and join this table with the products table so for each order  return both the product id as well as this name, followed by the  quantity, and the unit price form the order items table. And by the way  make sure to use an alias to simplify your code,  Alright, first let's select everything from the order  items table, and then join it with the  products table. How are we going to join this table. On order_items. Well actually  let's just keep this on Alias right away, so we use oi,  as an abbreviation for order items. And p as  a short for products. So oi.product id, should be equal to p or products. product id. And by the way, remember that alias for table, you have to use that alias everywhere. So here I cannot type out product, MySQL is going to yell at me. So let's use the abbreviation. Alright, this is how we join these tables,  let's execute this query up to this point. Alright,  so we see all the items form the order items table, followed by  from the products table. Now, you want  to explicit select a few column here. So, to  order items table you want to select order_id.  We take it then we don't have to prefix it with a table name  because this calumnies not repeated in multiple places, so it's not ambiguous.  So, let's make the code shorter, that's better, now  we want to select the product ID column, but because this column exists in both tables, you have to both prefix it with a column name. Either oi or p it doesn't really matter. So,  next, we want to select quantity, and finally you want  price. Now actually here, you have this unit price column.  In both tables, so this is the unit price in order items table  and this is the unit price in the products table,  now you might be curious why we have this column in 2 places,  is that the price of product can change, so for each  order item, you want to have the price at the time the user  placed the order. So this is a snapshot of the price  at a given point in time. The unit price that we have for the products table  is the current price right now. This is very important for the  recording, otherwise we cannot calculate the sales properly. So,  because we have the unit price column in two places, in this case we should pick it from the quarter items table because this is the price at the time of now, let's execute query. So here's  the final result.  In the real world, when you work as a developer or a data base administrator quite often you will  have to work with multiple databases. In this tutorial I'm going to show you how to combine columns from tables in multiple places.  That's pretty easy. So, in the SQL store database, you have this tables  that you're fairly familiar with. Now imagine this products table was not here. Now, if you look at the  database, you can see here another products table, this products table is exactly the same as the products table that we have  in a SQL store database, so it has the same columns and the same data.  Now technically this is not a good design, you don't want to have the same table  repeated in multiple places. But for this demo, let's just imagine  that we don't have the products table here, so we want to join the  order items table, with the products table in the SQL inventory database. Let's get started. So select  everything from the order items table,  let's give it an alias straight away, you want to join this with the products table. This products table is part of the products inventory  database. So we'll have to prefix this with the name of it's database.  So, we type out SQL inventory. Now once again we can give this an alias like p,  then type out our joint condition, so oi.product  id should be the same as p.product id.  Let's run the query there you go, so we successfully joined  tables across multiple databases. Now note that we're prefixing the products table with the name of the database because  the current database that we're writing this query with is the SQL stored  database. Take a look, in the navigator panel, in the SQL  store database is displayed in full. Because earlier, the  root we use statement to select  a database, that will SQL store. Now what if we select  the SQL inventory database. So, let's see what happens SQL  inventory, now because we have multiple statements we have  to terminate this with a semi colon. Now we want to select everything with a  order items table. But we don't have this table inside of this  database. So now we'll have to prefix this table  with the name of it's database, that is SQL underline  story. Let's execute the query, okay,  everything works, beautifully. So here's the lesson. You only have to  prefix the tables that are not part of the current database. In other words the query will be different depending on the database.  In SQL we can also join a table with itself. Let me show you an example. Take a look at this database.  SQL hr, in this database we have  these two tables, employees and offices. Let's take a look at the  data int he employees table.  There you go. So here we have these columns,  employee id, first name, last name, salary  and reports 2. This is the id of  the manager for this person or this employee. Now once again,  you don't want to repeat the managers information here, like the phone number, the address because this information can change in the future, so we are only using  your identifier or their id to refer to them in this table,  now where can we find information about this This manager is actually an employee of the same organization, so,  look at this example, the manager ID is 37 370. Now if you look on the website, here is the ID of that manager which is another employee. That was the manager for this employee. We don't have any values here so  the value for the sale is null. So this employee doesn't have a manager  and that means they are the CEO. So let's go ahead and  write a query to join this table with itself so we can select the name of each employee and their manager. Back to our query window,  first we need to select the SQL hr database.  Next, we select everything from  the employees table, we give an alias like b now we need to join this table with itself. So once again we type  out the employees, but we need a different alias. What should we  call this alias. Well you want to join this table with itself so we can  find the managers right? So we can use m as a shortcut  for managers. Now, let's type our our joint condition.  So from the employees table, we need to join  the reports_2 column. To the manager  table which is basically an employees table itself, and  that is employee_ id. Now let's execute this query and see what we get.  So, we see all the columns from the employees table  repeated the first set of columns, represent the information about the  employees, and after that, we have the information about the managers in this case we have only one manager in this table.  But with this technique we can easily create an organization trial. We can have  a hierarchy of managers. Now let's  only the name of the employee and the manager. So,  right here, since every column in the employees table is  repeated twice we need to prefix each column with a table name.  For example, from the employee's table you want to get employee ID, as well as the first  name, and then for the managers table, we want to select  the first name as well. So every column  should be prefixed with a table name or more accurately the alias because all these columns exist in two tables, right?  Let's go ahead and execute this query, so,  this is what we get, employee id, and here's the managers  first name. We can improve this query by giving an alias to this column. Because it doesn't make sense to have two first name columns.  So, let's give an alias to the third column,  manager. Now, let's execute it one more time.  And, here's the end result. So, we have the empty ID first name, and object. So,  joining a table with itself is pretty much the same as joining a table with another table. The only difference is that we have to use  different alias's. And we have to prefix each column with an alias.  This is what we call a self join. Next, I'm going to show you how to join more then two tables.  In this tutorial,  I'm going to show you how to join more then two tables in writing a  query. For example, back to our SQL database, look at the  orders table, now you know how to write a query to join this table with the customers table to return information about the customer to place each order. But here we also have another column,  status, which is similar to the customer ID status. So the name of the  status's are not stored in this table, they are somewhere else in the  order status's table. Let's have a quick look here.  Our orders can be either processed, shipped or delivered. And these are the identifiers for each of these status's. Now back to our orders table. In the status column you store status id. So now we should write a query to join the orders table, be two tables. The customers table and orders  status's table. The result of this query is going to look like this.  So for each order we see the order id, the date,  the first and last name of the customer, and finally the status of the order.  This is a beautiful report we can create for our users. So let me show you how to write this query. Back to our query editor, first we need to select  the SQL store database, now, we need to select  everything from the orders table, that's going to be the alias,  next we need to join this with the customers table.  On, that customer id should  be equal to see the customer id. Nothing  new so far. Exactly like before. Now here we can write another joint keyword. To join the others keyword  order status's table. So we type out order status's.  And also give it an alias, OS,  what is our join condition? Well, back in the  orders table, here we have the status column. So the  value in this column should be equal to the order status ID,  column in order status's table. Right? So back to the query, so orders table.status should be equal to order status's.order status ID. Make sure to get the name right, otherwise you're going to get an error So this is how we can join three tables.  Now in the real world as you work on more complex problems, you'll end up joining  even ten tables. So this is not uncommon in the SQL world.  Now let's go ahead and execute this query. First we get the column  from the orders table, followed by the orders from the customers table,  and so on. This result is so complex and hard to extract information.  from. So, let's explicitly select  a few columns here. From the orders table, you want to select  the order iD column, as well as the order date. Then, from the customers table, we want to select  the first name, and last name. And finally form the order status's, we select the name  column. So we can give this an alias like status that's better. Let's execute the query one more time.  So, here's the end result, we have order ID,  order date, the name of the customer, followed by the status of the order.  Alright, for exercise, take a look at the SQL invoicing database. Here we have this table, payments,  and these are the payments that each client has made towards either invoice  Let's take a look at the data, so we have these columns,  like client id, that identifies the client, so we can join this table  with the client's table to see the name of the clients. Next we  have invoice ID, we also have date,  payment method. So similarly we can join this table with the payment method  table here, let's have a look at the data in this table, these are the  payment methods, credit card, cash, PayPal, wire transfer. So,  back to the payments table, I want you to write a query and join this table  with the payment methods table as well as the client's table.  Produce a report that shows the payments, with more details, such as the name of the client,  and the payment method.  Alright, first we need to use, the SQL invoicing database, now we can  select everything from the payments table which we call e, next we need to join this with the client's table which we call c, on p.clientid  should eb equal to c.client id. Let me double  check the column name to make sure I got it right, so back to the payments table the column is called client item. You also have a column called  payment method, that we should join to the payment  method ID column of the payment methods table.  So, back to the query, once again we use a joint  statement here, join with payment methods, we give it an alias  pm, on p. payment _method should be equal to pm.  payment method id. Make sure to type it out correctly  otherwise you're going to get an error. So let's go ahead and execute the query  up to this point, finally let's hand pick  the columns that make the most sense. So,  from the payments table, let's select the date, followed by invoice id,  what else do we have here. So we have client id, invoice  id, date, and now the payment method, I'm going to pick the amount  column from here as well, so back to the query, p  .amount. Now we need to add information about the client.  Let's take a look at this table, clients,  so here we have columns like name, address,  city and so on. All we need here is the name column. So back to the query,  of the client's table let's select the name column and  finally form the payment method table, let's select, what is that column called it's called name. So back to the query pm.name. So here's the end result.  Now we can put this column in any order that we want, it doesn't really matter,  let's execute the query, and make sure everything works.  So, on this date, on this invoice,  we have a payment for this amount by this client using a  credit card.  Ina let he examples you have seen so far,  we use a single column to uniquely identify the rows  in a given table. For example, for example, in the customers table,  we have this customer ID column which uniquely identifies  the rows in this table. But there are times where we cannot use a single  column to uniquely identify columns in a given table. For example, look at the order items table. In this table, we have columns like order id, product id, and so on. Now if you look at  the data, you can see that the values in the order id column are repeated.  They are duplicated. You have 2226 and so on. So we cannot use this column on it's own to uniquely identify each record.  The same is true for the product id. The values for this column  are also duplicated. So in this table we use the combination of the values in both these columns to uniquely identify  each oder item. As an example, in this order we have  3 items, for products, 1, 4, and 6, and  for each product, we have a quantity and unit price. So if we use the combination of the values in both these values,  we can uniquely identify each order item, in other words, we don't have  two records for order ID 2, and product ID 1,  we only have a single record for that item,  now let's open this table in the design mode. So over here we  find this middle icon that looks like a tool. Note that this yellow  key that represents the primary key exists on both these columns.  This is what we call a composite primary key. The composite primary key  contains more then one column. Now why does this matter?  Well, when you have a table with a composite primary key.  You need to learn how to join that table with other tables. For example,  here we have this table, order item notes, that we use to keep notes in each order item. Let's look at the data here.  So we have this column note id, right? Which uniquely identifies the  records in this table, next to that we have order ID and product ID.  you learn that the combination of these two columns uniquely represents  and order ID. So here for order number 2,  for product number 1, we have two notes. Now let me show you how join this table with the order items table. So, back to our  query, you can see that I have already selected the SQL store database, so I'm not going to type out a U statement. Alright, let's select  like everything from the order  items table. Give it an alias, now we need to join this with order item notes, also  we give it an alias. How are we going to join these tables?  Based on two columns, back to the order items table  these are the columns that we need to use in our joint condition.  So, in the order items table we have this  order ID column, these should be equal to the same column in order item notes table. So,  in.order id. But this is not enough,  we should also join these tables based on the product ID number.  So, we type out and, and then type out the  second condition, so order items. product ID should be equal to order item notes.product  id. This is what we call a compound joint  condition. So we have multiple conditions to join these two tables.  In this tutorial  I'm going to talk about the implicit joint syntax in MySQL.  So here we have a basic inner join, we're selecting everything from the orders table,  joining it with customers table on, orders.customer id. Equal to customers.customerid. Pretty basic.  There is another way to write this query using implicit join  syntax. Let me show you how this works. So,  we select everything  from now here we can type out multiple table names.  so, orders, customers.  And we can also give them an alias, so c and  o. And then we move this join condition,  to the where clause, so I'm going to copy this from here,  type out the where clause, and paste the condition. These two queries,  are equivalent. What we have here is called implicit  joint syntax. Now even though MySQL supports the syntax  it's something that I suggest you not to use, because if you accidentally forget  to type out the where clause, you will get a cross join. Let me show you what I mean. So first I'm going to delete the first query.  And execute this  so we get ten records because we have  10 orders in this database. So far so good. What happens if you accidentally type out the where clause. Instead of 10 records we're going to get  probably 100 records. Because every record in the order table, is now joined with every record in the  customers table. This is what we call a cross turn. Now later in this section I'm going to talk about cross joins in more detail, but what I want to talk about  in this tutorial, is that it's better to use an explicit  joint syntax, so, we use, join  because this syntax forces you to type out the joint condition, if  you simply join orders with customers, without typing  the join condition, you're going to get a syntax error. So to recap,  be aware of the implicit join syntax, but write all of  your joints using the explicit syntax.  Earlier in this section I told you that in SQL we have two types of forms.  Inner joins and outer joins. And so far you have  only seen examples of inner joins. And I also told you that this inner keyword is  optional, so whenever you type out a join, you're using an inner join.  In this tutorial, we're going to look at outer joins and the problems they solve. So, let's start by writing a query that uses an  inner join, and then we'll convert hat inner join and outer join.  So, select everything from the customers table  join it in the orders table,  on c.customer id should be equal to  o.customer ID. Pretty basic  right? Now for clarity, let's pick a few columns from these two tables .So for the customers table I want to pick customer  id. And first name,  and from the orders table, I want to pick order id.  Now finally, let's sort the results so we can clearly see what  we get. So order by c.customer  id. Let's execute that query and see what we get.  So, here' the result. For customer number 2 called  inis or inis whatever, you have 2 orders, order 4,  and order 7. Similarly for customer number 5, we have  2 orders and so on. Now there is something missing in this result.  We only see customers who have an order in our system, these are  customers 2, 5, 6, 7, 8, and 10. But if you look at the customers table, you can see that  you have other customers like customer number 10, customers number 3, and so on.  Currently we don't have any orders for these customers, and that's the reason  we don't see them in this results set. But what if you want to see all the  customers whether they have an order or not? That's when we use an  outer join. Let me show you how that works. So back to our query  the reason we only saw customers who have an order was because  of this join condition, When joining these two tables, you are only  returning records that match his condition. So for a given customer, if we do have an order, that record is returned. But as you saw a second ago, some customers don't have  an order. So for those customers this condition is not  valid. And that is the reason they are not returned in the result set.  To solve this problem we use an outer join. Now in SQL we  have two types of outer joins. We have left joins and right  joins. When we use a left join,  all the records from the left table, in this case customers are  returned whether this condition is true or not. So we  get all the customers, and if they do have an order, we'll see the order id  as well. Let's execute this query and see what we get. So,  there you go. Customer number 1,  doesn't have an order and that's why we get null in this cell.  Customer number 2 has two orders, 4, and 7, customer  number 3 also doesn't have an order so we get null for order id.  This is the result of a left join. So back to our query  when we use a left join, all the records from the left  table are returned whether this condition is true or not.  Now what if we use a right join. In this  case, all the records from the orders table are returned whether this condition is  true or not. Let's execute this query and see what we get.  So, we get he same result as before.  when we use an inner join, because we are selecting all the records from the right table  which is the orders table, so we don't see all the customers  we see all the orders. Now if you want to use a right join, and  still see all the customers, you need to swap the order of these tables. So,  we put the orders table first that's going to be our left table.  And then, we put the customers on the right side,  so now with this query we'll return all the records from the right table  which is the customers table. We execute this we get  all the customers whether they have an order or not.  Beautiful. Now one last thing before we finish this tutorial,  I've seen developers use the outer keyword here. So either  right outer join or left outer join. But technically  the outer keyword is optional just like the inner keyword, so you don't have to type it out.  So I'm going to remove this to make this code shorter and easier to  understand. So to recap, if you have the join keyword directly, and  if you do a left or right join you're doing a  inner outer join.  Here's your exercise for this tutorial. I want you to write a query that produces this result. So we should have three columns here. Product  ID, name, and quantity that I picked from the  order items table, so here we need to join the products table.  With order items table. So we can see how many times each product is ordered.  However, in an inner join we will only see the products that  have an order, but here I'm doing an outer join, so,  product number 7, has never been ordered, but still exists in the result.  Is it null, or the quantity? So go ahead and write an outer  join, or use this result.  Alright, first we select  everything from the products table and then  to a left join with the order items table.  Our join condition is p.product  id equals oi.product id.  So because we'll get all the products  in the products table whether this condition is true or not. If you have never  been ordered, you still see them in the result. Now, let's  pick a few columns for clarity. So p.productid  p.name and oi. quantity. That's it. Let's execute the query. We get the same result as before. So all the products are here.  And product number 7 has never been ordered so we see  null for the quantity.  Similar  to inner joins, we can use outer joins between multiple tables. Let me show you. So here's the query that we wrote in the last tutorial, you are doing a  left join between customers and orders tables.  So when we execute this query, you get all the customer  whether they have an order or not. If you have an order you see the order id. Beautiful. Now if you look at the orders table, you can see that some of our orders have a shipper id. These are the orders that have been shipped. So now let's join  orders table with the shippers table to display the name of the shipper in the result.  So back to our query, after this left join,  let's write another join, here I'm doing an inner join.  So let's inner join the orders table with the shippers table.  Join shippers, we call it sh, on  what is the join condition. Well, oh.shipper  id, should be equal to sh.shipper  id. Alright? So in this query we have  a left outer join and inner join. Let's see  what we get, alright, we only  see 5 records. But you have more orders. So here you have the same problem  we have before. Some of our orders don't have a shipper, and that is why  they are not returned here. In other words, this join condition is not true, for some of our orders. So back to the orders table,  a an example, this first order doesn't have a shipper shipper id is null, and that is why it is not returned with a query result.  So to solve this problem, you should use a left join, you want to make sure that all orders are returned whether they have a shipper or not.  So back to the query, you need to replace this inner join  with the left join, so let's execute the query and see what happens.  Now we should have quite a few more orders, there you go, now to make this example more interesting, I'm going to add the ship -per name here. So back to our select boss, let's add a new column, shipper.name.  Now we can give it an alias like shipper let's execute the query and here's the result. So we get all the customers whether they have an order or  not. And for those who do have an order, we get all the orders whether we have a shipper or not. This is the power of outer joins. Now in the last tutorial, you learned that you can get the same result, in both the left join or the right join, you just have to swap the order of the tables. However, as a best practice of what to avoid using right joins, because when you're joining multiple tables and you have  left and right and inner join, things get really complex. So,  someone else reading your code, will have difficulty visualizing how you're joining these tables.  As an example, if you have a right join here and then a left join  after, it will be harder to visualize how these tables are getting joined.  So, as a best practice, avoid right joins, and use left joins  instead.  And, here is your exercise for this tutorial.  I want you to write a query that produces this result. So here you have these columns  order date, order id, the first name of the customer the shipper and we can see that some of our orders are not shipped yet.  So here we have null, and here finally, we have the status.  So go ahead, spend 2-3 minutes on this exercise, when you're done continue  watching.  Alright, let's select everything  from the orders table, now you should join this with customers, on, hold.customerid.  Should be equal to c.customer id. Here I'm using an inner join, because every order does have a customer. So,  this condition is always valid, it doesn't matter if we use a left join or a  inner join here, now, okay? Now before going any further let's  take our columns. So from the orders table, I'm going to pick order id.  Followed by order date. And then,  customer.firstname.  Which we can optionally rename to customer.  Alright, next we need to select the shipper. So, we join the result with the shippers table,  on order.shipperid equal  to shipper.shipperid. However, if we use an inner join here, because some of our orders don't have a shipper, we are only  going to see the orders that have been shipped. Let me show you. So,  for clarity, I'm going to add the shippers name here, so shipper .name as shipper. Let's execute the query  there you go, we only see the orders that have been shipped.  But we want to see all the orders, right? So, we need to  change the second joint to a left join.  So all orders are returned whether they have a shipper or not.  Let's execute the query one more time,  there you go. Now we see all the orders from number 1-10.  Beautiful. Finally, we need to add the status comment here.  So, we need to do another join here, join with order status's, which we aggregate  as os, on oh.status equals  to os.orderstatusid.  We can see that I have designed our database such that sometimes our column names  are exactly identical, but in other cases they don't match.  So in order table we call this column, status, as opposed to  order status id, and this is deliberate because a lot of  real databases are like that. Alright, now let's add the status name here, so order, status.name as status. Execute the query,  and we can see all the orders here,  for each order we have the data, the customer, the supper and the status.  Earlier, we talked about self joins in SQL. So here in the SQLhr database, we have this employees table, we rote a query to get  all the employees and their manager. So here we have this column, reports  to that specifies the manager for each employee. So let's go back and rewrite this query to get all the employees and their manager.  Back to our query editor window, first let's use a SQL hr database. Then select everything  from the employees table, we give it an alias and then join it with itself.  So this is what we call a self join. Now we're going to use a different alias  like m for managers. Now, what is the joint condition e.reports to, should be equal to  m.employee ID, right?  Now for clarity, let's pick only three columns, so either the id  employee.first name.  And m.firstname which we rename to  manager. Alright, let's execute this query and see what we get.  So, here's the result  as you can see all these employees have the same manager.  However, there is something missing here. We don't have a record for this person, this  manager himself. So what is missing is a record where  we can see the employee id for this person, their name and their  manager which should be null because this person is the CEO or the  head of the company. But why is this happening? The reason is,  our inner join, because this condition we have here will only  return people who have manager. We can solve this problem by using a  left join. So, we do a left join, because we want to get every employee in this table whether they have a manager or not.  Okay, now let's execute the query one more time.  There you go. Now we have a record for this person  the manager, as you can see this person does not have a manger, that's why we have null here.  Back to our SQL store database  here we have a simple query that joins the orders table,  with a customers table. And here's our join condition. We have several examples  of this before. Now as our queries get more complex  these joint conditions get in the way, they make our queries hard to read, but the good news  is that in MySQL, we have a powerful feature for simplifying  these queries. If the column name is exactly the same  across these two tables, we can replace the on clause.  With a using clause which is simpler and shorter.  So I'm going to comment out this line and instead type out using  in parenthesis, we type out the column name, that is custom.  customer id. What we have in line 7 is exactly identical to what we have  on line 6. That is shorter and easier to read. So,  let me delete this line. We can add another join statement here to join the orders for the shippers here, so join with  shippers using  shipper id. In both these tables we have a column with the exact  same name. Alright, now let's execute this query  this is what we get, you have the order id followed by the  first name of the customer. Let's add a new column here,  so, I'm going to add sh  .name that is the name of the shipper,  now obviously because some of our orders are not shipped, we have to replace this  inner join to the left join. So we can use the using keyword with both inner and outer joins. Let's execute  the query one more time. There you go.  Now, we have the name of the shipper next to each order, beautiful,  however, we cannot use this technique to join the result with the  order status's table. Because in the orders table we have  this column called status, but in order status's table, this column has a different  name. It's order status id. Let me show you. So,  order status's. columns, there you go, order status id.  So the using keyword only works if the column name is  exactly the same across different tables. Now what if we have multiple  columns in our join condition. For example, earlier we talked about  tis order items table, I told you that in this table we have  a composite primary key, which basically means a primary key that consists  of multiple columns. So the combination of these two columns uniquely  identifies each record in this table. Now if I join this table,  with order item notes table. In our join  join condition, we should compare both these columns with their corresponding  columns in the order item notes table. So let's quickly  write that query and then simplify it with the using keyword.  So, select everything from  order items, now, join it with order  item notes on  so here we need to compare oi.order  id with yn.orderid, and  oi.productid= to oin.productid. This join  condition is kind of messy, it's hard to read this query. Now let's simplify this query with the using keyword. So we type out using. In parenthesis  we add both columns and then separate them using a comma.  So, ordered and product  id. Isn't that better?  Now, for our exercise, back to our SQL invoicing database write a query to select the payment  from the payments table and produce something like this. So in this table we have the date  the client, the amount and the payment method, we can see.  On what date who has paid how much using what payment method.  Alright, I'm going to use the SQL invoicing database, and then select everything from the  payments table, join it with the clients table.  Using client id because in  both these tables, you have the client id table. Next we need to join this with  payment methods, however, they  column name between these two tables is different, so in the payment  table we have a column called payment method. But in payment  methods table, our column is called payment method ID. So here we  cannot use the using keyword, and we'll have to use the on clause. So on p.payment  underline method equals pm.  paymentmethodid. Now let's pick our columns.  So, payment.date client.name.  And we rename this as client, next we pick m out, and finally, the payment method,  so, let's rename that to payment_method  and execute the query, there we go, this is what we get.  The date, the client, the amount, and the payment method.  In MySQL, we also have another  simpler way, to join two tales, it's called a natural join, and it's easier to code, but it's not something to recommend, because sometimes it produces unexpected results. But let me quickly show you how it works in case you see it somewhere so at least you're familiar with it. So back to the previous example,  let's select everything from the orders table, that we should do a natural join with the customer's table.  Now with this natural join, we don't exactly specify the column name.  So the database engine will look at these two tables and it will join  them based on the common columns. The columns don't have the same  name. And that is the reason this query is shorted right.  So, for clarity, let's pick a couple of columns here, o.order  id and c. let's say first name.  Let's execute the query, there you go.  so we see all the orders and the customers replace them.  So natural joins are really easy to code but they can  be a little bit dangerous, because we're letting the database engine  guess the join, you don't have control over it. For this very reason,  natural joins can produce unexpected results, and that's why I discourage you to use them.  In this tutorial,  were going to look at cross joins in SQL. We use cross joins to mine or join every record from the first table, with every record,  in a second table. Here is an example, let's select  everything from the customers table to  now here we do a cross join with the products table.  So every record in the customers table, will be combined with  every record in the products table. And that is why we don't have  a condition here. Okay? So this is what we call a cross join  now for clarity let's pick a couple of columns like see that first name we rename it as customer and then product.name which we rename to  product. Also, let's sort the result  by customer. first name.  Now, let's execute the query, here's the result of the cross join,  so first we have amber as the customer, and here are all combinations of amber with different products.  Next we have Barbara or whatever it is, and again we have the combination of this custom  with all the products. Now in this particular example, it doesn't really make sense to use a cross join, a real example for using  cross join is where you have a table of sizes like small,  medium, large, and a table of colors, like red, blue, green whatever.  And then you want to combine all the sizes with all the  colors. That is when you use a cross join.  Wha we have here is called the explicit syntax for cross join, you also have the implicit syntax which looks like this. Instead of typing out the cross join, you type out multiple tables in the  from clause. So customers and orders.  Both these queries produce the same result. But I personally prefer to use  the explicit syntax because it's more clear.  And here's a simple exercise for you. Do a cross join between shippers and  products. First do it using the implicit syntax,  and then using the explicit syntax. It's pretty straight forward, I just want you to  get your hands dirty in the code and get used to this syntax.  Alright, first I'm going to use the explicit syntax, and then I'm going to place the syntax. So let's start by selecting everything from  2 tables, shippers and products,  now for clarity I'm going to pick two columns, shipper. name which we rename to the shipper. And product.name which we  order everything by  shipper Let's execute the query, this is what we get. So the combination of all shippers and all products beautiful,  now let's use the  explicit syntax, so we select everything from the base table,  in this case shippers and then do a cross join with products.  That produces the same exact result.  We covered everything about joins, you learned  that with joins we can combine columns with multiple tables, but  in SQL we can also combine rows with multiple tables, and this is extremely powerful. And let me show you how this works. First we have  a quick look at our orders table, and select everything from the order  table. Now if you look at the data,  we can see that the first order was placed in the current year,  2019, all the other orders were placed in previous years. Now let's say you want to create a report, get all the orders, and next to each order,  add a label. If the order is placed in the current year, the table is  going to be active, and if the order is placed in previous years, you want to label it  as archives. So, let's change our  query and change our condition here. First you want to get all the orders in the current year. So where order  date is greater than or equal to 2019,  0101. Now I just want to highlight that this is  not the ideal way to get the orders in the current year, because here we have hard  coded 2019. So if you execute this query next year, we are not  going to get the right result. But don't worry about this for now. Later in the course I will show you how to  get the orders in the current year, without hard coding a date here.  So, let's execute this query, now we get  only one order. Let's hand pick a couple of columns here.  So, order id,  and order date. And also I want to add a string,  literal here, like active. Right?  Let's execute this query, this is what we get. We get 3  columns, order id, order date, and active, and in this column,  argument we have this string value. Active. Now let's rename this column to status, alright? And execute the query, that is better,  now we want to write another query similar to this that will return the order  in the previous year, but with a different label, archive.  So, to save time, I'm going to copy this few lines and paste them right after our first select statement. Now note that here we have a syntax error, because we didn't  terminate the first select statement with a semi colon, but don't worry about it, we're going to get back to this in a second so for the second  query, we want to return a different a different label, archive, and we want  to change our condition to less then  2019. Now, select only these few lines.  And execute this query, either by clicking on this icon here,  or using the keyword shortcut you learned earlier in the course.  There you go, here are all the  orders from the previous year, with the label archive.  This query returns 9 records. The previous query returned 1 record.  now using the union operator we can combine data from these two queries, so, in between  our select statement we type out union  now let's execute the query one more time, so here's our first  order in the current year that is active and below that we have  the orders in the previous years. So using the union operator we can combine records for multiple queries. Now in this example, both our queries are against the same table, but we can also have queries against different  tables and then combine the result into one result set.  Let me show you another example. So I'm going to delete everything here. Let's select the first name,  from the customers table, and then we can union that with select  the name from the shippers table.  Let's execute the query's in one result set we can see all the customers and the shippers. Now as far as  I know, there is no real world care for this particular query. But what I Want to point out is that with union we can combine results from multiple  query's. These query's can be against the same table or different  tables. In your database, you can have a table like archive orders, and another table like order  and then you could combine all the archive and active orders into one  result set. Just remember, that the number of columns that the query  returns should be equal, otherwise you're going to get an error. For example,  let's select the first name and last name from customers  and then union that with the name of  shippers. When we execute this query, we get an error, because the first part  of this query returns two columns, but the second part returns one column.  So MySQL doesn't know how to combine these records.  And one last thing before we finish this tutorial. If you look at the result here,  the name of this column is based on this first query, so the first query returns first name, and that's why this column is called  first name. If you change the order of these queries,  and move this union up here, now let's run this query  as you can see our column is called name.  So whatever we have in this first query is used to determine the name of  columns. Here we can also rename the column to full name.  There you go.  Here's your exercise for this tutorial. Write a query for this report.  So here we have four columns, customer ID, points, and  title. Now as you know we don't have this column in the customers table,  so we have calculated the values of this column, based on  the points each customer had. If they have less then 2,000 points,  their type is bronze. If they have between 2,000 and  3,000 points they are silver customers, and if they have more then  3,000 points, they are gold customers. Also note that here we have sort  the result by the first name. So go ahead and spend two minutes to write this query.  Alright, first let's get the bronze customers,  so select everything from customers where  points is less then 2,000.  Now here we want to pick 3 columns, customer id,  first name, end points. And finally we  add a new column to a string literal, bronze  let's run this query and see what we get. So these are all the bronze  customers, but the name of this column in bronze, we don't want that. So, let's rename this to type. Now this is off the screen so  I'm going to break this up into multiple lines  that makers our query bigger and easier to read.  There you go, let's run the query one more time, now the column is called type.  Beautiful. Now we should do union  and repeat this query, but extract the silver customers.  So I'm going to paste this query here and then make a  couple of changes here, I'm going to replace bronze with silver,  and change the condition to between 2,000  and 3,000 let's run our query, see what we get  so, we have all the bronze customers first,  followed by all the silver customers. So the order of these records is based  on our queries. In our first query we got the bronze customers, which is why  they are listed first. But this is not what we want. You want  to order the result by the first name of our customers. So,  let's apply an order by at the end so order by first name. Now there is one more piece remaining.  You should do a union one more time and write a query to get  the gold customers. SO I'm going to select these few lines.  And paste them here.  Now let's change silver to gold,  and the condition to (?) greater then 3000.  And finally we do an imported by. Let's run the query one more time.  And here's the end result, our customers  are sorted by first name, bronze, silver and gold customers.  In this section I'm going to teach you how to insert, update, and delete data. Before we get started  let's have a closer look at our customers table. So click on  this middle icon to open this table in the design mode.  What you see here might look a little bit intimidating at first, but trust me  it's so easy, and in this tutorial, I'm going to explain exactly what we have in these columns. So on the left side, you can see the column  next to that you can see the data type for each column, so our customer id column  can only accept integer value. Integers are whole numbers like 1234 and so on. You don't have decimal points, etc.  First thing is a var chart which is short for variable  character. And in parenthesis, you can see 50, that basically  means in this column you can have a maximum  of characters now if the name of a customer is only 5 characters long the only  store those 5 characters. So even though the max  length for this column is 50, you're not going to waste the space if this customer  name is less then 50 characters. That is why here we have  4char which is short for variable. In contrast we have  another data type that is character. If you had character 50 here,  and the name of the customer was only 5 characters long, MySQL  will insert additional 45 spaces to fill this column.  So this is a waste of space. So as a best practice,  Most oft he type we use var char to store strings  or textural values. Now here on the right side we have this column  pk, which is short for primary key. So customer  id is marked as the primary key, and that is why we have this yellow key here,  so the values in this column uniquely identify each  customer. Next to that we have nn which is short for not null and that determines if this column can except null values or not.  In this case, every customer record, must have the customer id.  First name, last name, as well as these other attributes.  But birthdays and phone are optional. So in these columns we  can have null values, Now we have another calling here, ai,  which is short for auto increment and this is often used  with primary key columns, so every time we insert a new  record in this table, we let MySQL or our database engine insert  a value in this column, so essentially it gets the customer id  for the last row, and it will increment it by 1, by the time you serve a new record. So if you look at the data you can  see that currently we only have 10 customers here. So if you have a new customer here,  MySQL will sign 11 to the new customer, okay? And finally here we have another column that specifies  the default value for each column. For example, for birthday  and phone columns, the default values or null,  So if you don't supply a value MySQL will supply the null values  for these columns. Similarly we have another null value,  for the points column, so if we don't supply the points for a customer, MySQL will use 0, now we have a few other columns here which are not important  at this stage, you will learn about them later in this course. So now  you understand the attribute of each column, let's go ahead  and insert data into this table.  In this tutorial,  you're going to learn how to insert a row into a table. For that we're going to use  the insert into statement. Where are we going to  insert this row? Into the customers table, so we type out  the name of the table here followed by the values clause.  And here in parenthesis we supply the values for every  column in this table, so back to our table definition,  these are all the columns, first we need to supply a value for the customer id  column. However, in this column, the auto increment  attribute is enabled, and as I told you before, if we don't supply a value,  MySQL will generate a unique value for us.  So we can go back to our statement and either assign  an explicit value or use default to let MySQL  take care of generating this value. This is the preferred approach. Because if we use this value  an explicit value like 200 it is possible that you might have  another customer with the same id. So when you execute the statement, you're going to get an error.  Because you cannot have duplicate values in this column. Every value should be unique, so here we're going to use the default keyword to let you generate a unique value for the customer id, and after that we need to  supply a value or the first name and last name columns.  So, let's say Jon Smith.  Note that I have enclosed these values with quotes, because as I have told you,  string and for in SQL, we should always enclose string and values with quotes. Either single or double quotes, okay?  Now, what else? Back to our customer table,  after the last name you have birthdate, however,  as we can see, this column is optional because this check box is not checked. So  here we can use null or an explicit value. Null means the absence  of a value. So back t our statement, you can type out  the birthdate, like 1990 January 1st or  you can use the null keyword to leave out this value.  Now in this demo, I'm going to use a value date,  now to make this code cleaner and more readable, I'm going to break it up into  multiple lines. That's better,  now back to our table, next we have phone and phone is  also optional, because this checkboxes not checked, and null is the  default value for this column. So here we can explicitly pass  null, or use the default keyword and then put null into this  column. It's exactly the same. So, back to our  statement, you can pass null or default.  Both these keywords will have the same result. In this case I'm going to use the null  keyword. Alright, let's have one more look at our table,  next we have 4 more columns that are  required, so address, city, state, and points. And note that points  has the default value of 0, so we can either use an explicit value like  total value like 200, or use the default keyword and let MySQL generate 0. So, back to our statement, let's type out  an address, it doesn't really matter.  Followed by a city, and a state, let's say california,  and finally points, again we use explicit value  or default, so this is how we can insert a row into  a table. However, in this example, you're only  supplying values for first name, last name, birthdate and  these address fields. So you're leaving out phone number  the customer id and the points. So there's another way  to write the statement. Let me show you. So after the table name you can  optionally supply the stuff columns that you want  to insert values into. In this case first name,  last name, birthdate  and once again I'm going to break up this statement into multiple lines  So 3 more columns,  address, city, and state,  so these are the 6 columns that we're going to supply values for. With this change, we don't have to use these default  or null values, we only supply values for these columns.  So I'm going to remove default from here, and null, and finally  this last default keyword.  So, the 6 values that you supplied here are used for the 6th column.  Now with this change, you can also reorder the columns.  We don't have to list them in the same order, they were defined  in the customers table, for example you can put the last name first,  and then obviously we should also swap the order of these values,  so we can list them in any orders. Now we can execute  the statement, now if you look at the output window  down on the bottom you should see the statement followed by one rows  unfortunately I cannot resize this window to show you this message, but if you look down below you can see that one word was affected, which basically means  one record was inserted into this table. Now,  let's look at the data in the customers table  so the last row is the one that we inserted, we can see that the  MySQL automatically generated the value 11, this is the effect  of auto increment attribute. So it takes the value of the last row,  and incrememnts it by 1. So here we have the first name. Last name,  birthdate, you didn't supply a value for the phone attribute, so,  that's why we have null here, we also have address, city  state, and the default value of 0 for the points.  In this tutorial, you're going to learn how to  insert multiple rows in one go. For this we're going to use the shippers  table, let's have a quick look at the table definition  so here we have 2 columns, shipper id and name. Shipper id is  primary key, it's not nullable, and it's an auto incremented  column. So we're going to let MySQL generate values for this column. Easy.  You only need to supply a value for the name column. So back to our  query editor window, we type out insert  into shippers in parenthesis we specify the name of the column  we want to insert values into, in this case name  followed by the values clause. Here we add a pair of  parenthesis with a value like shipper one. Now insert multiple rows all you have to do is insert a comma  followed by another pair of parenthesis. So,  shipper 2, one more time, comma, shipper 3,  this is how you can insert multiple rows in 1 row,  now let's execute this statement, alright,  and then inspect the data in the shippers data.  There you go. So initially we only had 5 shippers and here are the 3 new shippers that we inserted. Note that MySQL  automatically generated the values for the shipper id column.  So we have 67 and 8.  Alright, here's your exercise for this tutorial. Write a statement to insert three rows  in the products table, it's really easy you can knock it out in a minute,  So here's our products table, we only have 4 columns,  we're going to leave out the first column because it's an auto increments  column  so we only have to supply values for name, quality, unit price.  Back to our query editor window, let's insert  into products the columns are  name, quanitty in stock, and unit  price. And the values are going to be let's say product 1,  stock is going to be 10 and the unit price is going to be 1,  .95. Now I'm going to select these values. copy, paste it, like this,  change the values accordingly, and  finally the last row for the 3  there you go, let's execute this statement, alright  and then verify the result so in the products table, now we should have 3 new records,  now the id's you see here are 15, 16, and 17.  Because before recording this video I actually inserted a few records in this table and then  deleted them. So I had product ID's 11, 12 13, and 14. And even though they're actually deleted from  this table, MySQL remembers their id's so instead of incrementing  10 x 11, it incremented 14 which is the last record  from before. And that's why you generated 15. On your computer,  the items are going to be 11, 12, 13.  So far you have only learned how to insert data into a singular table.  In this tutorial, I'm going to show you how to insert data into multiple tables. Here's  a really good example, look at the orders table, what columns do we have?  We have the order id, we have the customer  id, so we know who has placed the order, we know the date of the order,  you know the status, comments, as well as shipping  information, but the actual items for this order are not in this table, they  are in the order items table. So in this table, we have 4 columns  we have the order id, so we know what order these items  for. We have the product id, so we know what product  order, in what quantity, and in what price. So an actual  order can have 1 or more order items.  This is what we call a parent child relationship. So this relationship  the orders table is the parent, and the order items table is the  child. So one row in the orders table can have 1 or more children  inside the order items table. Now in this tutorial, I'm going to show you  how to insert an order and all it's items. So you will learn  how to insert data into multiple cables. alright, back  to our query editor window. First we need to insert the order,  so insert, into, let me close  the navigator panel, we want to insert a record into the order  table, now what columns do we have here? So we have these columns but only the first four are the  and actually the first one, we don't want to worry about, because that's an auto increment column.  So we only want to supply values for customer id, order date,  and status. So back to our query, specifying those columns here, customer id, order date,  and status, now let's supply the value.  In the customer id column, we need to add a  valid customer id. So let's have a quick look at our customers  table, there you go. In this table,  we have 11 records. So these are the valid customer id's.  Now back to our query, let's use 1 for customer query  and then 2019, January the 2nd  for the order date, and one for the order status, once again  in this column, we need to insert a valid order status  id. If you don't supply a valid id, MySQL is going to get ahead of us. So we insert an order here,  the items, now back to our order items table,  in this table, we have this order id column, so here's the  as soon as we insert an order, MySQL is going to generate  an id for our new order now we need to access that id in  order to insert the items in this table. How can we do that?  Well, back to our query editor window,  in MySQL, we have a bunch of built in functions, and a function  is basically a piece of code that we use ourself. Just like a function is a feature  in your tv. Every tv comes with a bunch of functions like  power on, power off, change the volume, change the channel so on.  So MySQL and other database engines come with a  bunch of built in functions  that we can use in our programs. One of these funcitons is last insert id. We can call or  execute this function, by adding parenthesis here, and this will return the ID  that MySQL generates when we insert a new row.  So, before going any further, let's just select these,  and make sure you get the right result. Now we have a syntax error here because we didn't terminate  the first statement with a semi colon, alright, now let's execute this query,  alright, so the id of the new order is  12. Let's verify that. So back to the orders  table let's look at the data. On my machine I have  12 records here, I actually created 1 just before recording this video, so on your  machine you're going to have 11 orders.  Now back to our query window now that we know how to  get the id of the newly inserted  record, we can use that id to insert the child records.  So, we're going to write another insert statement,  insert into order items, let's have  another look at the columns in this table. So we have 4 columns  on all of them are required, so there's really no need to specify the column name  in our insert statement, you simply supply values or order id,  product id, quantity and unit price. So, here  in the values clause, we add parenthesis,  what is our order id? That is the value returned  from calling this function. So I'm going to cut this from here and  next we need to supply a valid photo id,  but let's say product 1, quantity, let's say 1.  And the unit price 2.95 dollars.  Now let's delete this select we don't really need it anymore  let's add another set of values, so once again, we're going to call last insert id, to get the id of a new order, we're going to  change the product to product number 2, and add a different price.  That's it. Now let's execute this  statement and see what we get. Alright, so,  back to our orders table, let's refresh the records here, alright  so we have a new order, order number 13,  beautiful, now let's look at the orders items table, here's the order items, let's open the table. So we should have  2 items, or order number 13. Beautiful.  So this is how you insert hierarchical data in SQL.  In this tutorial, I'm going to show you how to copy data from one  table to another. For example, in our orders table, currently we have  about a dozen records. Now let's say we want to create a copy of this table  called orders archive and you want to insert every row that we have  in this table into that new table. If you have 10 orders,  we don't want to quote an insert statement with a ten set of values,  that is very time consuming, so I want to show you a powerful technique to  uniquely copy data from one table to another. First we need to create this new table, order  archive. For that we're going to use the create  table as statement. So create table  orders archive as.  Now right after that we write a select statement  to get everything from the orders table.  Now let's see what happens when we execute this query, there you go. So back in the navigator panel, we have to refresh this view by clicking on this icon over here, now we  have a new table, orders archive, let's look at the data,  so you can see all the orders are here and we have the exact same column  as the orders table. However, if you open this table in the  design mode, you cans ee that in this table, we don't have a primary key.  So the order id column is not marked as a primary key.  And also it's not marked as an auto increment column, so when we create a table using this technique MySQl will ignore these attributes,  and that means if you want to explicitly insert the record  into this new table, you have to supply a value for order id,  because this column is no longer an auto increment column.  So, using create table as statement you can quickly create  a copy of a table, now we refer to this select statement  as a sub query, so a subquery is a select statement  that is part of another SQL statement.  Now we can also use a sub query and an insert statement and that is a very powerful technique. It allows us to do really cool things. Let me show you.  So first, let's right click the orders archive table,  and click on truncate table, because we want to delete  all the data in this table. Alright, it's asking for confirmation  let's truncate the table, so now back to this table.  Let's refresh the table, we don't have any records here, alright?  Now back to our query editor, let's say you want to copy  only a subset of records from the orders table into this table,  like all the orders placed before 2019. So first let's select  everything from the orders table where  order date is less then 2019, January 1st.  So, these are all the orders, order s copy these orders into he orders archive table. So we can use this select statement as a subquery   in an insert statement, we write insert  into orders archive  now we don't need to supply the column names, because we're going to  play values for every column that we have in this query.  So, we did that, and  this is ane xample of using a select statement as a subquery  in an insert statement. Let's execute this,  alright, now back to the table, let's refresh the records  we only have the orders placed before 2019.  Alright, here's a really, really, really coo exercise  back to our SQL invoicing database. Look at the invoices table.  So in this table, we have these columns,  (?) id number, client id number which is associated or related  to the client id column, in the clients table, followed by  a few other columns, now let's say you want to create a copy of the record  in this table, and put them in a new table called invoices archive.  However in that table, instead of the client id column, we want to have the client name column, so you want to join  table with the clients table, and then use that query as a sub query in a create table statement.  Also, to mae the exercise more interesting,  I want you to copy only the invoices that do have a payment. So if  you look over here, this payment data column here, determines  if a payment has been made, towards this invoice or not. So select  only the invoices that do have a payment date, it's a really really good  exercise, spend two to three minutes on this and then come back and continue watching.  Alright, first I'm going to use the SQL invoicing data,  base, now let's select everything from the  invoices table and join it to the clients table.  here I'm going to use the using statement to simplify  my join. What column are we going to use for joining? The client id  column. Let's execute this query up to this point.  Alright, so first we see client id column  is used for joining these tables, after that we have the columns from  the invoices table like invoice id number and so on. Followed by  the columns from the clients table. Name  address and so on. Obviously we don't want all these columns, we only want  the columns from the invoices table but we should replace the client id  column with he client name column. So let's have  a quick look at the design of the invoices table  here we have invoices id, number,  client id, we want to replace this column with the client name.  Back to our query, I'm going to pick,  invoice id, number  and then client.name, let's rename it to client  what other columns do we have here? We have  invoice total and payment total so let's add those as well,  invoice total as well as payment total,  we also have three columns,  for dates, invoice date, due date, and payment date,  so, let me close the navigator panel. Invoice  date payment date and  due date. Now technically because these columns only exist  in the invoices table, we don't have to prefix them with the table alias. So we can simplify the code like this, however,  I personally prefer to prefix them, because that gives me a clear  picture of how I'm joining these tables. It's just a personal preference  another developer might disagree and that's fine, so whatever you prefer. That's perfectly fine, let's execute the query and make sure  we get the right result, so we have the invoice  ID  number client beautiful, followed by these other  columns, now I want to filter the result, and return  only the invoices that do have a payment. So we can either  return records that have a payment date, or the records that have  a payment total of greater then 0. Both are perfectly  fine, so back to our query,  down at the bottom, let's add the where clause, where payment  date is not null. That's better.  Let's execute the query one more time, now we get only these  handful of invoices, beautiful, finally let's use our  query, as a subquery in a create table as statement. So right before  select we type create table, invoices,  archive, as there you go, let's execute  the query beautiful, now back to the navigator panel,  let's refresh the view, so here's our new table,  invoice and archive, let's look at the data, there you go.  You only have the invoices page and here's the name of the client for each invoice. Beautiful. Now just note that  if you execute this query one more time, you're going to get an error because we already have a  table called invoices archive. Later in the course I will show you how  to draw tables, that's pretty easy, but for now you can just right click and go to draw table and then confirm  alright, and then you can run the query one more time.  In this tutorial I'm going to show you how to update data in SQL. So back to our invoices table,  look at the first record here. The payment total for  this record is 0, and obviously there is no payment date.  Now let's imagine that there was a problem int he system that recorded this information.  Let's say the client paid ten dollars for the invoice. So we should update this record in this table. That is very easy, back ti our query editor,  window, we use the update statement to update one or more records in a table. What table? In this case invoices.  Next we add a seth clause and this is where we specify a new value  for one more or columns. In this case we want to update payment total. Let's say to ten dollars. We should also update  payment date. So here's a column to add more columns  we set this to date value, let's say  2019, March 1st, and then we type  out a condition, with this condition we identify  the record or the records that need to be updated. In this case we want to update the invoice number 1. So,  back to our query, we type out invoice id  equal to 1. Let's execute this. Beautiful,  Now back to our table, let's refresh the data by clicking on this icon.  Alright, we can see that payment total is updated to ten.  And we also have a payment date. Beautiful. Now lets say we actually  updated the wrong record, maybe we should have updated invoice  number 3, so we should update this table one more time, and restore the  original values in this column, back to our query  we can set the payment total to 0, and  the payment date to null. So we can use the null keyword to insert the null value in a column that accepts  null values. Now back to the navigator panel, let's open the  table in the design mode. We can see that the payment total column  has a default value of 0, and the payment date column  has the default value of null. So back in our query  we can also set payment total tod default and MySQL  will use the default value for this column, which is in this case 0.  So, let's execute this statement one more time, beautiful.  Now, back to the table, let's refresh the data, so payment total is set to 0. And payment date is null. Beautiful.  Now let's go ahead and update the third payment. Look at the invoice total. That is $147. For this example let's  imagine that the client made 50% of the total  amount on the due date. So, back to our query  editor window, instead of using a literal value window here like $70 we can write an expression, we want to calculate 50% of invoice total. So invoice total,  x 0.5. Now let me break this code into multiple  lines so we can see clearly, now we should  set the payment date, as I told you this client made the payment  on the due date, so we can set this to due date.  Whatever value we have in this column will be used to set the payment date.  Now obviously we need to update the invoice id,  number 3, now back in the table, let's refresh the data.  Alright look, payment total is updated, and it's set to almost 50% of he invoice total. However,  this number is truncated so we don't have the digits after the decimal point.  Don't worry about it for now, we'll come back to this when we talk about data points  later in the course. Also we can see that payment date is set  to the same value we have in the due date column.  In the last tutorial we learned how to update a single record using the updates statement. Now if you want to update multiple records, the syntax is  exactly the same, but the condition you type out here, has to be more general.  For example, back to the invoices table, you can see that we have multiple  invoices for client number 3. You can write a statement  to update all the invoices for this client. So back to our query editor window, we change our condition to,  where client id equals 3. However, if  you execute this statement with MySQL workbench which is the software we've been using  in this course, you're going to get an error, because by default, MySQL workbench  runs in the safe update mode. So it allows you to update only  a single record. You're not going to have this problem if you use another client for  MySQL or if you write this statement in your application code  this is only specific for MySQL workbench. Now let me show you how to get around this. On the top we go to MySQl workbench menu and then preface this.  On this dial up box, on the left side, click on SQL editor  and then down on the bottom,  untick this checkbox, save updates, so this  prevents you from accidentally updating or deleting a bunch of records in a table,  so let's goa head with this, now we need to  reconnect to this instance of MySQL. So, let's copy  all the code here, and close this local instance  window. Alright? Now, on the home page, double click this connection to reconnect, there you go, and then paste  all that Sql code. Now let's  execute this, beautiful, all the invoices for client number 3 are updated.  Here we can also use the in operator, let's say  we want to update all the invoices for clients number 3 and number 4.  So all the operators you learned to use in the where clause also  apply here. Now technically this where clause is optional, so if you want  to update all the records in a table, you simply leave it out.  Alright here's your exercise for this tutorial. Back to our SQL store database,  write a SQL statement to give any customers,  born before 1990, 15 extra points.  Alright first we're going to use SQL  store, then, write an update statement. To update the customers table,  set the points to point  plus 15, so here we're using the expression to update  the points column, for anyone born before  1990. So where birth date is less then  1990, January 1st.  Alright, let's execute this query, alright, now  let's open up the customers table one more time,  so anyone who was born before 1990 now has an extra  50 points.  In this tutorial we're going to learn how to  use subqueries in an update statement, it's extemely powerful,  so we're going to continue with the example from the last tutorial, but we're going to make it more interesting. Here we're updating all the invoices for  client number 3, but what if we don't have the id of the client? We only have the name? For example, you might even have an application, and in that application the user types in the name of the client, so first we should find the  id for that client, and then use that id to update all the invoices.  How do we do that? Well, let's have a quick look at our clients  table, so here we have this client  my words, let's say you have the name, you want to find the id.  So back to our query window. After our update statement  I'm going to write the select statement to select the client id column,  from the clients table, where name equals  my works. Now here we have  a syntax error, because we didn't terminate the last  don't worry about that, we're going to get back to that in a second. Let's just select these few lines and  execute this query. The idea of this client is  2. Beautiful. Now we can use this select statement as  a subquery in a update statement. So as I told you before,  a subquery is a select statement that is within another SQL  statement. So, instead of hard coding 3 here,  we're going to use this select statement as a subquery, but  we need to put it in parenthesis, so MySQL will  execute this query first, it will return the client ID and then use it in this condition. So for clarity  let's remove the line break and indent  these few lines. So this is the end result. Now  we execute this query, and this updated all the invoices for this client.  Now, what if this query returns multiple clients?  For example, back to the clients table, let's imagine you want to update  the invoices for all clients located in New York or California.  So, we need to update our subquery,  like this, where state  in California, and  New York. Now before executing the entire statement,  let's just select our subquery and execute it to see what we get.  So we get two client ID's, one and  three, beautiful, now because this query, this subquery  returns mutliple records, we cannot use an equal sign  here anymore, so we need to replace this with an in operator.  And now this statement updates the invoices for all the clients  located in these two statements. Let's execute it,  beautiful, everything worked. So as a best practice, before executing your  update statement, run your query to see what records you're going to update. So you don't  accidentally update the records that shouldn't be updated. Now here we  have a subquery but even if we didn't have a subquery, you could still query the records that we're going to update. Let me show you. So let's imagine  we're going to update all the invoices where payment  date is null. Before executing this entire update  statement, I would run a query like this. Select, start  I would start from invoices where payment date is null.  Now let's execute this query,  these are the two records that don't have payment date, so once we're confident that we're updating the right records, then, we come back here,  and get rid of this select statement, and just attach the where clause  to our update statement.  Alright, here's your  exercise for this tutorial, back to our SQL store database, look at the  orders table, as you can see, several orders don't have a  comment, I want you to write a SQL statement to update the comments or orders for customers who have more then 3000 points.  So customers who have more then 3000 points, regard them as gold customers. Find their orders, if they have placed an order update the comments column and set it to gold customer.  That's a really good exercise.  Alright, first we need to find  the gold customers, so select everything from the customers table,  where points is greater then 3000.  And by the way, because current database is SQL invoice  we either have to type out a use statement on the top, or  double click this database before executing this query. So,  there you go. We have three gold customers  now we need to get the ID of these customers to use them in an update  statement. So, we only select customers  Id here and then select this statement as a subquery  in an update statement. So,  update, orders, set comments to  gold customer, where  customer id because we're dealing with multiple customer id's  we need to use the in operator and then to use it,  as a subquery, we need to enclose it in parenthesis.  Let's indent the code, that's better, so here  is the final solution.  So you have learned how to insert and update data, in this lecture, we're going to finish this section  by learning how to delete data. That is very easy. We use the delete  from statement to delete records from a table.  Let's say the invoices table. Now optionally we can add a search condition  to identify the records we want to delete. If you don't write this where clause with this statement, we delete all the records in this table.  And obviously, that's very dangerous, so be very careful when executing this statement. Now here let's say we want to delete the invoice  with the id 1, so where invoice id goes to 1.  Now here we can also use subqueries, let's say we want to delete all the invoices for  the client called my works. First let's  find this client, so select everything from the client's table  where name equals to my works.  Let's execute the second query, so here's our client,  now we can get this client  id and use it in our search condition. So where  client id equals 2, this is where we add our subquery, there you go, just like before,  beautiful. So this is how we can delete data,  in SQL.  Alright, we're done with this section, but before going to the next section, I want you to restore all these databases to their original state. Because in this section we  added some data, we updated some data, we deleted some records,  so if you don't restore these databases you may see different results going forward.  So, restoring these databases is pretty easy. Here in My SQL workbench, on the top go to the file menu  and open SQL script. Then navigate to the directory  where you stored the SQL scripts for this course, in case you lost  that directory, go back to the first section, you have a lecture for downloading the supplementary materials. So in this directory open  create databases.SQL.  Now execute this script to recreate all of our databases.  Alright, beautiful, now let's open up the navigator panel, you can see the  databases disappear from here, simply click on this refresh icon.  Beautiful. Alright, we're done with this section, I will see you in the next  section. Hey guys, Mosh here,  in case you haven't seen my website yet, head over to codewithmosh .com. This is my coding school where you can find plenty of courses  on web and mobile application development. In fact recently I  published a complete SQL course that is about 10 hours long,  and it teaches you everything you need to know from the basic to advanced topics such as database design, security, writing complex queries,  transactions, events and much, much more. These are the topics  that every software engineer must master. This Youtube  course you've been watching is the first three hours of my complete SQL course that is about 10 hours long. So if you want to master SQL  and get job ready, I highly encourage you to get involved in my complete  SQL course. You can watch it anytime, anywhere, as many times as you want, you can watch it online or download the videos. The course comes with  a 30 day money back guarantee and a certificate of completion  that you can add to your resume. The price for this course is $149 but the first 200 students can get it for just over $100. So if you're interseted, the link is below this video. "
vBURTt97EkA,hello everyone and welcome to the first lecture in the course operating system so operating system is a course that is very important as far as computer science is concerned and also electronic students you may have this subject in your course so it is equally important and this subject it consists mainly of theory as well as problems so we will first see the theory and also we will be solving the problems related to this subject and we will see what this subject means and what we can learn from this subject so first of all this is just an introduction to operating system and we will see what this operating system actually means and what are the functions of this operating system what are the types of operating systems that we have and we will just try to get a brief idea of this subject all right so let's get started so here it says that an operating system also abbreviated as OS is a program that manages the computer hardware and it also says it also provides a basis for application programs and acts as an intermediary between computer user and computer hardware so before we understand these two lines I will be explaining it to you with a diagram so before we go into this diagram here are some examples of some operating systems that we widely use these days first is your windows so you may be using Windows in your desktop or your laptops so it is one of the famous operating systems used by many people and also we have Linux and Ubuntu which are also two open-source operating systems that are widely used in your desktops laptops and other devices and then we have the Mac OS which is the operating system from Apple so in their laptops or in their mac books they used Mac OS X and then in iPhones we find iOS operating systems and then we have the very famous Android which you must be having in your phones so Android is one of the famous operating systems that is used for your mobile devices all right so now before we try to understand these two lines that we have written here let us take a diagram to understand the basic structure of computer system so that we can understand what is an operating system and what does an operating system actually do so here I have a diagram which represents the basic structure or the basic components of a computer system so first of all in the lowermost level we have the computer hardware and what are computer hardware computer hardware it consists of resources like CPU which is a central processing unit and then memory and then the i/o devices which means input/output devices so your resources like the processing units your CPU and also your memory memory consists of primary memory like your ramps and your secondary memory like your roams so these things also I will be explaining it in a detail way in another lecture so let's first know that our memory as well as the i/o devices IO devices means the input/output devices these are the devices that you use for either giving input to your system or for getting output out of your system so examples of input devices will include your devices like your keyboards mouse your microphones these are devices that you use for giving input into the system and then output devices would be that devices that you use for getting output out of your systems that would be your devices like monitors or speakers which gives you output or which shows you or makes you hear the output those are your output devices so all these things they fall under computer hardware so we generally refer them to as resources alright and then on top of this we have the operating system but for now let us just forget this operating system for a while just let's just assume that it is not there and then on top of this operating system we have the system or the application programs now there are two kinds of software's we have which is system software and application software and system software's are the software's that are used to directly modify or directly give some command to that computer hardware and operating system is also a kind of system software but let's not think about that and just not get confused hearing that butters mainly try to understand water application programs application programs are the programs or software's that are used to perform a specific task and that can be directly used by the user and these are some examples that we have here versus a word processor word processors are like your Microsoft Office Word which are software's used for making document files I have believed that we have all used Microsoft Word and then we have spreadsheets spreadsheets are like your Microsoft Excel ok that is used for making tabular data or for making some calculations in your table or data and then we have compilers so if you are a computer science student you may be knowing what compilers are so compilers are the software's that we use for writing our computer code like your codes like C++ C or Java these are written into your compilers and then we have the text editors text editors are editors useful modifying or writing text like your notepad WordPad etc and then we have web browsers web browsers are the software's that enable you to browse the web even as you are watching this video in YouTube you may be using some web browser to view this and examples of this are Google Chrome Mozilla Firefox Internet Explorer and so on so this is not the only application program that we have we have many many application programs and these are just few examples I took to make you understand so these are the application programs we have and on top of that we have the users that is like users like you and me who are trying to use this softwares for performing specific tasks so let us take a simple example that this user one he wants to use the word processor let's say it is Microsoft Office Word so we want to use Word for typing some documents and he wants to save it to his system so let's see how he does it so we imagine that there is no operating system over here we just have this user and the application programs and then the computer hardware so if you wants to write a document or if you want to type something into Microsoft Word then he have to tell the computer how where that he wants to do it now how can he do it since there is no operating system he have to explicitly tell the computer hardware what he wants to do in the form of code so he have to first open the Microsoft Word and he have to tell the computer hardware that I want to load Microsoft Word so please load it into the main memory and then after it is loaded he has to type something and when he typed something whatever he types it has to be displayed on the monitor he have to tell the computer hardware to do even that you have to tell please display the things that I am typing on the computer screen or on the monitor and then after doing all that he have to save it and even for saving it you have to tell the computer hardware that yeah I am done with all my typing and now please save this file with a particular file name to my hard disk so for each and every small on my new task you have to perform you have to explicitly tell the computer hardware what to do and how do you communicate to it in the form of codes you have to write source code you have to write codes for each and everything that you have to perform so we see that it is a very tedious task or it is a very difficult task to do this if there is no operating system you have to manually tell the computer hardware each and everything that you have to do so if it was like this then nobody would actually use a computer system or at least common people would not use the computer system because it is such a tedious thing and it is very difficult to perform even the simplest of tasks so in order to avoid this or to overcome this problem what we have is an operating system so the operating system resides between the computer hardware and the users so it is a intermediary that acts between the computer hardware and user so let us take our first example that we have taken suppose the user one wants to type something and save it into his Microsoft Word so what he does he just double click on the Microsoft Word and then the rest of the things the operating system takes care of it it just opens it for him and then it makes the screen ready for him for typing and whatever he types it the operating system tells the hardware what to do so that it will be typed and displayed on the screen and everything that otherwise would have to be done manually by the user is now taken care of by the operating system and after typing it he has to save it when he saves it the operating system tells the computer Hardware where to save it and how to save it and how much memory to allocate or saving it and everything is done by the operating system so all those my new things which we otherwise had to do in the absence of operating system is now done by the operating system and it becomes very easy for the user to use the computer system so the user just opens the computer he just takes or opens what he wants to use it and he just uses it and all the underlying things that has to happen all the communication that has to happen between the computer hardware and the user is taken care of by the operating system it does all for the user and does the computing or the usage of computer becomes very easy for the users because of the presence of the operating system so that is the main task of an operating system now if we look back at these two lines that we have written now it will make sense and now you would understand what it actually means so let's read it once again an operating system is a program that manages the computer hardware yes we saw that the computer hardware how with resources like CPU memory i/o devices everything is managed by the operating system now and then it also provides a basis for application programs and acts as intermediary between the computer user and the computer hardware so it provides a basis for the application programs so here we have our application programs and it is installed on the operating system it provides a base for the application programs and also it acts as an intermediary between the computer user and the computer hardware so here we have the users and here we have the hardware and in the operating system it acts like an intermediary between the user and the hardware thus making the process of computation and the usage of computers seamless and very easy for the users so that is the main fun of an operating system and I hope that made you understand what an operating system actually does now we will be seeing some of the types of operating systems that we have and also the functions of operating system and what are the goals that an operating system needs to achieve so here I have some types of operating system personas badge operating system then time-sharing operating system distributed operating system network operating system a real-time operating system multi programming multi processing and multitasking operating systems so it is not limited to just this but these are some main types of operating systems that we have and don't worry even if you don't understand them I will be doing another lecture where I will explain all the types of this operating system in a clear manner I am just introducing this to you so that you just get used to the terms that we have here so all this types of operating system they perform in a different way based on the need that we have so just remember that much and you can keep this few points in mind and then let's see what are the functions of OS so the main functions of OS are number one is it is an interface between the user and the hardware yes we just saw that right now we have users here and we have the hardware here and it acts like an interface between the user and hardware and then the second point is allocation of resources so I already told you what I mean by resources here what we mean by resources are the hardware that we have like the central processing unit the memory and the input/output devices so when I user or when different users wants to use the different resources so they have to be allocated our resources are not unlimited we have a limited resources that means we have limited hardware so how this resources should be allocated to users in such a way that everybody gets their share and it performs in an efficient manner all this is done by the operating system so it allocates resources to different users or different processes in a good manner that is the function of the operating system and then it does the management of memory secure etc so I told you even when we were typing this word processor we have to first load it into the main memory then after typing it it has to be saved into the secondary memory or the hard disk so don't worry if you don't understand what is main memory secondary memory and all this I will be explaining all this to you in a clearer way in the coming lectures so just want you to understand that how the memory is managed so how things are stored or where they are stored everything is managed by the operating system and how securely it is done that is also managed light operating systems so these are some of the main functions of operating system and now let us see what are the goals of an operating system so we have studied this much now we must be knowing just by studying all these functions of operating system and what it does we can just assume what its goals will be number one is convenience so I told you in that example if we were not having an operating system how tedious or how tough it would be to execute even the smallest of tasks by the user but having an operating system on top of our computer hardware makes it very easy for the user to communicate to the computer hardware so it becomes a very convenient thing for the user to have this operating system so the first goal of operating system is to provide convenience and then the second point is efficiency now what do we mean by efficiency if you were not having the operating system and let's say we have different users trying to access these resources and how would you efficiently manage the resources that you should get this much resources or the other users should get this much resources so if you do it manually it is going to be very tough and that is very less chance that you can efficiently manage it so operating system by taking care of all these allocations of resources and management of memory and everything it provides you an efficient usage of your system so the first point is a convenience and then the second point is efficiency so many operating systems are designed mainly for convenience some are design designed for efficiency but mostly most or we can say many of the operating system are designed for both for both convenience as well as efficiency so these are the goals of operating system which we achieve by the functions of this operating system so in this lecture we have seen that types of OS we have seen the functions of OS and we have seen what is the basic structure and the basic components we have in our computer system and we see what the operating system actually does in order to make computation very easy for us and we have also seen some examples of the operating systems that we widely use so I hope this was clear to you this was just an introduction to just get you started so that you can know what an operating system actually is and now you must be understanding how complex tasks the operating system must be performing so all the design of operating system and each and everything that we need to know about this operating system we will be studying step by step in this lecture series so I hope this introduction was clear to you thank you for watching and see you in the next one [Applause] you [Music]
LOfGJcVnvAk,in this lecture we'll be studying about threats threats are an important topic in operating system and in one of the previous lectures when we discuss about process management I have shown you the difference between processes and threats so I told you that a program under execution is known as a process and threat is a basic unit of execution so each program may have a number of processes associated with it and each process can have a number of threats executing in it so thread is a basic unit of execution or a basic unit of CPU utilization so that is how we can define a thread it is a basic unit of CPU utilization now let us see what comprises of a thread so a thread comprises of a thread ID a program counter a register set and a stack so each thread comprises of these four unique items and apart from this it shares with other threads belonging to the same process it's Code section data section and other operating system resources such as open files and signals so these are the things that comprises of a thread and apart from that the thread shares these things like the Code section data section and other operating system resources are shared between threads belonging to the same process so as I told you a process can contain different threads so the threads belonging to the same process will share the resources slight open files signals Code section data section and other things so that is how a thread is basically made up so a traditional or heavyweight process has a single thread of control but if a process has multiple threads of control it can perform more than one task at a time so a traditional process also known as a heavyweight process had only a single thread of control that means it can have only one thread but this is not a very efficient system but if a process is having more than one threads then each thread will be assigned a different task and hence that process can perform more than one task at a time because it is having multiple and multiple threats will be performing multiple actions so there we see how treads becomes useful and how using threads makes the system much more efficient so here let us try to understand the concept of threads using these two diagrams so here in the first diagram it is a single threaded process which we refer to as a traditional or a heavyweight process over here so here we are having only a single thread so this whole block is considered as a process and this process contains only one thread and this is the code section the data section the files the registers and the stack belonging to this process so there is only one thread that means this process can perform only one task at a time but in contrast to this here we have another diagram showing a multi-threaded process so here this whole block represents a multi-threaded process so it is a single process and it is having multiple threads over here so if you see there are three threads in this process and each of these threads they have their own stack and registers so all these three threads they have their own stack and registers and if you see on top the code section the data section and the files belonging to this process are shared by these three threads and each thread they have their own stacks and registers so this is a diagram of a multi-threaded process so in this case this process can perform multiple tasks at a time because each thread will be performing a different task and hence multiple tasks can be performed at a time by the help of this multi-threaded process so from that itself we must have understood that it is much more efficient as compared to the single threaded process and it will make our computation faster and more efficient so in most of the systems that we use today we follow the system of multi-threaded processes it would be good if we can visually see how it works in our system in order to understand how processes are there and how threads are associated with the processes so here I have a small software processed threats view which helps us to see the processes and the threats running in our system so if I click here I can see the processes running in my system so I have opened the chromium browser in my system so here I can see the chrome dot exe processes which are running in my system so there are quite a few number of chrome dot exe processes running in the system now if I want to see the thread associated with it I will just click on it and here the details about the thread is populated so there are this many number of threads associated with that single chrome dot exe process that was for running so as I told you the thread comprises of a thread ID so these under IDs of the thread which identifies those threads uniquely and then these are the context switches and the last context switches that happened so we have discuss about context switches in one of the previous lectures and here there are so many informations about the thread that we have selected now if we come here we can see that there is the address of the thread and here we can see the details of the stack associated with that process so I told you that threads also container stack so in this way we can see what are the processes running in our system and we can also see the threads associated with those processes so we clearly see that in this system it is following a multi-threaded approach so when I click that single process of that chrome dot exe we see that this many number of threads are running inside that process so each of these threads may be used for performing a different task so in that way the browser can do more than one task at a time so let's say for example one of the processes of this browser chrome load exe is used for displaying the web page on the browser window and let's say that another thread is used for downloading something from the internet so we know that when we are downloading something we can also view the page at the same time so these two things are happening simultaneously that is possible because we are having multiple threads one thread is taking care of displaying and the other thread is taking care of downloading so if we were having a single-threaded process then while the downloading was happening the page could not be displayed or while the page is being displayed the download will not happen so that is this a simple example that I want to take in order to make us understand the usage of multi-threaded processes so different threads perform different tasks and hence multiple tasks can be performed in the same time hence improving our efficiency and speed of computation so we have seen a visual example of how multi thread processes are there in our system now let us see what are the benefits of having multi-threaded processes so from the example that I have taken you must have already understood the benefits of using multi-threaded processes but let us understand these benefits in more detail so the benefits of multi-threaded programming can be broken down into four major categories so let's see what they are one-by-one so the first benefit is responsiveness multi-threading an interactive application may allow a program to continue running even if part of it is blocked or is performing a lengthy operation thereby increasing responsiveness to the user so we are having a better responsiveness if we have multi-threading so I can explain this using the same example that I took about the web browser since we said that we are having different threads one for displaying the web page and another one for downloading and let's say that another one for the user to interact with the web page so if only one thread was there then until and unless one of the tasks completes the other task cannot be done so the user have to wait for one of the tasks to be complete in order to go to the next task but in case of multi-threading since different threads are simultaneously performing different tasks the responsiveness to the user increases so that is the first benefit of multi-threaded programming let us see what is the next benefit so the next benefit is a resource sharing so by default thread share the memory and resources of the process to which they belong the benefits of sharing code and data is that it allows an application to have several different threads of activity within the same address space so the next benefit is resource sharing so when we saw the diagram of different processes here we saw that these multiple threats they are sharing the resources of the same process so the code data and files are shared between these three threats so we said that it shares with other threats belonging to the same process it's Code section data section and other operating system resources suggest open files and signals so we see that resource sharing is happening in multi-threaded programming so the benefit of sharing code and data is that it will allow application to have several different types of activity within the same address space so we can have several different threats in the same address space of the same process so by resource sharing we are making our system more efficient because it does not need to have separate or dedicated resources for each and every threats so sharing resource is another benefit of multi-threaded programming so coming to the next benefit we have economy so allocating memory and resources for process creation is costly because threats share resource of the process to which they belong it is more economical to create and context switch threats so we already saw that there is a resource sharing happening in case of multi-threading so if there was no multi-threading then we will need to have a separate process for each and every task that has to be performed and allocating memory and resources for the processes is costly because each process will need to have its dedicated resources and memory which it may not be able to share with other processes but in threads as they are able to share the resource of the processes to which they belong it is more economical to create and switch between threads because we don't need to have those dedicated resources they are able to share and hence it is economy so this economy it comes from this resource sharing now moving on the next and the last benefit that we have is utilization of multi processor architectures the benefit of multi-threading can be greatly increased in a multiprocessor architecture where threads may be running in parallel different processors a single-threaded process can only run on one CPU no matter how many are available multi-threading on a multi CPU machine increases concurrency so the next benefit we have is utilization of multi processor architecture so we have already studied about multi processor architecture in this lecture series of operating system so multi processor architecture means there are several number of processors in the world system but if we are not having a multi-threaded approach and instead having a single threaded process then what will happen is that if we are having one process that one process can run on only one processor or on one CPU so you may have different CPUs so let's say for example that we are having four processors in your system but even though you are having four processors since your process is a single threaded process that single process can run only on one of the processor so no matter how many number of processors you may have having a single threaded process will run in only one of the processor but if we are having a multi-threaded approach then what will happen is that we know that in a multi thread approach each process has different number of threads associated with it so each of these threads can run on these multiple processors let's say that there are four threads associated with a single process and then there are four processors in your system so each of those threads can run on one of the processors so thread one may run in processor one thread to myrin processor two and so on so in this way we see that the tasks are executed concurrently at the same time and hence the process will be completed quicker and it is more efficient that is what we mean by utilization of multi processor architecture so if we don't have a multi-threaded approach even though we have multi processors it is not very useful because we are not able to make use of the multi processor architecture but in case of multi-threading we are able to make use of the multiprocessor architecture hence improving our efficiency of computing so these are the main benefits of multi programming so with this I hope you got the basic idea of threads and what is the meaning of single threaded process and multi thread process and we also saw that most of the systems now we follow a multi-threaded approach and we see that how a single process can have multiple threads associated with it and how they share the resources of that process to which they belong and how these things are beneficial for our computing so we'll be studying more things about threads in the coming lectures so for now I hope the basics of thread is clear to you so thank you for watching and see you in the next one [Applause] [Music]
WjwEh15M5Rw,"[Music] hello everyone my name is Michaan's and I'm gonna be your instructor for the day now the main topic of the day is to understand what do you mean by agile development and how can it actually help different organizations to have better approach to deploying the application that they have I've been working as a DevOps engineer with multiple development teams for the past 10 years this session is being conducted on behalf of Eddie Rekha now the agenda for the day is a few very simple questions that you would need answered in order to actually make sense of what do people mean when they say that you're HR so why do we need a job what is even ajar development the key terms of agile the advantages over ciaochao and how do you implement agile in your organization or the team that you're working with and the various methods philosophies and the frameworks that are available to actually implement a job in the team that you have so back in the day there was something called as waterfall development or the waterfall model of development so when I say waterfall you can think about something like you know a banking application or insurance application or some Police Department application so the moment I say waterfall model you can think of like a really huge application which is you know made up of small chunks of code for example this application might have a front-end this application would obviously have a back-end and then it has some DNS routes and a few services that it's dependent on so it doesn't really matter how many services are part of this application but this entire application was shipped as a one-hole application that's how they used to happen back in the day and this was referred to or this method of development the waterfall method the application was referred to as a monolithic application now it's called monolithic if I can write it properly monolithic application now you know everything was fine in D&D unless like two thousands 2002 and that's when things started to become a bit extreme because the clients would have ten different requirements that would change almost every day now if you have one single application you have a single point of failure so if we were changing even this limb part of this application and if this part was to fail this entire application would stop working that's when people started brainstorming about better approaches to software development and how can you meet the requirements of the millennium of the today's world - without actually affecting how the software is written or any application is written in the first place that's where the ideas of agile development came into the picture so that was one part of the problem the second part of the problem was because it was a monolithic application the time that it required to actually push the changes for example let's say you have an application up and running in your production environment and your development team actually created a new feature or they modify the existing feature now that feature is supposed to go in production right but it actually used to take days and months back in the day because you would never really know what's going to happen if you put it to production today there are so many moving parts that you never sure if it's going to break the existing application that you have so people used to actually should do the maintenance I'm pretty sure you would have received those emails right like B will be unavailable during this weekend because there is a scheduled downtime now that's what used to happen now that cannot really fly anymore right think about companies like Netflix uber Amazon they can't really be down even for a moment because you never really know how many people are accessing the service now that is the second part of the problem that people were trying to solve that's when agile came into the picture now agile put in simple terms is a philosophy to rapidly deploy an application in much more organized way now obviously there is a lot more details than meets the eye but in a simple sentence that's what you mean by a jar you want rapid deployment of the software or the code that you writing without having to wait for a longer time at the same time you want to make sure that you have small chunks of code that can be shipped to the client or whichever application you're working with that's the reason Rajal exists today and now we're going to look at what do you mean by agile and how can you actually implement this so I hope we are pretty clear about why was there a requirement of agile to begin with this is what you mean by waterfall model now this is the traditional software building practice right so you would gather the requirements you would design or architect how you imagined your software to be and then there would be actually coding that would be executed there would be verification and there would be maintenance post deployment so this is what has been happening for the past four decades but this won't really fly in today's world because there are multiple changes being pushed every single day so you can't really just go through the months of planning for a little change so the way applications are developed have changed and so is the way applications are deployed so that's what you mean by waterfall models now I think I have explained it pretty well there are a lot of companies that still follow this model but at the end of the day all of them are trying to you know migrate to a more agile development it's not so easy depending on the size of the company but you will still see a few companies using waterfall and they are in process of moving away from this model then comes our child to rescue so what is agile we've talked about the requirement or void as agile even exist so far now let's look at what do you mean by a chef so agile is nothing but a chain of rapid development and deployment meaning the first section of your software development is always the planning part but now you obviously know what you're about to build but you kind of break that entire application down into small chunks of code and then you work on those small services one service at a time ensuring that first of all you kind of follow the micro services model and at the same time you don't really affect the entire application in general so you plan you design you architect and you actually develop the application you test you deploy it and you review it if you notice launch is actually outside of this entire circle meaning every time you make a change it could be something as simple as just one line of code change just available being renamed so it doesn't matter how small or how big the changes the idea is the moment the change is made it has to be deployed even in a dev environment so that you can get a constant feedback over what's happening with the code that you have imagine if you actually had to wait for one month or two weeks just to get the feedback on if you really want that change or not now that could be a little annoying or frustrating from the developers point of view so that's the first aspect of agile you plan you design you develop you test you deploy the changes and then you review the changes before you actually launch them into production the other major aspect of agile is now instead of working with like a huge chunk of application you work in iterations so when I say iterations what I mean is you have a specific set of tasks that have to be completed in specific priority so that you already know what you're supposed to be working on and you are not really worried about ten different micro services at the same time you have a specific requirement where you should be focused so you have the first iteration which might be the first part of your application second iteration third iteration so think about it this way if you have Amazon or any if you're working for you know amazon.com or Amazon tour in which is the shopping website you might visit amazon.com and you might think yeah it's a one website it's not really one website it's a website that's broken down into several other services for example the website itself might be called a front-end now the moment you reach to amazon.com you can click on a product right and then you can view the details of a product so that service it's not really a part of the front-end anymore that is being called from something else called as catalog now once you decide that this is a product that I want to buy you click on buy now and then it's going to take you to something called a shopping cart and after you made the payments and all those things you have email notifications and you know text notifications the point here is even though all of these things are working in synergy they are actually completely separate services completely separate tasks in the underlying architecture so if I am working on something on the front end I don't really have to be worried about the catalogs and the shopping because first I am getting a constant feedback even before the launch I am getting a feedback about what's gonna happen once we launch your code to the production at the same time I don't really have to be afraid that it's gonna break my entire application because all of them are developed as separate micro-services your one service will never affect another service of course the dependent services might be affected but the idea is you never really want a single point of failure that's the idea of a jar now let's move forward now what are the terms and the values of our job so the first value is people over processes and tools working software over comprehensive documentation customer collaboration over rigid contracts and responding to change rather than following a plan so people over process and tools this kind of who gives you you know a development centric and client centric environment meaning just because you've been doing something in a traditional way for the past eight years it does not mean you don't really explore the options that you have right now for example whatever you did with PHP my sequel yesterday can also be done with Python and flask today right I'm not saying change your entire application what I'm saying is the model is pretty much people centric the people like the development team and the customers and the end users are given more importance and working software over comprehensive documentation now this is something that all of us would have noticed at some point in time right so every application would have an internal document of how long 100 pages 150 pages about all the class all the methods how the application is being built then why the application is being built who's the owner in like plethora of other details that you as an individual is not even concerned about you are concerned about what you have to build and how far along are you in that development task so in agile the functional application is given much more importance than the documentation because if you think about it the code itself is a documentation right if you knew how to interpret the code you could look at the code and that can also act as an documentation so I'm not saying that won't be any documentation all I'm saying is the development is given more importance over the documentation part and then customer collaboration over rigid contracts and responding to change rather than following the plan so agile is really feedback dependent meaning back in the day you know the managers and the product owners will have multiple meetings they'll come up with the kind of software that they bought everything would be discussed over like three four months and then people would want to stick to the plan because you already spent four months planning this thing now if you wanted to change even a little part of this the entire meetings and planning would have to be done all over again now agile changes that agile works more on the feedback just because the plan has been made it does not mean that cannot be any changes because you've broken things down into smaller chunk of tasks any one of the tasks can be modified according to the requirements at any point in time so these are the values that agile bring to the table right so there are two parts of the puzzle you have a benefit in the new table of value so benefit is what you get like right off the bat and value is what you derive out of it so what we saw before were the values where everyone you know on the table receives some of the other kind of benefit because of our job principles of agile satisfied customer welcomed changing requirements deliver working software frequently frequent iterations with stakeholders motivated individuals face-to-face communications measured by working software main in constant pace sustained technical excellence in good design keep it simple empower self-organizing team reflect and it just continuously now this might look more like a textbook think like here are the 10 benefits you know just go with a job but that's not really the case we are actually going to look at how all of this materializes like you know over the future slides when we actually talk about how can you implement a job in the working or the team that you're working with so let's more now advantages of agile do you pretty much kind of you know touched upon all of these things for now persistence software delivery increased stakeholder satisfaction inspect and adapt welcome to changes at any stage design is important and daily interactions now comes the meat of the entire presentation now you have a basic idea of Persia right but question that everybody has at any point in time is what's in it for me okay you told me what's a gel and how can I tell but how can it help me as an individual or how can I actually implement a job so there are multiple frameworks or philosophies when it comes to agile so scrum extreme programming lean Kanban crystal are some of the examples the most popular one out there it's called scrum now again these philosophies are not really set in stone it's not like if you following scrum that you know it's 100% what scrum dictates you how to do it that way that's not really the case in majority of the cases what people do is they primarily implement scrum and then they have some ideas from canva and extreme and lean and then they kind of have their own philosophy that works for their organization but scrum is the one that's used by the majority of the people so even before looking at the slide you know before we go through what we see in the slide I can just kind of explain scrumpy you the way I know it right because I worked with multiple development teams I've seen most of these being implemented and I know how each one of them work in the real world example so what is scrum so scrum is basically an iterative philosophy meaning you I trade over the changes you I trade over the deployments and software development one at a time so if you wanted to talk about scrum scrum is an iteration of plan then build then Cass and then review now you would constantly be iterating over all of these aspects now what do I even mean by this so let's first look at how or what does a scrum implemented team looks like so in scrum implemented team you have the very first person that I want to talk about someone corners product owner now when I say product owner if you're coming from you know more of a traditional software development environment you can think of a product owner as a manager he is the guy who holds the responsibility to make sure that the application is deployed as and when committed at the same time the application is built exactly as the way it has to be built so product owner is the guy with the ideas he might not necessarily be a technical person he might as well be a guy from the management he does not necessarily have to know the development or the technicalities in detail he's the guy with the idea and the owner of the application that would be developed so pretty much all the accountability lies on him and then there is someone called a scrum master now scrum master is someone that you would have traditionally referred to as a team leader or a project owner now you can think about scrum master as a team leader in the hierarchical sense this is the person that's right below the product owner and this is the person who actually does the data or handles the day-to-day operations like you know running the meetings or handing the tasks that have to be done and then you have the team itself which will consist of your developers and testers and you know depending on your requirement it might have a few more roles but then you have the actual team but we'll execute the tasks so these are the three roles that you have but now that we know the people that are involved how exactly this works I mean this looks pretty much similar to what you do at your office it's just fancy names right you have a manager you have a team leader and you have a team so how is it any different from what you do at your office so that's what we want to look at now I hope the roles are kind of clear to you now that you have the roles defined let's look at the first thing about the development so the first part of the development that we want to look at it's called product backlogs now here's where things start to get a bit different from how you might have been working at a traditional environment now in a traditional environment you have an application that has been already planned for months and you along with others have been working on deploying the application and you know the project usually goes on for a few months or even a year or two depending on the size of the project now in product backlogs you actually have the same application iterated over in smaller tasks so when I say smaller tasks you can think about the same amazon.com about so the first iteration will have plan it will have build it will have test and it will have review now in this case I'm not really building the whole application I obviously have an idea as to what the application is supposed to look like but for now let's say I'm only concerned about the front-end or what the main or the primary website would look like then I have a second iteration where I would you know the same cycle plan build test and review but this is where I'm actually working with email notification I'm actually coding how would my email notifications be sent out and you know how do you manage the email queues and the rest of the things and then you have a third iteration which might just be your payment processing so in this case again the same cycle you plan you build you test and you review but the benefit here is that once you have the product backlog these are all your product backlogs these are the things that are supposed to be done over a period of time so the first thing you do is you define the product backlogs not you as a developer but the product owner and the scrum master these are the people that will actually come up with all the backlogs instead of you know just one single application that says I want this thing to work they actually break it down into small chunks of code so that is the job of the product owner and the scrum master because as I said product owner might not be a technical guy necessarily so scrum master is the one that would all your technical right right so both of them would come up with a product pad Rox once you have a product backlog there is something called as user stories so each one of these would now be referred to as user stories and your scrum master actually ends up prioritizing them meaning if you have front-end email payment processor and ten other backlogs that have to be developed let's say over next five or seven months in that case the scrum master and the product owner would kind of prioritize now obviously payment processor is of no use if you don't even have a project so logically I would want to prioritize my front-end over my payment processor so scrum master and product owner will prioritize the user stories that you have and depending on the priorities that has been said they come up with something called a sprint backlog now spread backlog is when your development team actually gets involved in this because now you already have an organized and prioritized user stories that you are supposed to be working on so ten different things are not just dumped on you at the same time you are given a logical and reasonable tasks that have to be executed one at a time and once he has a sprint backlog you can actually start working on it as a development now I'll get rid of this beautiful drawing that are made for now then let's just look at now a sprint backlog I'm sorry I can't really you know write with my mouse but I hope you realize it's called sprint now there are different you could call them ceremonies or rituals but there is something called a sprint planning now the sprint planning again it's just a fancy name for the makings and discussions that you have during the sprint planning the product owner will actually explain how he imagines the end goal or the product for the application to look like so you have something called a sprint planning you have something called its daily scrum now daily scrum is nothing more than you know the 15 minutes meeting that happens every day where the developers and the testers and any other role that you have in the game can actually discuss what happened and where you stand if you need any help there any blockades and what do you plan to do today or tomorrow and then there is something called a sprint review so sprint review actually occurs at the end of the user story or the battle that you've been working on so each and every one of these user stories right they usually are designed with the timeline of two weeks in mind now some companies the Sprint's may vary like it could be two weeks to four weeks but in majority of the cases each sprint will last two weeks so that you know exactly what you're supposed to do for the next two weeks now at the end of the two weeks along with you know you're planning your daily meetings once your sprint is completed you have a sprint review but you actually demo of the code that you have or you know there's some kind of verification to make sure that Sprint is actually completed and then you move on to a new sprint or you move on to a new user story that you have to work on so that's the idea that's how things work in general now with that in mind if we move on to the next slide this is what the scrum looks like so you have a product backlog and then you have a sprint planning now as I mentioned before each one of these Sprint's the timeline is usually a couple of weeks depending on the size of your organization it might last up to a month but for all the companies are outward with it's always been between 1 to 3 weeks so you plan for what has to be done during the next two weeks and then you have the user story or the backlog that you're supposed to work on and then you have your team that actually works on it along with the daily scrum so you have the daily meetings at the same time and at the end of the sprint you have the review and then you ship the part that you code it now when I say you ship the part I don't mean you necessarily put it in production but you know that the part is ready to be assembled into the application that you have so the idea is at the end of every two weeks you have a shippable part of the application that is ready to be deployed so instead of working a huge application that would have taken a year anyway now you kind of break it down into things that can be actually shipped in two weeks depending on the priorities that have been set by the product owner and the scrum master that you have that's the idea of scrum to break everything down into smaller chunks of coal smaller chunks of tasks so that everyone knows exactly what they're supposed to do that's like the methodical part of it right you have a method there is a specific best set of practices that you following along with the technical side because you have a rapid deployment the moment you write a code you can actually test it in the dev environment now that's where people like me DevOps come into the picture but the idea is you don't really have to wait for a month just to see what you code it right now if you push the code right now in matter of minutes you would actually see that working in the dev environment so that's the technical side you have the instant feedback to figure out if you have to move on or you know if you have to make some changes to the code that you have right now now that's crumb and agile in general then there is a second method so scrum was one of the philosophies or framework then you have something called as extreme programming now this was one of the first ones a group of developers came up with it back in 2001 I think the guy was called Kent so they kind of came up with the idea of agile development they came up with a set of best practices and then they even signed a manifest so they actually came up with a manifest that you know these are the things that we should be following in the industry these are the best practices and these are the principles and they even signed it so extreme programming has been around for almost a couple of decades and scrum is kind of the next iteration of extreme programming it's a big different but as I said before majority of the organizations using scrum programming so in extreme programming they came up with you know the basic sets of principles like people centric environment discipline and then you have rapid deployment so project requirements stories test cases task completion customer input iteration planning now both of these things are happening in parallel so you have project requirements you have stories test cases tasks and completion and at the same time you have customer input and at some point you have customer relations in the meeting for example you developed 20% of the application and your end user or your client came back with a better idea or if they need some modifications so those are the changes then you have your UNT testing you have client side duty testing and acceptance at the end of it so extreme programming the ideas are somewhat similar to scrum but at the end of the day all of these philosophies are trying to make the lives of developers the end users better and not compromising on technicalities rather making the shippable product better and faster is the idea all right let's move on then you have lean programming so lean principles even this has been around for a while so eliminate waste amplify learning decide as late as possible decide as fast as possible empower the team build integrity and see the whole yeah so you could call it a framework you could call it a philosophy or methodology now it really depends on you know the word that you want to use but at the end of the day it's again trying to become a developer centric and people centric and setting best practices to make sure everyone in the team knows exactly what they're supposed to do and you have a cross-functional team when I say cross-functional essentially I'm pretty sure if you're watching this video is because you have some of the other development experience and if you do then you would have come across this point right when you talk to someone okay you've seen that feature and we looked at the code and that guy would be like you know that code doesn't concern me it's none of my concern I'm working on something completely different you know we are used to that sort of development right where people individually know what they're supposed to do and they're not even worried about what the other person is doing now it's time we actually break the silos just because you're not coding that part it does not mean that the code does not concern the part of the code that you are writing so everybody has to come together and work on the same application which is what you'll call a cross-functional team in the scrum example once you have the user stories and the backlogs that you are supposed to work on in the next two weeks it doesn't really matter what role do you play in the team it's your team's responsibility to make sure that the task has been completed and the task is also being designed with the timeline in mind so it's not like you're expected to do a six weeks worth of development in two weeks so the task itself is designed with the timeline in mind and then you have something like Kanban so Kanban is similar to scrum the difference here is in case of scrums you have you know smaller chunks of backlogs that you're supposed to work on for the next two weeks or three weeks in case of Kanban it's a continuous process so there is no such thing as sprint in can be what you do in Kanban is you have a list of tasks that are supposed to be done and for example you have something like you know a whiteboard you have a build queue you have a test queue and you have a ship queue now this is a hypothetical example you would obviously have plan and the rest of the X but the point is you might have four things that have to be built or let's just say three services that have to be built and once the first service has been built it actually moves on to the testing you and then this place is occupied by another service and once this is done this is moved on to testing and this is occupied by another service meanwhile if this testing is done it will move to the ship queue and it will eventually be shipped so the idea is whatever tasks have been achieved will be the placed by a new item in the queue so if you have a build Q test queue and ship you all of these would be moving parts so if your job is to build this and let's say your colleague drove this protest this the moment you push this first item into the testing you another item will replace this first item so that you know what is the next thing that you are supposed to be working on so Kanban is more like a continuous implementation of the software development so that's what you mean by agility in general even if you think about it the English word agility means to be really rapid right agility would mean whatever you're doing is happening in rapid succession right that's what you mean by agility in general so in case of development by bringing agility to your team you are ensuring that everyone's happy at the end of the day and you still have a technically smarter team that's able to get instant feedback now I'll give you a quick example of this now I'm pretty sure all of us or at least most of us are aware about Netflix now you would be surprised to know that Netflix is pushing more than 1,000 changes every day into their productions if you actually worked at a Netflix development team you would know that these guys are pushing a thousand changes in production every day now how do you think that's possible obviously they are not pushing it to production without reviewing it so without testing it even with all of those things in place how are they able to deploy more than 1,000 changes every day now these could be very little changes like you know some UI fixes some database fixes some payment process and fixes so we are not really concerned about what the changes are but I know for a fact that that's the number that's the amount of changes that they actually push every day that's possible because you mean the rapid deployment by agility or by becoming a jar so that's the level of agility you can actually obtain the moment you have an organized team that is working on the principles of a jar now obviously there are external factors like you know how's your infrastructure how's your time off stream but it is possible at the end of the day and then there is one more framework that's called Crystal so these are the ideas of a job now I hope I was cleared into how can i shall help your team in becoming a better development team so there are three aspects of it right philosophical technical and the way software is built so philosophical being the best practices like how do you define your team's who is a scrum master who's a product owner what's the team what is a sprint what are the tasks that you're supposed to do then you have the technical side of it like if you build a code how exactly can you deploy the code like automatically how can you review the code how can you test the code automatically and then there is a software development aspect of it that you are moving away from a monolithic application towards the idea of micro services so these are the three aspects that move parallely and at the end of the day it gives you a peace of mind it gives your product manager a peace of mind and the end user a peace of mind with better ideas of deployment so that you don't really have to run around on 10 different desks confirming if your changes are actually deployed or not so that's everything from me if you have any questions feel free to get in touch with Ed Eureka I'm pretty sure you'll find the contact details somewhere around this video and thank you very much for your time you all have a good day and good luck I hope you have enjoyed listening to this video please be kind enough to like it and you can comment any of your doubts and queries and we will reply them at the earliest do look out for more videos in our playlist and subscribe to any Rekha channel to learn more happy learning"
SaCYkPD4_K0,"how do you decide what your next step on a project is let's hope you're not relying on a role of the dice especially when the decision concerns something as costly as software development in that case we suggest a tried and true method like the software development life cycle or sdlc it's a standardized process that describes different stages of building highquality software sdlc was conceived in the 1970s as a way of formulating the development of large-scale Business Systems but it prevails today as a reminder of What stages a product goes through on the way to eventual we hope success there are many methodologies addressing this sequence of stages that you might have heard of so today we will talk about the phases of sdlc and the methodologies applying [Music] them the father of the software development life cycle was a computer scientist and a director at Lockheed software Technology Center in Austin when instant wroy in his influential article managing the development of large software systems he described implementation steps that are similar to what we use today there are generally six stages of software development covered in sdlc planning and Analysis it's sometimes also called requirement analysis or has analysis as a separate stage before or after planning all in all at this prolonged stage the product team collects business and use requirements about what the final product must do and how it should work cost and time estimation scoping and other planning activities all go here this is such an extensive phase that we have several videos covering software planning so make sure to check them out after this one second is designing after the planning stage you prepare the product's architecture and design here a software architect analyzes the requirements and sets the highlevel structure of the future systems describing what components on go where and how they interact with one another they will also select a technology for development user experience and visual design can also be drafted at this stage clearly without this stage the following one can't happen the next phase development is a stage where programmers use the architect's design to write code that will finally turn the vision into a real thing this is where some aspects of the final product will be first revealed to stakeholders then testing more quality assurance takes place testers and QA professionals review the products code and useability for bugs and errors so they can be fixed before the next stage deployment is when the product is released to the users sometimes this stage is combined with the following one maintenance where feedback is constantly gathered and the product receives continuous updates and support this includes both fixes and new features sometimes there's a prototyping stage between planning and designing a prototype is a simplified version of the product used to validate the idea before any major work begins it doesn't even have to be coded the design can be used to receive feedback from stakeholders and users a prototype is the best way to verify requirements with minimal effort and costs so the number of phases and their titles can differ depending on the specifics of the projects or a particular methodology but a common understanding Remains the Same you start with a plan then then you design and develop after that you test and then release a product but by itself sdlc is just a concept and it's used as a base for several models you apply that will give your project Clarity and help deliver the best results so what are they waterfall was the first software development approach described in Rey's article back in the 1970s and it adheres strictly to the sdlc stages the main idea is that each stage starts only after the previous one is finished the timeline due dates and deliverables are clearly set the waterfall model was borrowed from the construction and Manufacturing Industries where it makes total sense you need to wait for the blueprints before laying any bricks this model is very straightforward and well defined and the team can focus on just one phase at each point in time so the project is easier to manage but today it's fallen out of favor in the engineering World why the main reason is that it's the opposite of flexible whenever you need to make a change in requirements or design you need to roll back to stage one and do the whole cycle all over again what if at the Finish Line you've identified some unforeseen risks that should have been mitigated during planning when testing happens so late in the process and stages don't overlap it inevitably leads to blown deadlines and budgets so in modern software development a different approach is used today agile philosophy is the king the agile Manifesto which was written by 17 software developers in 2001 was a direct response to the heavyweight waterfall methodology among its 12 principles there are calls to welcome change even in late development stages and to deliver software continuously and early agile solved the waterfall drawbacks in a few ways firstly the testing phase isn't separate from the building phase but rather it's done at every iteration for example in scrum one of the Frameworks based on agile the development is broken down into smaller Cycles Sprints Sprints are considered to be part of the scrum development framework and they are short periods of time typically lasting from 1 to 4 weeks at each Sprint cycle the team Works through all stages at the end of the Sprint the finished piece of product is shown to stakeholders the short feedback loop allows devs to adapt quickly and find new approaches faster without compromising the delivery date another key change that agile brought to the development life cycle is the approach to planning or more specifically to documentation one of the main values listed in the agile Manifesto says working software over comprehensive documentation but the assumption that agile teams use little to no docs is wrong in waterfall the idea was to create detailed documentation covering project goals and the working process as well as precise budget and time estimates for agile where change is welcome this would be just a waste of time so the idea is to produce only essential docks that is just barely good enough yes this is a real term in agile plus it must be a collaborative effort where a tech writer asks the team for feedback and encourages others to share their ideas if you want to learn more about documentation types and how they're created we have a few videos you'll find useful while originally agile was more of a philosophy today it has loads of specific tools and techniques such Frameworks as scrum lean extreme programming or conon are also classified as agile approaches even though they existed before the agile Manifesto was formulated they now fall under the agile umbrella each framework has its best applications and specific tool set apart from the aforementioned scrum there's a lean methodology that focuses on eliminating waste and at its core is a feedback loop for testing your assumptions it consists of three recurrent steps build which basically means drafting some version of the product such as an MVP measure meaning collecting feedback and evaluating if this version of the product succeeds and learn drawing conclusions and deciding how you refine your product for the next Loop another framework called Extreme programming or XP uses the usual life cycle but emphasizes the technical aspect of development it uses such practices as test driven development code refactoring pair programming and more also kbon is more of a management method than a framework since it uses so-called conon boards to visualize work for efficiency there are many more Frameworks in the Agile development process that can be used depending on what the team wants or the project requires around 2008 A New Concept emerged from agile that drastically changed how software is built and released today devops is one of the most discussed development approaches employed by such Giants as Amazon Netflix Google and Facebook it stands for development and operations devops introduces a cultural shift where different teams work together developers qas and operations are no longer writing the code testing it and deploying and supporting the code apart from one another now they merge into a single team often having multi-disciplinary skills devops life cycle is typically visualized as an infinity loop representing the development processes on the left side and operations on the right side a team collaborates and communicates throughout each phase we have a whole separate video covering devops and a video series about all devops aspects you need to know so check it out after this one what's important is that devops uses typical agile planning the product development has rough objectives outlined and only the few future Sprints are detailed so while agile is focused on identifying features that users will like devops make sure that existing processes are optimized and streamlined to do that devops uses CI CD continuous integration and continuous delivery or cicd is a set of principles that allow developers to deliver frequent code changes it means that teams integrate code on a daily or even an hourly basis by merging code changes in a central repository and preparing for deployment at any moment basically all changes new features and Bug fixes are always ready to be deployed and the product can be updated multiple times per day continuously delivering value to users HubSpot shared that they add 200 to 300 deployments a day using cicd Netflix orchestrates over 20,000 deployments daily in 2022 11% of organiz Iz ation were considered high devops performers and deployed 417 more times than low performers this is of course achieved by high levels of Automation and the infrastructure that connects all aspects of product delivery and a unified ecosystem although cicd facilitates agile practices such as getting feedback quickly and detecting errors in the early stages it doesn't require short iterations and introduces automation to the development life cycle even in agile introducing product changes can be a long process especially today when technological innovations happen so fast and consumer needs change easily so cicd solves this problem by adapting in a short amount of time without disrupting the whole development flow and consumers get to see the new features added in real time and provide their feedback instantly for 60 years the phases of the software development life cycle remained relatively unchanged regardless of whether you're building a house a rocket ship or an app you will need to plan design build test deploy and maintain the product what matters is the relations between these phases now when testers and devs collaborate or are even capable of doing the same job you don't need to separate those tasks much automation tools made it possible to do many things at the same time and shrink the cycle to days and hours agile and many models and approaches that spurted from it have remained relevant for decades perhaps they will last another decade or maybe a new hip technology will show us a more efficient way to follow the product development path regardless we will keep you updated let us know if you enjoyed the video like And subscribe if you want more videos like this we'll see you soon in the next [Music] video yeah"
4Cr0OxXU7jY,[Music] let me ask you a question are you intrigued by the complexity of the tech world well at the roots of this tech world the two components that constitute every technology are software and hardware and these require vigorous development through a tested and approved cycle of processes hello everyone and welcome to this video by intellipaat in this video i will discuss the software development lifecycle but before we begin please make sure to subscribe to our channel and hit that bell icon for regular updates now let's take a look at the agenda firstly we will see what is meant by software then we will see what is sdlc then the need of sdlc then we'll move on to the steps involved that is we will discuss the sdlc life cycle and the phases then we'll see what models can be used for sdlc and lastly a conclusion now let's see our first agenda that is what is meant by software software is a collection of instructions data or computer programs that are used to run machines and carry out particular activities it is the antithesis of hardware which refers to a computer external components a device's running programs scripts and applications are collectively referred to as software in this context next we'll see what is sdlc well sdlc stands for software development lifecycle it outlines the numerous steps needed in creating software to produce a high quality end product the stages of the sdlc encompass the entire life cycle of a piece of software from conception to retirement following the sdlc process results in the software being developed in a controlled manner next we'll see the need of sdlc the development team must choose a lifecycle model that is appropriate for a specific strategy and then adhere to it the creation of a software product would not be systematic and disciplined without the use of a precise life cycle model there needs to be agreement among team members regarding when and what to do when producing a software product if not it would be an indication of disorder and project failure the criteria for entering and leaving each phase are described in a software lifecycle model only if the stage energy requirements have been met can a phase start therefore it is impossible to detect the entry and exit criteria for a stage without a software lifecycle model it becomes difficult for software project managers to keep track of the project's development without software lifecycle models now let's take a look at the development steps involved firstly we have planning and requirement analysis then we have specifying the needs following which we have creating or designing the software then project development testing deployment and maintenance let's have a brief description about each of these stages and this is the cycle that the sdlc follows so about stage one the level of sdlc that is most crucial and essential is requirement analysis with input from all the stakeholders domain experts and smes in the industry the senior team members carry it out at this point planning is also done for the requirements for quality assurance and for the identification of project related risks so a meeting is scheduled with the client by the business analyst and project manager to obtain all the necessary information such as what the customer wants to construct who will be the end user and what the products goal is a fundamental knowledge of understanding of the product is crucial before constructing it for example a client requests a financial transaction related application this approach requires specific requirements such as what operations will be performed how they will be performed in what currency they will be performed etc once the necessary task has been completed the analysis of the viability of a product's growth is finished there is a signal set up for additional discussion in the event of any ambiguity the srs that is software requirement specification document is prepared once the requirement has been comprehended this document should be carefully followed by the developers and should also be reviewed by the client for future reference next we have specifying the needs the process of representing documenting and getting the project stakeholders to approve the software requirements follows the completion of the requirement analysis this is done by using the srs document which contains all the product requirements that must be created and developed during the project life cycle stage 3 is creating or designing the software the knowledge of the software project's needs analysis and design will all be revealed in the upcoming phase this phase is the result of the previous two such as requirement analysis and client input stage four is project development the actual development phase of the sdlc starts here and programming is created coding represents the start design implementation programming tools including compilers interpreters debuggers and other similar tools are used to generate and implement the code and developers must adhere to the coding standards outlined by the management stage 5 is called testing following the generation of the code it is compared to the requirements to ensure that the solutions are satisfying the demands identified and acquired during the requirement stage unit testing integration testing system testing and acceptability testing are carried out at this level stage six is deployment when the software has been certified and no defects or mistakes have been reported it is put into use the software may then be delivered as is or with proposed improvements in the object portion depending on the assessment the maintenance of the software starts once it has been deployed state 7 is maintenance when the customer begins utilizing the technologies that have been designed the true problems and ongoing needs become apparent maintenance is the process when the developed product is given attention next we'll talk about the sdlc models namely there are seven and first one is waterfall model then we have v-shaped prototype spiral iterative incremental big bang and lastly the agile model let's have a brief description about all of these models the first model utilized in the sdlc is the waterfall model it is also known as linear sequential model the results of one phase in this model serve as the input for the following phase only after the preceding phase is finished developing can the new phase begin let's take a look at the cycle itself first requirements are gathered and analyzed only once the requirements have been set in stone can system design begin the srs document produced in this case serves as both an input and an output for system design phase then documents that serves as an input from the following phase implementation and coding are prepared throughout the system design and software architecture phases then coding is completed in the implementation phase and the software created serves as the input for the testing step that follows the developed code is rigorously tested throughout the testing process to find any software flaws when a fault is repaired it is retested and entered into the defect tracking tool bug logging retesting and regression testing continues until the software is ready for use following the customer's approval the developed code is put into production during the deployment phase the developers are responsible for fixing any problem that arise in the production environment and fall under maintenance now advantages and disadvantages the waterfall paradigm is an understandably straightforward one in which all steps are carried out sequentially each phase is deliverables are well specified which prevents complexity and makes the project simple to manage not disadvantages the waterfall approach requires a lot of time and cannot be utilized for projects with a short lifespan because a new phase cannot be started until the current phase is finished this model expects the requirement to be clear in the requirement analysis phase itself and any change in the latest stages would result in higher costs as the changes would be required in all the phases as a result it cannot be used for projects with uncertain requirements or whether requirements keep changing next we'll talk about the v-shaped model verification and validation model is another name for this specific model in this methodology development and testing go concurrently and verification and validation go hand in hand the only difference between the v model and the waterfall model is that in the v model testing and test planning begin earlier let's take a look at the cycle in this model we have two phases that is the verification phase and the validation phase under verification phase we have requirement analysis that is all necessary data is acquired and analyzed in this step examining the specifications is one of the verification activities then we have system design once the requirements are defined a system is designed or the product's architecture and its components are made and recorded in a design document then we have high level design the architecture and design of modules are specified by high level design it specifies how the two modules work together then we have low level design the individual component architecture and design are described by low level design lastly in this phase we have coding in this phase code development is completed in the validation phase firstly we have unit testing utilizing the unit testing cases created during the low level design phase unit testing is carried out in-house unit testing is done by the developer it is carried out on individual components which helps find effects quickly then we have integration testing during the high level design phase integration testing is carried out utilizing integration test cases the testing carried out on integrated modules is known as integration testing next up we have system testing during the system design phase system testing is carried out this step involves testing the entire system including every aspect of its functionality lastly we have acceptance testing acceptance testing is carried out in the customer's environment and is connected to the requirement analysis process now we have advantages and disadvantages for advantages it is a straightforward and simple model smaller projects with stated requirements that freeze in the early stages benefit from the v-model approach it is a disciplined approach that yields a high quality end product for disadvantages for ongoing projects a v-shaped model is not recommended later requirement changes would be prohibitively expensive now we'll talk about prototype model the prototype model is a model in which the software prototype is created first comparing prototype models to the actual software reveals that they perform poorly and have limited functional capabilities prototypes are built with dummy functionalities this is a useful tool for figuring out what the customer actually wants let's take a look at the cycle to obtain useful user feedback software prototypes are created before the final product after taking into account user feedback the prototype is once more examined by the client up until the consumer accepts the model this process continues after gathering requirements a rapid design is made and a prototype is developed before being delivered to the customer for review the prototype is modified in response to client comments and the clarified requirement then represented to the client for review the customer must accept the prototype before the genuine program can be developed the waterfall model approach is used to construct the actual software now let's see the advantages and disadvantages for advantages because flaws are discovered considerably earlier during prototype models develop costs and time are reduced a change in requirement a missing feature or a lack of functionality can all be found during the assessment process and added to the finalized prototype a customer's involvement from the beginning clears up any misunderstandings about the functionality's requirements and for the disadvantage the customer can alter the requirements for the finished product because they're involved in every stage of the process which makes the scope more difficult and could extend the time it takes to deliver the product next we will talk about the spiral model iterative and prototype approaches are part of the spiral model the iterations adhere to the stages of the spiral model the innermost loop in the model is for requirement collecting and analysis which is followed by planning risk analysis development and evaluation the loops in the model represent the phases of the sdlc process designing is the second loop followed by implementation and testing now there are four phases in this model let's take a look at the cycle we have planning risk analysis engineering and evaluation firstly planning gathering requirements is a part of the planning step during which the customer is asked for all the necessary information and it is recorded the following phase begins with the creation of software requirement specification document then comes risk analysis the best solution is chosen for the risks involved in this phase and analysis is completed by creating the prototype as an illustration there is a chance that the data access rate from a remote database will be excessively slow building a prototype of the data access subsystem will eliminate the risk then we have engineering coding and testing are completed after the risk analysis is done and lastly we have evaluation the customer assesses the system created and makes plans for the following iteration let's talk advantages and disadvantages for advantages the prototype models are extensively used for risk analysis and the following iteration can include any functionality changes or improvements and for disadvantages only huge projects are the greatest candidates for the spiral model and as it may require numerous iterations and take a long time to produce the desired result the cost may be substantial next we will talk about the iterative incremental model the product is divided into manageable pieces by the iterative incremental model for instance a feature that will be created during the iteration is chosen and put into practice phases such as requirement analysis design coding and testing are completed throughout each iteration iterations do not require extensive force let's take a look at the cycle after each iteration is finished a project is confirmed and sent to the client for review and feedback the newly incorporated feature is combined with customer feedback in the following iteration as a result the product gains features as iterations go and the final build has all of the products features now there are four phases in this model called inception elaboration construction and transition in inception phase the project's requirements and scopes are included in elaboration phase a product's working architecture which addresses the risks noted during the inception phase and also satisfies the non-functional criteria during construction phase the construction phase includes of the following the architecture is filled out with deployable code during the construction phase which is accomplished through functional requirement analysis design implementation and testing then comes the transition phase the product is introduced into the production environment during the transition phase now advantages and disadvantages any change in the requirement can be easily done and would not cost as there is a scope of incorporating the new requirement in the next iteration risk is analyzed and identified in the iterations defects are detected at an early stage as the product is divided into smaller chunks it is easy to manage the product now disadvantages to break down and develop progressively a complete grasp of a product is necessary now we'll talk about the big bang model the big bang model has no established process input and output consists of money and labor and the result is a developed good that may or may not be what the client requires let's take a look at the cycle big bang model doesn't need a lot of schedule or planning the developer analyzes the requirements writes the code and creates the product in accordance with this knowledge this model is only applied to modest projects the absence of a testing team and the absence of formal testing could lead to the project's failure now advantages and disadvantages for advantages it is an extremely basic model there is less need for scheduling and planning the developer has the freedom to create their own software now for the disadvantage large ongoing and sophisticated projects cannot be handled with big bang model and it is highly uncertain and dangerous lastly we have the agile model incremental and iterative models are combined to create the age oil paradigm this paradigm emphasizes flexibility throughout product development more so than requirements a product is divided into manageable incremental bills in age oil it is not created in its entirety in one sitting the number of features increases with each build the upcoming update expands upon earlier features let's take a look at the cycle sprints are the term used for iterations in age oil a sprint lasts about two to four weeks each print ends with the product owner verifying it before it is provisioned to the client with his or her permission customer feedback is used to make improvements and the following sprint will focus on his recommendations and enhancements now let's take a look at the advantages and disadvantages for advantages it gives you more freedom to adjust to the changes the new feature is simple to add customer satisfaction because consider their comments and recommendations at every level and for disadvantages there's inadequate documentation agile requires highly qualified and experienced personnel the project would fail if the customer was unsure of exactly how they wanted the final result to be now we have come to the conclusion for the project to be successfully finished adherence to an appropriate life cycle is crucial in turn this facilitates management each model of the software development lifecycle has pros and cons of its own the elements like requirement system complexity project size cost skill limitation etc can help establish the optimal model for any project spiral and agile models for instance are the best to utilize when a requirement is uncertain because the necessary adjustment may be easily accommodated at any stage and that's it for this video thank you just a quick info guys if you want to make a career in software engineering then intellipaat provides an advanced certification program on software engineering and application development by eni city council of iit guate and it is taught by iit guati professors and industry experts this course is designed to upskill and land your dream job you
_uQrJ0TkZlc,"Hi, my name is Mosh, and I'm going to be your instructor in this Python course. In this course, you're going to learn everything you need to get started programming in Python. Python is one of the most popular programming languages, and every day people use it to do cool things like automation, they use it in AI, as well as building applications and websites like Instagram and Dropbox. So if you're looking for a job, Python is for you. In this course I'm going to teach you everything  you need to get started with Python. We're going to talk about all the core concepts in Python, and then we're going to build three Python projects together. Here's the first project we're going to build. We're going to learn how to create this beautiful website for an imaginary grocery store. Here on the homepage we can see all of the products in the shop, and we also have an admin area for managing the stock. We're going to build this using a popular Python framework called Django.  Now if you have never built a website before, don't worry, I will teach you everything from scratch.  You're also going to learn how to use Python in machine learning, or artificial intelligence.  So you will learn how to write a Python programming that will predict the music that people like based on their profile. Just like how YouTube recommends videos based on the videos you have watched before. I will also show you  python to automate boring repetitive tasks that waste your time.  You will write a Python program that will process thousands of spreadsheets in under a second. I've designed this Python course for anyone who wants to learn Python. If you're a beginner, don't worry, I will hold your hand through this entire course.  You're not too old or too young, and Python is super easy to learn. You can write your first Python program in literally seconds. Plus I'm going to give you plenty of exercises to help you build your confidence writing cool Python programs.  My name is Mosh, I'm a software engineer with two decades of experience  and I've taught over 3 million people how to code. I'm super excited to be teaching you Python in this course. So I hope you stick around and learn this beautiful  powerful programming language.  In this tutorial I'm going to show you how to download  and install Python on your computer. So the first thing I want you to do, is open up your browser and head over to Python .org. On this page click on downloads,  here you can see the latest version of Python currently, at the time of recording this video the latest version is python 3.7.2.  Chances are in the future, when you are watching this tutorial, there is a newer  version of Python available, don't worry, all the materials you're going to learn in this course  will apply to the latest version of Python as well. So let's go ahead and download Python 3, alright now,  look at your downloads folder, here, we should have Python 3 installer simply double click that, if you're on Windows  you're going to see this check box here, add Python to python, this is really important, make sure to tick this box, otherwise you're not going to be able to follow this tutorial. If you're on a Mac,  you're going to see an installer like this, with this setup wizard we're going to install Python 3 on our computer. So simply click continue, and again,  and again, and agree with the license agreement, and  install it, this is going to take a few seconds so I'm going to pause the recording.  Alright, we have successfully installed Python 3 on our computer.  Let's close this. Alright, next we need to install a code editor, we se a code editor to write our code, just like how we use Microsoft Word to write documents, we use a code editor to write code. Now there are so many code editors out there, the one that I'm going to show you in this tutorial is PyCharm. That is one of the most popular code editors  for writing Python code. You can get it from jetbrains.com /pycharm. Now more accurately pycharm  is considered an IDE, which is short for integrated development environment. And that's basically a code editor on steroids,  it has some additional features that makes it really easy to write code. So let's go ahead and download PyCharm. Now here on the download page, you can see two versions of PyCharm, one is the professional addition  which has additional features and you have to pay for them. The other is the community edition, that is absolutely free, and that's what we're going to use in this tutorial.  So, go ahead and download this as well. Now, once again look at your downloads folder, once again you should have pycharm  so double click this, now if you're in Windows you're going to see an installation wizard, simply click next, next, next until you install pycharm. If you're on Mac you need to drag and drop this icon  onto the applications folder, so drag and drop,  alright, now let's double click this to run it,  the first time we run pycharm we're going to get this warning, because this is an application that we download from the internet. So let's go ahead and open it,  next you're going to see this dialogue box for importing some settings, leave this to do not import settings, it doesn't really matter. Okay, On this page, select I've never used PyCharm you can see some keyword shortcuts that might be useful in the future, just accept this, and down at the bottom,  click the next button. And then next again, one more time, and then finally start using pycharm.  So here's the main page of PyCharm every time you open it, click on create new project,  this is the location for our project, let's call our project Hello World. Now before click and create, expand  this item here, make sure that base interpreter is set to Python 3. Python interpreter is basically a program  that knows how to execute Python code, it will know how to interpret  or translate Python instructions into instructions a computer can understand.  Now, Mac computers, by default come with an older installation of Python, that's Python 2, it's considered legacy which means it's no longer maintained or supported. So earlier we downloaded  Python 3, make sure that this is set to Python 3, if not from this list, select Python 3.7.  Alright, now let's go ahead and create this project, Now here right click on Hello World folder and go to new  Python file, call this file app.py.  So by convention, all Python files should have this py extension. Alright, let's go ahead, now let's collapse this project panel by clicking here and write our first python program. Simply type print, pr int, all in lowercase, open and close parenthesis,  and inside these parenthesis, add quotations we can either use single quotes or double quotes, now in between the codes write your name. I am Mosh Hamedani, so here, so this is your first Python programming. With these piece of code you can print your name on the screen. Now to run this, go on the top, under the run menu, click run,  also note that there is a shortcut associated with this command, when I program I always use shortcuts because that increases my productivity.  So here on a Mac computer, the shortcut is control, option, and R. On Windows it's different. So let's do that, now it's asking where you want to run this, click on app,  down below, you should see this little terminal window, this is a little window into our program, so here you can see our results for output for our program. In the future as you learn more Python, you'll be able to build applications that have a graphical user interface, or gooey.  That is a little bit complicated, so for now we're going to use this little terminal window to see the results of our program. So as you can see my name is printed here, now as you print code, this window might get in the way so always resize it or minimize itty putting this icon here, so this was our first python program. Now if you didn't see the result I showed you in this video, use the comment box below and tell me what error you encountered, I'll do my best to help you move forward.  In this Python tutorial, we're gong to take this program to the next level and make it more interesting.  So I'm going to show you how to draw a dog hair. Now as part of this tutorial you will learn how Python code gets executed and you will also learn about a few programming terms. So press enter, and  on line 2 write another print statement, so print, open and close parenthesis, add a quotation, now here you want to draw a dog.  So, add an o, that is the head of our dog, followed by 4 hyphens. So this is the body.  alright, now one more time another print statement with quotations, now we need to draw the legs. So add a space.  Follow it by 4 vertical bars. So, like this,  so here's a little imaginary dot. Now let's  run this program and see what we get. So on the top right corner you should see this play button,  click that, there you go, so we have our name and  right below that we have our imaginary dog. Now what you need to understand  here, is that our python code gets executed line by line from the top. So earlier I told you about Python interpreter  that is the program that knows how to translate or interpret  our Python code into instructions that a computer can understand. So when we run this program by clicking this program here,  python interpreter starts executing or running our program  line by line from the top. So first it executes line 1,  then, moves onto line 2, and so on. So this is how python  programs get executed. Now let me show you something cool. Let's add  another print statement, with quotations now in between the quotations, add a star or an asterisk, like this. Now after the quotation and before the parenthesis,  add a space, once again, add an asterisk,  space, 10. What is going on here? Well,  anywhere we have quotations like here or here we're defining a string, a string is a programming term which means  a series of characters so here we have a string, we also have a string on line 3, as well as line 2 and line 1.  Now here, we're multiplying the string by  number 10. So this is the multiplication operator, just like the multiplication  operator we have in math. So with this piece of code we can draw 10 asterisks on the terminal, let me show you. So let's run this program one more time, there you go. So we have 10 asterisks. Now what we have here, this piece of code here,  is called an expression. An expression is a piece of  code that produces a value. So when Python interpreter  tries to execute line 4, first it will evaluate  the code that we put in between parenthesis, so we could evaluate our expressions  Our expression will produce 10 asterisks and then those asterisks will be printed on the terminal. Now as an exercise  you can use these print statements to draw another shape, you can draw a heart, a  ball, whatever you like. I will see you in the next tutorial.  One of the questions I get a lot on my channel is how long does it take to learn Python and become job ready? Well there is no single  answer. It really depends on you and how much effort and commitment you want to put  into this. But I would say if you spend 2 hours every day consistently, after about 3 months you should be able to write  basic python programs, but quite honestly, that doesn't get you a job.  In order to get a job, you need to specialize in one area, what do you want to use python for? Do you want to build web applications or desktop applications? Or do you want to use it in machine learning and artificial intelligence? So whatever you want to do you need to take additional courses.  For example if you want to become a web developer in addition to learning Python, you should also learn about html, some css, some JavaScript and Django which is a popular Python framework  for building web applications. Learning all these things would take you another  6 months, so in total you need 9-12 months to become job ready. At that point you can get a junior developer job with a  salary of about 50-60 thousand dollars a year. Now as you work more as you do more Python projects, your resume starts to build and  you can ask for $100,000 a year, or 120,000 dollars a year, depending on where you are, what company, what geographical area,  it really depends, there is no single answer. So are you excited to learn Python and get started on this career path? If you are, I would encourage you to make a commitment and spend 2 hours every day practicing  python. And use the comment box below and let me know why you are learning  Python, what do you want to do with it? What's your dream job? I would love to hear your story. In this Python tutorial, you're going to learn about variables, which are one of the most fundamental  concepts in programming, they're not specific to Python, they exist  in pretty much every programming language out there. We use variables  to temporarily store data in a computer's memory. Here's an example,  let's type price = 10, when Python interpreter executes this code, it will allocate some memory, then it will store  the number 10 in that memory, and finally it will attach this price label in that memory location. As a metahor imagine we have a box. In that box, we have number 10 and price is the label that we put on the box. Now we can use this label  anywhere in our program to access the value that we have in that box.  This is a very simplified explanation. So now, let's  print price on the terminal. Print, now this time we're not going to add quotations, because if we put quotations here, we will see the text  price on the terminal. Now the value of the price variable.  So, put it in quotations, and type price,  now, let's run this program one more time, there you go. So we see 10,  on the terminal. So this is how we define variables, we  start with an identifier which is the name of our variable, then,  an equal sign and finally a value. Now more accurately, when this number 10 is about to be stored in the memory, first it will get converted to this binary for presentation. So this number 10,  is in the decimal system which has all the digits from 0 to 9.  Computers don't understand all these digits, they only understand  0s and 1s. So when we store the number 10 in the computer's memory first it will get converted to it's binary representation which will be  a bunch of 0's and 1's, like 001, 001, whatever  I don't know. Then it will get stored in the computer's memory. So, let's take this program to the next level. On the second line we can  update the value of this price variable, so we can reset it to a new value like 20, now when we run our program,  we should see 20, because as I told you before Python interpreter executes our code line by line from the top. So first we set  the price to 10, then we reset it to 20, and finally we  print it on the terminal, let's run the terminal, there you go, so,  we see 20 here, okay? Now these numbers that we have here are whole numbers without a decimal point.  In programming, we refer to these numbers as integers.  But integer is a number without a decimal point. We can also use numbers with a decimal point for example on line 2, we can define another variable called rating and set it to number 4.9. Now in programming, we refer to this kind of number as  a floating point number of float for short. So we have integers  and floats. We can also define a variable and set it to a string, for example, name equals  Mosh, we also have another kind of value which is called boolean,  which can be true or false. They are line yes and no in English.  Here is an example, I'm going to define a variable, is underline published so we use an underscore to separate multiple words in our variables name. We set this to true, or false. These are boolean values. now note that Python is a case  sensitive language, which means it's sensitive to lower case and upper case letters.  So when defining variables we should always use  lowercase letters, but here false and true are special keywords in the  language, so if we spell it with a lowercase f, Python doesn't understand it. You can see we have a red underline here, which indicates an error.  Make sure to spell this with a capital F, or if you want to set this to true,  make sure the T is capital, so in this program, you're storing simple values in our computer's memory. Simple values can be numbers, which can be integers or floats or they can be strings or booleans. But in Python  we can also store complex values like lists and values. And that's what I'm going to show you in the future. So before going any further, I want you  to do a little exercise. Imagine we're going to write a program for a hospital.  So we check on a patient named John Smith. He's  20 years old and is a new patient. I want you to define 3 variables here,  for his name, his age, and another variable  for if this is a new or an existing patient. So pause the video and spend one minute on this exercise. When you're done, come back, continue and see my solution.  Alright, so here we need three variables, the first one is the patient's name,  we set that to John Smith. We can also call this full name, these are both valid names for our variables.  The second variable is for the age of our patient. So age  is 20, and finally we need a variable to tell if this is a new  or existing patient. That's where we can use a boolean value.  So, we define a variable, is new and  we set it to true.  So, you have learned how to print messages on the terminal window. In this tutorial, I'm going to show you how to  receive input from the user. So we're going to write a small program that asks  the user's name and then we'll print a greeting message customized for that user. So instead of print we're going to use input. Now both these input and print  are functions that are built into Python. As a metaphor think  of the remote control of the TV. On this remote control we have a bunch of  buttons, these are the functions built into your tv, you can turn it on, turn it off, change the volume and so on. In Python we also have  functions for common tasks such as printing messages, receiving input,  and so on. So we're going to use the input function, now whenever we have these parenthesis, we're going to say we're calling or executing  that function, it's like pressing a button on a remote control. So we're going to call the input function and in between parenthesis we want to add a string to print something on the terminal,  what is your name? With a question mark followed by a space. You will see why in a second. So this input function will print this message on the terminal, and then it will wait for the user to enter a value. Whatever the user enters this input function will return. So now we can get that value and store it in the memory using a variable.  So we get the result and put it in a variable called  name. Okay? Now on the second line we want to print a message like Hi John or Hi Mosh or whatever, so,  print, quotations Hi with a space, now after the quotation we want to dynamically print what we have in the name variable. So we had a plus sign and then name. So here we have Hi which is a string, we're concatenating or combining the string with another string, that is what we have in the name variable. So here's another example of an expression. Remember what is an expression? It's a piece of code that uses a value. So this expression concatenates or combines  2 strings. Let's run this program and see what happens. So run okay, here is a question, what is your name? Mosh,  now note that earlier we added a space after the question mark, we did this, so here in the terminal window the cursor is separated from the question mark, otherwise it would be so close. So let's type whatever here, plus enter, now we get this message, Hi, Mosh.  Now here's a little exercise for you. I want you to extend this program and ask two questions. First all the person's name and then their favorite color. And then print a message like Mosh likes blue. So pause the video, do this exercise and then come back and continue watching.  Alright, so here's the first question right after that,  all the input functions one more time, this time we're going to ask a different question.  What is your favorite color?  Now, we get the new value and store it in the variable called color, or you could call it favorite underline.  color. Either works. And finally we're going to change what we pass to the print function, so first we print the name  then we concatenate this with a string, here we're going to type likes, we also put one space before and  after likes, and once again we concatenate this.  With the favorite color. So, favorite color,  now let's run this program, so what is your name Mosh enter, favorite color, blue, enter,  we get this message, Mosh likes blue.  Hey guys Mosh here, I just wanted to let you know that you really don't have to memorize anything in this course because I've put together a cheat sheet with summary notes. So you can quickly review the materials in this course.  The link is below this video. So I have done my best to create the best possible Python course on Youtube. And I really appreciate it if you support my hard work by liking this video and sharing it with others, so they can learn as well. And be sure to subscribe to my channel, for more  tutorials like this. Alright, now, let's move onto the next tutorial.  In this Python tutorial, we're going to write a program that will ask the year that we were born in, and then it will calculate our age and print it on the terminal.  So, let's start with our input function, input  let's print birth here, followed by a colon,  and a space. Now let's get the return value and store it in a variable,  called birth_year.  So as I told you before, we use an underscore to separate multiple words Next, we need to calculate the age, so we define another variable called age, and here we do some basic math,  currently we are in 2019, so let's write an expression like this. 2019 - birth year. Now finally let's print  age on the terminal. Let's run our program and see what happens.  So, my birth year is 1982, enter,  oops, we got an error, what is going on here? So  whenever you see this message, that means there is something wrong with your program. With the information here, we can find exactly where the error occurred. So,  next to the file you can see the file that generated this error, in this case that is app.py. So currently our program only has a single file, but real complex programs often have hundreds or even thousands of files. So in this file,  on line 2, this is where we got this error, and right below that we can see the piece of code that generated this error.  So that is where we're calculating the age, and right below that you can see the type of error. In this case, we have a type error, and here's the message. Unsupported operand types for subtraction. Int and str. So int is short for integer and that represents a whole number  and str is short for string, so here we're subtracting  a string from an integer, and Python doesn't know what to do with it.  Let me explain. So I'm going to close the terminal window. So after the first line we executed we have this birth year variable set  to a string, so whatever we type in the terminal is always treated as a string, even if you type the number, in other words,  when we run this program, this birth year variable will be set to a string, with four characters.  1982. This string is different from the actual number 1982. One is an integer and the other is a string.  Right? So, back to line 2, where this error occurred. At run time, which means when we run our program this expression on the right side of the assignment operator is going to look like this. 2019 -  string 1982. Python doesn't know how to interpret or how to evaluate this expression. To fix this problem  we need to convert this 1982 into an integer and then we'll be able to subtract it from 2019 and that  is easy. So far you have learned about two built in functions  one is print the other is input. We have a few other functions for converting values into different types. So we have  int for converting a string into an integer, we also have float for converting a string into a float, or a number with a decimal point. And we also have bool for converting a string  into a  boolean value. So to fix this problem,  we need to go back on line 2,  and pass this birth year variable to the int function like this. int parenthesis, like this so we pass this string to the int function, int will convert it into an itneger and then Python interpreter will be able to evaluate this expression.  Now let's run this program one more time, so birth year is 1982 enter so I am 37 years old. In Python we have a useful function for getting the type of variables, for example, let's print the type of birth year, so right after line 1,  let's print, now here we're going to call another built in function,  called type, and now let's pass birth  year, okay, now similarly after line  3, let's also print the type of age, so print type of age.  Okay? So let's run our program, so birth year one more time, 1982, okay, here's the result so the type of birth year as you can see is a class of str or strings, we look at classes in the future so for now don't worry about them, and also below them you cans ee the type of the age variable is int or integer. So here's what you need to take away. Whenever you use the input function,  you always get a string, so if you're expecting a numerical value you should always convert that string into an integer or a float. So here's a little exercise for you. I want you to write a program  ask the user their weight and then convert it to kilograms and print it on a terminal. So pause the video, do the exercise and when you're ready come back to watch it.  Alright so let's use our input function and ask for the weight in pounds here we get the weight in lbs or pounds now we need to convert this into kilograms, it's very easy so we defined another variable weight_kg  we set this to weight_lbs times 0.45.  And finally let's print weight underline kg. Let's run this Python program and see what happens. So my weight is 160, alright once again we got an error,  can't multiply sequence by non int of type float. So as I told you before, this input function returns a string, so we cannot multiply a string by a float.  Python doesn't know what to do with it. So in this case, we should convert this number by an integer or float and then multiply by 0.45.  So let's call the int function.  And pass weight underline lbs. And run our program one more time, 160 okay, so I am 72 kg's.  In this tutorial, you're going to learn more about Python strings.  So I've defined this course variable and set it to Python for beginners now earlier I told you you could use both single and double quotes to define a string, but there are times you have to use a specific form, otherwise you're going to run into issues. Here's an example. Imagine you wanted to change this string into Pythons course for Beginners.  So we want to add an apostrophe, like this,  Course for Beginners. You can immediately say this is going crazy, because our string starts here and then terminates here,  all these characters that we have here after the second apostrophe Python interpreter doesn't know what they are. So to solve this problem we need to use double quotes to define our string so we can have  a single quote in the middle of the string. So let's change this to double quotes, now you can see it adds another double quote to close it,  you have to manually remove this, and also one more time at the beginning of the string, we need to add another double quote. Now you can see error is gone, so if you print course  we see Python course for beginners.  Beautiful. Now let's say we don't want this apostrophe here, so we have Python for Beginners, but we want to put Beginners in double quotes. Once again, if you add a double quote here Python interpreter gets confused because it assumes the second double quote indicates that end of the string, so it doesn't know what these characters are, so to solve this we need to change our double quotes to single quotes  like this. And then we can add double quotes in the middle of the string. Now let's run this program, there you go.  So we get Python for Beginners. So these are the cases for using single or double quotes. Now in all the examples I've shown you so far we only deal with short strings, but what if you wanted to define  a string that is multiple lengths? For example, what if you wanted to define a string  for the message that we send in an email. In that case we need to use  triple quotes. So. We delete this.  Now we add three quotes, so 1, 2, 3, there you go,  So, we have three quotes to start our string and three  to terminate it. Again these quotes can be single or double quotes.  Okay? Now, with this we can define a string that spans  multiple lines. For example, we can say Hi Jon  here is our first email to you. Thank you,  The Support Team. Like that. Now, let's run this program and here's the result. So, we get this beautiful multi line string. Now let's change this back to something simple  so, we can look at other characteristics of strings and Python.  So I'm going to use single quotes and set the course name to Python for Beginners. Now here we're going to use square  brackets to get a character and a given index in this string.  Let me show you. So to get the first character we use square brackets  and type 0. So the index of the first character  in the string is 0. In other words, this is how Python strings are indexed. 0, 1, 2, 3, 4, etc.  So the index of the first character is 0, the second character is 1, and so on. So let me delete this and run this program we get p. We can also use a negative  index here. And this is one of the features that we don't have in other programming languages  as far as I know. So we have negative index we can get the characters started from the end. So if I pass negative 1 here,  Assuming that 0 is the index of the first character  negative 1 is the index of the last character. So when we run  this program we should see s. Let's run it, there you go, we get s, if we pass negative 2, this will return the second character from the end. Let's run it one more time,  now we get R because that is the second character from the end.  Okay? So place close attention to this square brackets syntax  because quite often it's the topic for online Python tests  or university exams, so if you're preparing for a python test,  make sure to watch this tutorial one more time and understand exactly how this square brackets syntax works, we can also use a similar  syntax to extract a few characters instead of 1 character.  For example, if we type 0,  colon 3, Python interpreter will return all the characters starting with this index all the way to this second index, but it does not return the character at this index.  In other words, back to these indexes  so you have 0, 1, 2, 3, and so on. When you run this program.  Python interpreter will return the characters starting from the index 0 all the way to index 3,  but excludes the character and index 3,  so when we run this Python program we're going to see pint (?). Let me show you, so we're going to delete this line, run this program, there you go.  We get pint. Now here we also have default values for the start and end index. So if we don't supply  the end index, Python will return all the characters to the end of the string.  Let's take a look. So run this program, there you go, Python for Beginners. But if you change the start index to 1,  this will exclude the first character so when we run this program, we see ython so p is removed.  Okay? Now similarly we have a default value for the start index, so if we don't supply the start index  but add an end index like 5. Python interpreter will assume  0 as the start index, so, let's run this program, there you go, we get pytho.  Now what if we leave both the start and end index? Well, I told you? Now in this case 0 will be assumed as the start index, and the length of the string will assume as the end index. So with this syntax, you can basically copy or clone a string. In other words, if I define another variable here, let's call it another and set it to course  square brackets with just a colon, now this expression will return all the characters in the course variable so variable will be copy of our first variable. Let's take a look, so,  let's print another, and load our program there you go, we get Python for beginners. So once again the square bracket syntax is pretty important if you're preparing for online python tests, or college exams, make sure to watch this tutorial again.  Now here's a little exercise for you. I'm going to delete all this code  define a variable, called name, and set it to Jennifer.  Now when we print name  of 1: negative 1 what do you think we're going to see on the terminal? I want you to use your knowledge  to tell what we're going to see on the terminal, we're now running this program. So pause the video, think about it for a few seconds, then come back and continue watching.  So this expression will return the characters starting from  index 1 which is the second character all the way to the first character from the end, but excluding the character at this index. In this case, the first character from the in is r, so r will be excluded, in other words we're going to see all the characters starting from e all the way  to the second e. Let's take a look. So I'm going to run this program  there you go. This is what we get,  I hope you guessed it right.  In this tutorial, we're going to look at  formatted strings in Python programming language. Formatted strings are particularly useful in situations where you dynamically generate some text with your variables. Let me show you. Let's say we have two variables  first name and last name. So first we set this to John, and last we set this to Smith. Now it's better to call these variables first name and last name, because they're more descriptive. But here I'm using shorter names because I want you to see the entire code on display  screen. So let's say with these two variables, we want to generate some text like this. Jon, in square brackets  Smith is a coder. Let's say we want to print this on the terminal. How do we do this? Well, we define another variable  like message, now here we add the first name,  now we need to concatenate this, with a string that contains a space  and a square bracket next we need to add a last name,  then we need to add a string that contains the closing square brackets followed by is a coder okay? So, then,  if you print message and run this program  to see John Smith is a coder, right? Now,  while this approach perfectly works, it's not ideal  because as our text gets more complicated it becomes harder to visualize the output. So someone else reading this code, they have to  visualize all the string concatenations in their head. This is where we use formatted strings, they make it easier for us to visualize the output. So,  I'm going to define another variable, let's say msg short for message, and set this to a formatted string. A formatted string is one that is prefixed with an f. So f,  quotes. Now in between the quotes, first we want to add the value of the first name variable, so,  we add curly braces and here we type first. Next we add a space, we add our square brackets, in between the square  brackets, we want to display the last name so once again we add curly braces, and type last, and finally here we type  is a coder. So this is what we call the formatted string. With these curly braces, we're defining place holders or holes in our string, and when we run our program these holes  will be filled with the value of our variables. So here we have two place holders or two holes in our string. One is for the value of our first name  variable and the other is for the value of the last name variable.  But compare this formatted string with string  concatenation. With this formatted string we can easily visualize  what the output looks like, right? Now let's print this other terminal to make sure we get the same exact output. So, let's print message there you go. So Jon Smith is a coder. So to define formatted strings,  prefix your strings with an F and then use curly braces  to dynamically insert values into your strings.  In this Python tutorial, I'm going to show you some really cool things you can do with Python strings. So let's start by defining a variable,  course and we set that to Python for beginners. Now to calculate the number of characters in this string, you can use a built in function called len. So len we give it this course variable, and then,  we can print the result. Let's run this program,  so as you can see we have 20 characters in this string, this is  particularly useful when you receive input from the user. For example you have noticed that when you fill out a form online, each input field  often has a limit. For example, you might have 50 characters for your name,  so using this len function we can enforce a limit on the number of characters  in an input field. If the user types in more characters than we allow,  we can display an error, now, this,  len function is another function built into Python, it's  a general purpose function, so it's not limited to counting the number of characters in a  string, in the future when we look at lists, I want to show you that we can use this function to count the number of items in a list. So it's a general purpose function. Now we also have functions specifically for strings  for example we have functions for converting all these characters to upper case or lower case. To access these functions we use the dot operator.  let me show you. So first we type course,  then dot look these are all the functions  that are specific to strings. Now in more accurate terms,  you refer to these function as methods, this is a term  in object oriented programming that we want to look at in the future, but for now, what I want you to take away, is that when a function belongs to something else, or is specific  to some kind of object, we refer to that function as a method.  For example, here we have this function, upper, for converting the string  into upper case, now more accurately because this function is specific to a string, we refer to this as a method. In contrast len and print are general purpose functions, they don't belong  to strings or numbers or other kinds of objects.  So this is the difference between functions and methods. Now let's take  look at this upper method. So, let's print the results and we run our program, there you go,  you get all these characters displayed in uppercase. Now note this method  does not change or modify our original string, in fact  it creates a new string and returns it. So,  if we print our course variable right after we call the upper method, we can see that our course variable still  has it's original form, so let's run this program one more time, there you  go. Look, here is our original course variable, it's not modified.  Now similar to the upper method we have another method for converting a string into lower case. So let me show you.  Print, course.lower.  Now, let's run the program, so on the second line you can see,  all characters are in lower case. Now there are times that you want to find a character or a sequence of characters in a string.  In those situations you can use the find method. So let me delete these few lines. Call course. find here we pass a character, let's say  p, and this will return the index of the first occurrence  of that character, let me show you. So let's print the result we get 0, because the  index of the first capital p in the string is 0.  As another example, if we pass a lower case o here,  let's see what we get, we get 4 because  the index of this o here is 4. Now note that the find method is case sensitive, so it's sensitive to  lower case and and upper case characters. As an example if you pass an upper case  here and run this program, we get negative 1 because we don't have an upper case o anywhere in this string, okay? We can also pass a sequence of characters, for example, we can pass beginners with a capital B let's run this program, we get 11 because  beginners starts with index 11, now we also have method for replacing a character or a sequence of characters and that is called replace. So let's change find  to replace let's say we want to replace beginners with absolute beginners, so we add a comma to pass a second value to this function, or more accurately this method. We add a string,  here I'm going to pass absolute beginners.  Okay, now let's run this program, so, we get python for absolute beginners.  Again, this method like the find method is case sensitive so  if you pass beginners all in lowercase, this method is not going to find this exact word in our string, so it's not going to place it with absolute beginners. Let's take a look. So I'm going to run the program One more time, look, we still get python for beginners.  We can also replace a single character, for example we can replace capital p with let's say capital  j. Now when we run this program we get jython for beginners. So these are the find and replace methods and one last things I want to show you in this tutorial. There are times that you want to check the existence of a character or sequence of characters in your  string. In those situations you use the in operator,  so let's say you want to know if this string contains the word python.  We can write an expression like this. String python space in space course.  So we're checking to see if python is in course variable. And this is an expression that produces a boolean value, and I get true or false, so we refer to this expression as a boolean expression, now if we print this on the terminal,  we should get true, and by the way  I'm going to delete the second line, we don't need it anymore, so run the program  we get true, but if I change this capitol p to a lower case p and run the program we get false because we don't have is exact sequence of characters in our strings.  Now note that the difference between the in operator and the find method is that our find method returns the index of  character or sequence of characters but the in operator  produces a boolean value. Do we have this or not?  So that's the difference. Now let's recap all the cool things you learned to do with strings in this tutorial. We can use the len function to count the number of characters in a string, this is the general purpose function built into python, we also have specific functions  for strings which we refer to as methods, these include  upper for converting a string into uppercase you also have lower and title methods,  you learn about the find method which returns the index  of a character or sequence of characters, we have  the replace method for replacing characters and words in a string and finally  you learned about the in operator. So some characters  in a string.  So, you have learned that in Python programming language you have 2  types of numbers, integers which are whole numbers like 10, they don't have a decimal point, and floating point numbers or floats. Which are numbers with a decimal point. Now in this tutorial you're going to look at the arithmetic operations supported in python language these are the same arithmetic operations that we have in math, we can add numbers,  multiply them and so on. So let's look at a few examples,  we can print, 10 plus 3, so  this is the addition operator, we also have subtraction, we  have multiplication, we have two kinds of division,  here's one with a forward slash, let's run this program and see what we get. we get a floating point number. But we also have another division operator for getting an integer. So  if we add another slash here and run this program  we get an integer. We have  another operator called modulis (?) which is a percent sign. And this returns the remainder of the division. So when we run this program  we should get 1, there you go. And one last operator we have here is exponent which is the power.  So, that is indicated with 2 asterisks and this will return  10 to the power of 3. So let's run this program  we get 1000 so these are the arithmetic operators  in python programming language. Now for all these operators that you learned  we have an augmented assignment operator. That is very useful, let me show you. So let's say we have a variable  called x we set it to 10, now we want to increment this by 3, we'll have to write code like this. X we set this to x plus 3. So Python interpreter will add  10 to 3, the result is 13, and then it gets stored  into x again. So when we print x we should see  13, there you go. So this is how you can increment  a number, right? Now augmented assignment operator is a way to write the same code but in a shorter form. This is how it works. We type x plus  equals 3. What we have on line 3 is exactly  like what we have on line 2. So this is what we call the augmented assignment operator we have augmented or enhanced the assignment operator. Now in this particular  case we are incremented a number using the augmented assignment operator, but we can also subtract or multiply a number by a given value for example, let's delete what we have on line 2,  we can type subtract equals 3. So here we  subtracted 3 from x. When we run this program we should see 7,  there you go.  Now let me ask you a question, I'm going to clear all this code here to define x and set it to 10 plus 3 times 2. What do you think is the result of this expression?  this is a very basic math question that unfortunately a lot of people fail to answer.  The answer is 16. Because in math we have this concept called operator precedence which means the order of operations. So the multiplication operator has  a higher precendence which means it's applied first which means 3 x  2 is executed first, the result is 6 and then  its added to 10, that's why x showed up as 16 after we run this code, let's verify that. So, print x  run the program, x is 16. So this is what we call operator precedence, it's just a basic math concept.  It's not about python programming language. So all the other programming languages  behave the same way, so here's the order, first we have  the exponentiation which is the power, like 2 to the power of 3,  then we have multiplication or division  and finally we have addition or subtraction. This is the order of operations. Let me show you another example.  Here I'm going to add the exponentiation operator, so,  2 to the power of 2. Once again, what do you think is the result of this expression? Pause the video and think about it for a few seconds.  The answer is 22.  Because the exponentiation operator takes precedence, so first  2 to the power of 2 is executed, the result is 4,  then 4 is multiplied by 3, that is 12,  and finally 12 is added to 10. So x should be 22.  So let's run this program and verify this. So I'm going to delete these lines here. Run the program, there you go. X  is 22. Now let me bring back these rules here.  We can also use parenthesis to change the order of operations  so if we have parenthesis we always  takes priority. In this case we can add parenthesis  around 10 + 3, so this piece of 3 will be  executed first, the result is 13, then the exponentiation  operator will be executed, so 2 to the power of 2 is 4,  and finally 4 is multiplied by 13.  Now here is a little exercise for you. I'm going to set x to  parenthesis 2 + 3 x 10 minus 3. What is the result of this? Pause the video and think about it for a few seconds.  So you learned that parenthesis always  overrides the order, so this piece of code is executed first. The result of these 5. Then, between the multiplication and  subtraction, you know that multiplication takes precedence.  So next, 5 will be multiplied by 10, the result is  50 and finally we have subtraction. So 50 minus  3 will be 47. Let's verify this, print  x, run the program there you go, I hope you guessed it right.  So this is all bout operator precedence, it's a very important topic  and I see it quite often in Python tests. So if you're preparing for a Python test make sure to watch his tutorial one more time.  In this tutorial, we're going to look at a few useful functions for working with numbers  let's start by defining a variable like x and set it to 2  .9. Now to round this number we can use the built in round function, so we call the round function, give it x,  and then print the result. Let's run this program  so, we get 3, we have another useful built in function called  abs which is short for absolute, and this is the absolute function  we have in math, we give it a value and it always returns  the positive representation of this value, even if the value is negative. Here's an example. Let's call the abs function  and give it negative 2.9 When we run this program  we're gong to see 2.9 on the terminal. So let's go ahead  there you go. So absolute always returns a positive number.  But technically in Python we have a handful of built in functions for performing  mathematical operations, if you want to write a program that involves complex  mathematical calculations, you need to import the math module. A module in Python is a separate file with some reusable  code. We use these modules to organize our code into different  files. As a metaphor think of a super market. When you go to a super market  you see different sections for fruits and vegetables, cleaning products,  junk food and so on. Each section in the super market is like a module  in Python. So in Python we have this math module which contains a bunch of rustable functions for performing mathematical calculations.  So, let me show you how to use this module. On the top  we type import, math, all in  lowercase  with this we can import the math module. now math is an object like a string, so we can access it's functions or more accurately  it's methods using the dot operator. So if you type  math. look these are all the mathematical  functions available in this module. For example you can call the seal method to get the sealing of a number. So if you pass 2.9 here and then print the result we should see 3.  Let me delete all this other code here. Alright, let's run this program  there you go. So we get 3. Another useful method is the floor method, so let's give that a try, floor of 2. 9. What do you think we're going to get? We get  2. Now there are so many functions built in this module and we don't really have time to go through all of them. But let me show you how we can learn about them on your own.  Open up your browser and search for Python 3 math module. Make sure to add the version python 3.  Because the math module in python 2 is slightly different from the math module in  python 3. So python 3 math module,  now here you can see the documentation of this kind of module  let's go let's have a look, if you scroll down,  we can see the list of all the functions and their explanation.  So as an exercise I encourage you to have a quick look at this documentation. See what functions are there for you in case you need them.  In this tutorial, I'm going to talk to you about if statements in Python  if statements are extremely important in programming and they allow us to build programs that can make decisions based on some condition.  So if some conditions are true we're going to do certain things, otherwise we're going to do other things. Here's an example. Over here I've got this text file with a bunch of rules for our program. If it's a hot day, perhaps we want to tell the user it's a hot day, so make sure to drink plenty of water.  Otherwise, if it's cold, so here's another condition if this condition is true we're going to tell the user it's a cold day  so where warm clothes. And otherwise if it's either hot or cold, we want to tell the user it's a lovely day.  So let me show you how to write a program that simulates these rules. So,  back to our program here, we start by defining a boolean variable  is underline hot. We set this to true.  Next, we add an if statement, so if, here we need to add a condition, in this case we're going to use our boolean variable. So,  is underline hot. So if this values to true.  Then we're going to do certain things. In this case, we want to tell the user hey it's a hot day, drink plenty of water. So, back to our program  after our condition we add a colon, now,  note that when I press enter pycharm automatically indents  our cursor. Now any code that we write here will be executed  if this condition is true, otherwise it will be ignored. Here is an example. Let's write a print statement, here I'm going to use double quotes because I want to use an apostrophe in our string. So,  it's a hot day. Now let's press enter you can see the cursor is still indented, that means we can write more code  that we executed if this condition is true, in this case let's say we don't want to write any extra code, so to terminate this block  we need to press shift and tab, now the cursor is at the beginning of the line so lets write a print statement with a message like enjoy your day. Now when we run this program, because this condition is true, you're doing to say this message followed by this second message, take a look, so run, there you go, it's a hot day enjoy your day. But if I go over here and  change this boolean value to false and run the program again, our first message disappears and we only see the second message, enjoy  your day. So this is how if statements work. Now back here we can add another print statement let's say drink plenty of water.  Now because this spirant statement is also indented it will be executed if this condition is true. So I'm going to revert is hot to true  and run the program one more time. There you go, so  it's a hot day, drink plenty of water, and enjoy your day. Alright now let's add a second rule here, if it's hot we're going to execute these two lines, otherwise if it's not hot we want to print a different message. So here  we are moving an indentation and typing els  colon. Now when we press enter once again our cursor  indented so the code that we write here will be executed if this condition is not true. So here we can print  it's a cold day, print,  where warm clothes.  Now let's run our program one more time. So we get the message  about a hot day followed by enjoy your day. You don't see any message about a cold day. Now if we go back here on the top.  And change this boolean value to false and run our program  we see different set of messages. It's a cold day wear warm clothes and enjoy your day. But there's a problem with  our program. If it's not hot it doesn't necessarily mean that it's cold, it means it's a lovely day. So the absence of heat doesn't mean its cold.  Back to our conditions, here on line 4 we have this rule that says  if it's a cold day, then print these messages otherwise if it's neither hot or cold say it's a lovely day.  So, to implement this rule we need to go back and put  py and define another variable. So let' say  is underline cold we set this to true. Now here we need to add a second condition. So after our first if statement, we can use an el if statement  to define a second condition. So here's how it works. So,  el if which is short for els if or otherwise if, now here we add another condition, so,  is cold So if t's cold you want to execute these few lines. So let's cut these from here, and move them under our second condition  and finally if none of these conditions are true,  you want to print a different message. It's a lovely  day. So, right now,  is hot is false, is cold is true,  so when we run this program, python interpreter is going to execute the first  if statement, in this case because our condition is false, these two lines will be ignored, then Python interpreter will look at  line 7, it will evaluate this condition, in this case is cold is true so we're going to see these two messages on the terminal.  Now, in this case, because one of these conditions was true, this els statement will be ignored, so we are not going to see this message, and finally  as before, we are always going too see this message. So let's run our program, there you go. it's a cold day,  where warm clothes and and enjoy your day. Now,  back to the top, if we change is cold  to false it's neither hot nor cold so it's going to be a lovely day. Let's run the program, and here you go, it's a lovely day enjoy your day. So these are the basics of using if  statements. As you can see they are very useful in programming and with these we can build all kinds of rules into our programs. Okay here's an exercise or you. Imagine the price of a house is 1 million dollars.  Now if the buyer has good credit, they will need to put down 10 percent  of the price of this property otherwise they need to put down 20 percent  write a program with these rules an display the down payment  card for a buyer with good credit. You will see my solution  next.  Alright let's define a variable for the price of this house so price  we set this to 1 million so 1 with 6 0s.  Next we need a variable to tell if this buyer has good credit  so has good credit,  and we set this to true, now we need an if statement  so if has good credit has true  colon, here we need to calculate a down payment so the down_payment should be equal to 0.1 x the price. That is 10 percent of the price of this property. Otherwise colon the down payment should be 0.2  times price. Now finally we remove the indentation and print here we can use a form  of valid string, first we add a label, down payment  colon and right after that we add a placeholder  or a hole for our down payment variable. So curly braces  down payment. Let's run this program, so down payment for a buyer with good credit  is 100,000 dollars. Now let's improve this by adding a  dollar sign before this number. So back to our formatted string, just before the curly brace I'm going to add a dollar sign let's run this one more time, that is better.  In this tutorial I'm going to talk to you about the logical operators within Python. We use these operators in situations where we have multiple  conditions. Here is an example. Let' say we're building an application for  processing loans. If an applicant has high income  and good credit, then they're eligible  for a loan. So in this example we have two conditions, one is having  high income and the other is having good credit. So if both these conditions are true, then the applicant is eligible for a loan. So this is where we use the logical and operator.  We use this operator to combine two conditions, and by the way this is not specific to python programming language, pretty much any programming language  that supports if statements also supports the logical operators.  So, back to our program, let's define two variables,  has high income, we set this to true.  And another one has good  credit, we also set this to true, now our if statement  if has high income has true,  and has good credit is also true,  then we're going to print eligible  for null. So this is where  we're using the and operator. So if both these conditions are true  then this message will be printed. If one of them is false, we're not going to see  this message. Let's try this out. So I'm going to run this program  so we see it eligible for loan, but if we change  either of these conditions to false, and run the program again  look, the message disappears.  So this is the logical and operator. We also have the logical or, and we want to use that in situations where we want to do certain things at least one of the conditions is true, for example let's change  the rule for this program, such that if the applicant has high income,  or good credit, then they're eligible for a loan,  so if either or both these conditions are true then the candidate is eligible. Now back to our program we can  implement this rule by using the logical or operator. So we simply replace  and with or, now when we run this program we're going to see this message because at least one of our conditions is true,  let's take a look. So the applicant is eligible for a loan for a loan because they have good credit. If you change this to false  but set the other condition to true, we still see the same result, but if both these conditions are false  then we're not going to see this message anymore. So this is the difference  between these operators. With the logical and operator  both conditions should be true, with the logical  or operator at least one condition should be true we also have another logical operator called not and that basically inverses any boolean value we give it, if we give it,  we give it a true boolean value it converts it to false. For example  let's make up a new room, if applicant  has good credit and doesn't have  a criminal record then they're eligible for a loan. Let me show you how to implement this. So,  we go back to our program, in this example we don't need a  first variable for let's delete that. Let's set this variable to true we also define another variable like has criminal  record. We set this to false.  Now, we want to check to see if this applicant has good credit and not a criminal record. This is where we use the not operator.  So, if they have good credit,  and not criminal  record. So, in this example, has criminal record is set to false, when we use the not operator this basically gets changed to true, so we have two conditions that are true.  Here's ones and here's another one. So our applicant is eligible for a loan. And when we run this program we see this familiar message. However if an applicant has a criminal record, so let's change this to  true, now when we run this program we can see our applicant is not eligible because when we apply then operator on this variable, we'll get false. So true changes to false.  And we'll end up with two conditions, one that's true and the other is false. And that's why this message is not printed. So this is all about the logical operators in python.  In this tutorial I'm going to talk to you guys about comparison operators in Python. We use comparison operators in situations where we want to compare a variable with a value,  for example, if temperature is greater than 30, then we want to print it's a hot day. Otherwise, if it's less then 10, it's a cold day, otherwise it it's neither hot nor cold. And by the way I'm taking about celsius, not farenheit.  So, to build these rules into our program, we need to use comparison operators. Back to app.py, I define this temperature value, let's write an if statement, if temperature now we want to check to see if this is greater than 30, so we use  the greater than operator. If this is greater than 30,  we want to print it's a hot day otherwise, let's just print  it's not a hot day. Now,  when we run this program, we're going to see this second message because 30 is not greater than 30. So our first condition a value is to false. let's verify that. So run,  it's not a hot day. Now if you change the temperature to 35 and run this again,  we're going to see a different message, it's a hot day, so this is where we use comparison operators. Now what we have here as you know is an expression because it's a piece of code that produces a value. So more accurately this is a boolean expression. So this is the greater than operator,  we also have greater than or equal to, we have less then, less then or equal to,  here's the equality operator, so if the temperature equals to 30,  then you can say it's a hot day. Note that this is different from the assignment operator  that has only one equals sign. You can see that if we use only one equal sign here we immediately get this red underline because this is simply  an assignment statement. We're changing the value of the temperature.  you are setting the value of something else. So we don't have a boolean expression, you are not producing a  boolean value. Okay? So, our equality operator  has two equal signs and finally we have not equal which is an exclamation followed by an equal sign.  Now here's an exercise for you. You have probably seen that when you fill out a  form online, sometimes the input fields have validation messages,  for example, let's say we have an input field for the user to enter their name.  Now if the name is less then 3 characters wrong we want to display a validation  error, like name must be at least three characters,  otherwise, if the name is more then 50 characters long then we want  to display a different validation error like name can be a maximum of 50 characters. Otherwise if the name is between 3 and 50 characters then we just want to tell the user that name looks good.  So go ahead, and write a plan to implement these rules.  Alright let's define a variable called name and set it to let's say j. So we're assuming this is what the user types into an input field. Now, we want to get the number of characters in this string.  So we use the len function, right? Len of name. When we print this we get 1, right you have seen this before. Now here we want to use an if statement so if len of name is less then  3, then we want to print  name must be at least 3 characters now here we need a second condition  to check the upper limit. So el if len of name is greater than 50,  then we want to print a different message, name,  must be a maximum  of 50 characters.  Okay? And otherwise if else none of these conditions are true that means the name looks good. So,  print, name looks good. Let's  run our program. So in this case we get this message because our name is too short. Now if you go back here and  type something really really long. And then we run our program we're going to see a different message name must be a  maximum of 50 characters and finally if we type a proper name here like John Smith and run our program we get name  looks good.  Here's another good exercise that combines  many of the materials you have learned so far, so earlier you built a program to  convert someone's weight from pounds to kilograms. Now we want to extend this program  and allow the user to enter their weight in either kilograms or pounds and then we will convert it to the other unit. Here's how our program is going to work. So I enter my weight in pounds so 100 and 60 now it's telling me if it's in pounds or kilograms. So here I'm adding l to lbs or k for kilograms.  And by the way, this program is not case sensitive so when I enter a capital l or lowercase l it takes  it as pounds. Now it tells me ur set it to kilos. Let's run this program one more time,  this time I'm going to enter my weight in kilo's, so send it to is the weight and the unit is kilograms so k,  and it says you are 160 pounds.  So go ahead and spend a few minutes on this exercise, you will see my solution next. Alright first let's ask the user their weight. So we use the input function, weight colon we get the return value and store it in the variable called weight. Now the second question, so one more time we use the input function el for pounds.  Or k for kilograms. So,  let's get that too and store it in a variable called unit  now we need an if statement. So if unit  equals l then we need to convert this weight  into kilograms. However, with this implementation we are only allowing  the user to enter a capitol l, if they enter a lowercase l  this code is not going to work. So this is where we use the upper method of string objects so this unit is a string because as I told you before, the input function always returns a string.  So, we can use the dot operator to access all it's methods or functions, here we call the upper method, this will convert whatever the user enters to upper case and then we'll convert it  to a capital l. Now, if this condition is true,  then we need to get the weight and multiply it by 0,  .45 However, as you know this weight is a string object, and we cannot multiply a string  by a floating point number, we talked about this earlier in this course.  So first we need to convert this weight to a numerical value. So  right here, when we call the input function, we can get the return value and pass it to the int function. So,  we call the int function and give it the return value of the input function. Now, the in function will return an integer so we can store it in this weight  variable. So here's the converted weight, let's store it in a variable called converted,  then we print here we can use a formatted string, so we prefix this string with f ur we add curly braces to dynamically insert the value of converted variable. And finally we add kilo. Otherwise, if the unit is kilograms.  We need to divide the weight by 0.45. q So, weight divided by 0.45 and just to refresh your memory, this division operator returns a floating point number but if we use double slashes we'll get an integer.  In this case, we want to get a floating point number,  finally let's print a formatted string, ur  curly braces, converted  pounds. Okay? Now let's run this program and see what happens. So weight is 160 and lbs in and that equals to 72 kilos, perfect, if we run it one more time,  and enter 72 kilos  we get 160 pounds. In this tutorial I'm going to show you how to use y loops in python. We   use y loops to execute a block of code multiple times and there are often useful in building interactive programs and games. In a future tutorial I'm going to show you how to build a simple game using a y loop. So, let's get started with the basics, we write a y statement  and right after that, we type a condition followed by a colon as long as this condition is true the quote that we write  in this block will be repeatedly executed. Here is an example. We can define a variable like i, as in short for index and set it to 1. Now we set our condition to i less than or equal to 5, so as long as I is less then or equal to 5, we can print i,  on the terminal. And then we need to increment i,  by 1. So we set i to i plus 1. The reason we do this is that if we don't do this I will be 1 forever so we'll end up with an infinite loop. Because this condition will always be true. One is always less then 5, so in every iteration of this loop, we increment i by 1, so at some point, i is gonna be six and then that is when this condition will be false and then we'll jump out of this loop, okay? Now to demonstrate how everything works after this loop I'm going to add a print statement say done. So note that these two lines are indented so they are part of the y block.  Okay, now let's go ahead and run this program and see what happens. So,  take a look, we get the numbers 1-5 followed by done. So heres how this program gets executed first we set i to 1 now python interpreter executes line 2, this condition is true because i is less then 5,  so i is printed on the terminal and then incremented by 1. Then the control moves back to the beginning of the y loop. So it doesn't go to the next statement. So,  we come back here and now we are in the second iteration. In the second iteration i is 2, and because 2 is less then 5, our condition is still true, so i will be printed on the terminal, and once again it will be incremented by 1, so at some point i is going to be 6,  and that's when this condition will be false so our look will be terminated and this done message will be printed on the terminal. So this is the basics of y loops. Now let's make this program a little bit more interesting. Here we can write an expression like this. We add a string, and in this string we add an asterisk and then we multiply this string by i. So with this expression, we can repeat a string, when we multiply a string by a number, that string will be repeated. For example, if i is two, this expression will produce a  string with two asterisks. Now let's run the program and see what we get. So we see this little triangle  shape here. Because in the first iteration i is 1, so,  1 times an asterisk produces 1 asterisk.  In the second iteration i is 2, so when we multiply 2 by 1 asterisks, we'll get 2 asterisks.  In this tutorial I'm going to show you how to use a y loop to build  a guessing game like this. So we have this secret number which is currently set to 9. Now the computer is asking me to make a guess. So,  let's say 1 is not right because the secret number is 9, okay,  try again, 2, no it's not right, let's try again, so I only have three chances to make a guess. If I can't guess the number the program  tells me that  I failed. let's run the program one more time, this time I'm going to guess the number, it's 9, there you go, it says you in. So let's go ahead and build this program using a y loop. Alright, let's start by defining a variable to store our secret number so, we call the secret underline number and set it to 9. Now we need a while loop to repeatedly ask a user to make a guess. So while condition colon What is our condition here? Well we want to give our user a maximum of three guesses. So similar to the last tutorial, we can define a variable like I, set it to 0, and assume this represents the number of guesses the user has made. And then we write our condition  as i less then 3. Note that here I'm not using less then or equal to operator, because with this condition our loop will be executed 4 times, while i is 0, one, two, and three, so here we should use  the less then operator. Now if we give this code to someone else it's unclear what does i represent here, it's only in our head that i represents the number of guesses the user has made. So as a best practice, always use meaningful and descriptive names for your variables.  So it's better to rename this variable to guess, count. Let me show you how to rename. So right click on i variable,  and then go to refactor and  rename it. Look at the shortcut. On a Mac computer it's shift and f 6. Now in this dialogue box we can easily rename your variable and pycharm will update all the references to that variable so we don't have to manually update each instance, okay? Let's change this to guess_count enter, there you go, now that is better,  also it's better to store 3 in a separate variable to make our code more readable, because it's not quite clear what does 3 represent here.  So, let's define a variable called guess limit say to 3, and then we can change 3 to guess underline limit, now our code is more readable while guess count is less then guess limit, see it reads like a story this is how you should write code. Okay, so while this condition is true, we want toast the user to make a guess. So here  we use our input function, guess Now whatever the user enters comes out as a string so we need to convert it to an integer. So right here, we pass the result to the end function and then get it and store it in a separate variable called guess. So at this point the user made a guess, now we need to increment guess count so guess count we set it to plus equal 1 or  okay, now we need to check to see if the user will make the right guess. So here we need an if statement. If what the user guessed equals our secret number,  again see our code is so readable. It's like a story you can read it like plain English. So if this condition is true we want to  tell the user they won. So print you won now lets go ahead and run our program up to this point. So okay it's asking me to make a guess, I'm going to make  the wrong guess so one it asked me again, 2 one more time,  3, okay, what is missing in this implementation is the message that tells me that I failed. We're going to take care of it momentarily, but let's run the program one more time and make the right guess. So, 9 okay it says you won, but it's still asking me to make a guess, because our while loop is going to get executed 3 times. Look 1 and 2. So we need to change our program such that if the user makes the right guess, we need to terminate our while loop, we need to jump out of it. How do we do that? So, over here if the user makes the right guess, after we print this message we can use the brick statement to terminate terminate a loop, when python interpreter sees this, it's going to immediately terminate our loop, it's not going to evaluate this condition again.  Now let's run our program and see what happens. So, I'm going to guess the right number, you won and look, you are now asked to make two more guesses, beautiful. Now the last thing we need to add here is the message that tells the user that they failed if they could not guess the right number. How do we do that? Well in Python our while loops can optionally have an else part.  similar to the if statements. So earlier you learned that our if statements  can optionally happen else part. Here, so if this condition is true, do this, otherwise do something else. In this case our if statement doesn't have an else part. Now, similar to the if statements Our while loops, our while statements can also have an else part.  So, right at this level we can add an else block, so else colon.  And the code that we write here will get executed if this while loop completes successfully without an immediate  break. In other words. If the user guesses the right number, you break this loop, you jump out of it so the code that we write in the else block will not get executed.  But if the user cannot guess this number, you're never going to break out of this loop, so this loop will be executed to completion untill this condition become false. In that case, the code that we write in the else block will get executed, and this is the perfect opportunity for us to tell the user hey, you made three guesses but none of them were right. So, print, sorry you failed. Now, let's test the program one more time. So, guess 1, 2, 3,  sorry you failed, let's run it one more time. This time I'm going to make a wrong guess, and then the right guess,  we won and our loop terminated immediately.  Alright, now it's time for you to practice what you have learned so far.  So once again we're going to build a game this game is a simulation  card game. Now our game doesn't have a graphical user interface or gooey  and it doesn't really matter for now, our focus is entirely on building the engine for this game. So let's see how this works.  When we run this, we get this little symbol here, and our program is waiting for us to enter a command. If you type help either a lower case or upper case we get the list of commands that our program or our game currently supports. So we can type the start command to start our car, we can type stop command to stop our car, and quit to terminate the game. Any other commands that we type our program is going to tell us hey I don't understand that. For example, if I type asd here, it's going to say I don't understand  that.If you type start, we get this message,  car started, ready to go, if you type stop it  says car stopped, and finally if we hit quit our program terminates, this is a fantastic exercise for you to practice wha you have learned, so pause the video and spend 5-10 minutes to build this program.  Alright, we're going to start with a while loop with a condition  What is our condition here? We want to run this loop  until the user types quit. So we can define a variable or a story to command what the user enters, and then we can run this loop as long as the command does not equal to quit. So right before the loop, we define a variable, command, and initially we set it to an empty string. An empty string is a string that has no characters in it. We only have the quotes. So then we type out our condition as while command  does not equal to quit then do something.  Now immediately we have a problem here because we're assuming that the user  types the command in lower case, so if they type this in upper case they our program is not going to behave properly, so to fix this problem, you need to call the lower method of the string object and then compare the results. With this quit. You could also call this upper and then type quit in upper case. It's about our personal preference  in this demo I'm going to use lower case characters.  So, okay, now in this loop we need to ask the user to enter a command. So once again we're going to use our input function, we're going to add a greater then symbol followed by a space, whatever the user enters, we get it and store it in our command variable. Now apart from quit command, there are three other commands that we need to support. Start,  stop, and help. So here we need an if statement to compare what the user enters with one of the supported commands.  So, if command.lower equals start then you want to print the message  like the car started. So print the car started.  Ready to go, it doesn't matter,  now the second condition. What if its not start, maybe it's stop? So,  el if command.lower equals stop, there you go, then we print a  different message car stopped. Now look at our code. We have repeated this lower lower lower multiple times.  This is bad, in programming we have a term called dry, which is short for  don't repeat yourself. So whenever you have duplicate your code that means you're doing something wrong. So how can we solve this problem.  Well, instead of calling the lower method in each condition,  we can call it right here when we get the input from the user, so this input function as you know returns a string, we can immediately call the lower method on this string, and with this command  will always be in lowercase, so we don't need to call this method in every condition. Look,  we remove the duplication and also our conditions  are shorter and easier to read. There is also one more place  we need to modify so, it's right here. That is better.  Now, the third command. We need one more el if. If the command equals help, then,  we want to show the commands that we support. So,  here we're going to print a multi line string. So we use triple quotes like this, and  give the user a guideline like this. So start to start the car stop  to stop the car, and  quit to quit. Now finally we need  an else part, so if what the user enters is none of these commands,  we're going to tell them, hey we don't understand these,  else, colon print  sorry I don't understand that.  And by the way note that here becomes I'm using double quotes, I can easily use a single quote as an apostrophe, okay? So let's run our program up to this point and see what happens. Alright, let's type start car is  started, beautiful, stop, car is stopped, help,  we get this guideline, but there's so much indentation before our commands, we'll fix that in a second. And finally  let's test the quit command, oops, our program  didn't work properly. Here is the reason. With these if statements,  we're comparing the command with start stop, and  help. Anything else will end up here, so that's why our program says it doesn't understand that. So that's why our program  says it doesn't understand that command. However, after this el statement  the control will be moved to the beginning of the loop. At this point our command is quit, so our loop will complete and the program terminates. In other words when we run this program and type quit, our program actually quits but  we still see this message which shouldn't appear here. How can we solve this problem? Well, we can come back here and just before  the else block, add another el if, something like this. el if command equals  quit then you can immediately break.  This will solve our problem, but note that we have kind of repeated this expression in two places. The reality is that we don't really need this condition on the top, because with these if statements  well more accurately with this el if we can jump out of this loop and terminate  our program. So, we can simplify our condition to something like this. True. So while true means  this block of code is going to get executed repeatedly,  until we explicitly break out of it, okay? Now let's test our program one more time. So,  quit now our program terminates and we don't see that message  beautiful. So let's fix the last problem. You saw that when we  typed help, these guidelines appeared with so much in indentation, and here's the reason, look, right here in our code,  they are already indented. So when we use triple quotes, what we type here will be printed exactly as is. So, because we  have an indentation here, this indentation will also be printed on the terminal.  So, let's delete these okay, run the program one more time, type help,  the indentation is gone. Beautiful. Now here's a challenge for you. I want you to take this program to the next level. So right now if we type start we get this message car started. And if we type start again  we get the same message. It would be better if we got a message like car is already started so it doesn't make sense to start a car twice. Similarly, if we type stop it says car stopped, if we type it again we get the exact same message, it doesn't make sense to stop the car twice. So here's what I need you to do if the car is stopped and the user tries to stop it again,  the program should say hey, the car is already stopped, what are you doing? And similarly  if the car is already started and the user tries to start it again,  the program should yell at the user. So go ahead and make the necessary changes to implement this scenario.  Alright to add this to our program, we need  to know if the car is started or not. So there is one more piece of information we need to store in the memory. What is the kind of data we need to store here?  A boolean. Is the car started or not, it's a matter of yes  or no. True or false. So on the top, here we can define another variable like started and initially we set it to false. So the car is not started, right? Now when the user types the start command, here we need to check to see if the car is already started. If not the we'll start it  or otherwise we'll yell at the user. So in this block we'll write another if statement, if it's already started and we print car is already  started. Otherwise, so if you add an  el statement here. And at this point,  you set started to true. So we start  the car and we print this message, okay? Now we need to make a similar  change for the stop command. So if the car is already stopped we need to print a different message. If not started, so here we're using the not operator to see if the car is stopped. So if it's not started that means it's stopped, okay? So if it stopped we print car is already stopped with double p's, otherwise so else  we need to stop the car, how do we do that? We  set started to false. And then we'll print this message.  As easy as that. Let's go ahead and run our program.  So, initially our car is stopped. So I'm going to type  stop, it says the car is already stopped, so lets  start it, okay, now our car is started, let's start it one more time. The program is yelling at us. So we can not start the car twice. Beautiful. Now let's stop it it says the car is stopped, let's stop it one more time, we get this message  again.  In this tutorial, I'm going to talk to you guys about  for loops in python. In the last tutorial, you learned about while loops  you learned that we use while loops to execute a block of code multiple times.  In python we have another kind of loop, that is a for loop, and we use that and we use that to iterate over items of a collection, such as a string.  Because a string is a sequence of characters, so it looks like a collection  so we can use a for loop to iterate over each character in a  string and then do something with it. Here's an example. We type out for then we define a variable, this is what we call a loop variable. In each iteration, this variable will hold one item. So, let's call it item, in  here we type out a string like Python, and then  colon. So with this for loop we can iterate over a string and in each iteration this item variable will hold one character at a time in the first iteration it will be set to p then  in the second iteration it will be set to y, and in the third iteration it will be set to t and so on. So here we are inside our for block, because of the indentation here, so whatever we type here will be executed in each iteration, for now we can simply print this item  now let's run this program and see what happens. So you can see each character in this string is printed on  a new line. Let's look at another example. In Python we can define lists using square brackets, so let me remove this string from here, and define a list using square brackets,  a list is simply a list of items, a list of numbers, a list of  customers, a list of emails, products, blog posts, whatever.  So here we can define a list of names like Mosh,  Jon, Sarah, and then go ahead  and run our program so we can see in each iteration we get one name  and print it on a new line. We can also loop over a list of numbers, for example,  1, 2, 3, 4, let's run it, again we see each number on a new line, but what if we want a list of numbers? We don't to explicitly type out a list with let's say 100 or 1000 numbers, we don't want to type, 5, 6 7 all the way to 100. That is when we use the range function.  So, let me delete this,  In Python we have a built in function called range, for creating range of numbers. So, we give it a number, let's say 10,  let's run this program, now we can see here on the terminal we have 0 all the way to 9. So 10 is not included.  So basically when we call the range function, this range creates an object, it's not a list, it's a special kind of object we can  iterate over, in each iteration this object will spit out a new number. We can also work with a  range of numbers here, let's say you want to start  from 5, and go all the way to 10.  So, let's run our program, now we have the numbers  5, 6, 7, and 9. Also, this range function can optionally take a step, so we can pass two asa step to this function,  and when we run our program, we can see our first number is 5, now we go two steps forward to get 7,  once again we go to two steps forward we get 9 and that is the end of our range. So this is the basics of using for loops in python.  Now here's an exercise for you. I want you to write a program  to calculate the total cost of all the items in a shopping cart.  So let's say we have a list of prices like 10,  20, and 30, I want you to use a for loop,  to calculate the total cost of all the items in our imaginary shopping cart,  so calculate that, and then print it on the terminal. That's pretty easy. And you should do it in a couple minutes.  So as you learned we use for  loops to iterate over all the items in a  collection,  a collection can be a string, it can be a list, it can be a range object that is returned from the range function. Anything, any kind of object that has multiple items. So in this example we're going to use a for loop to iterate over the list of prices. So for item in  prices, colon, and by the way this loop variable we don't have to call this item, can call this anything. For example, in this case we can rename it to price. So for price,  in prices. Now in each iteration this price will hold one value. In the first iteration it's going to hold 10, then it's gooing to be 20, and then it's going to be 30. So we need to define  another variable to calculate the total so we define that outside of our for loop, let's call it total and initially we set it to 0. Now in each iteration we get the current price and add it to the total so we write total equals total plus price  or as you learned earlier we can use the augmented  assignment operator to simplify this code.  So, after our for loop. This total variable has  a total of all the prices we can simply print it here,  or we can use a formatted string, so a string  prefix with f, the other label, like total,  curly braces to dynamically include some value in our string,  in this case our total variable. So let's go ahead  and run this program, there you go, so the total cost of all the items in our imaginary shopping cart is 60.  In this tutorial I'm going to talk to you guys about nested loops in python. Using a nested loop basically means adding one loop inside of another loop, and with this technique we can do some amazing things for example we can easily generate a list of coordinates. So, a acquired (?) as you know is a combination of x and y  value. Let's say 0 and 0. Now let's say you wan to generate a list of coordinates like this. So we have 0 and 0,  then we'll have 0 and 1, then 0 and 2, next we're going to change x, so we're going to use 1 for x,  and once again we're going to use these 3 values for the y coordinates so 1 and 0 then 1 and 1  and 1 and 2, you got the point. We can easily generate these coordinates using nested loops. Let me show you.  So, we start with one loop, let's say for x in range 4. With this loop, we can generate value  for the x coordinate. Let's print this on the terminal, Okay, so, we get the values, 0  to 3. Now for each x, like 0, we  should generate a few y values. So that is where we use a nested loop. So inside of this loop we're going to add another loop, so instead of just printing x first we want to add  another loop, for y in range  let's say 3, now we can print x and y together  so, print, here, we use a formatted string.  to display coordinates like this. So we add parenthesis  inside of this parenthesis first we need to add x so curly braces x then a comma followed by  another set of curly braces, and y,  let's run this program and see what we get.  There you go. So, we have these coordinates  0 and 0, 0 and 1, 0 and 2, then you have 1 and 0 1 and 1 1 and 2 and so on. So let me explain exactly  how this program gets executed. So in the first iteration,  of our outer loop, x is 0. Now we are on line 2, here we have a new loop which we call an inner loop. In this inner loop, in the first iteration y  is going to be 0, so we print 0 and 0 on the terminal. Now the control goes back to line 2 or our inner loop. In this second iteration y will be set to 1, but we are still in the first iteration of our outer loop. So  x is still 0, but now y is incremented to 1.  So that is why we see 0 and 1 on the terminal.  Once again, the control goes back to line 2, we are in the third  iteration of our inner loop, so this will continue until our inner loop completes. That is when y reaches 2 because  this range function generates number 0 to 3 but not including  3. So we'll have 0 1 and 2. After this inner loop completes,  then the control goes back to line 1, and at this point we're going to be in the second iteration of our outer loop. So x will be  1, then the control will be moved to line 2, or our inner  loop, at this point, this range function is going to generate the numbers 0 to 3 one more time. So this inner loop will be executed 3 times. And then we'll go back to our outer loop. So this is how nested loops get executed.  Okay, here's an exercise for you, but this one is a little bit  more challenging then the exercises you have done so far. So I really don't  expect you to do it, but if you do it, wow, I will be so proud of you,  so see what I've done here? Using nested loops,  I've written some code to draw this f shape, can you see that? So I let me give you a hint, first of all we have this list, called numbers, in this list we have these values,  5, 2, 5, 2, 5, 2. These values determine the number of x's we have in each line. So,  for example, the first item in this list, this tells us that we should have  5 x's on the first line. There you go, so 1, 2, 3,  4, 5, on the second line we're going to have 2 x's,  on the third line we're going to have 5 x's like this.  So I've written code to convert a simple list of numbers into a shape like this. Now here's a tip for you.  Using your for loop you need to iterate over this list. In each iteration you get one number, this determines the number of x's to be displayed on that particular line. So if you want to cheat,  you can get this number and multiply by a string that contains x,  so if you multiply x by 5, we'll get 5 x's, that's not what  I want you to do. I want you to use an inner loop here to  generate a string that contains 5 x's. So imagine  in Python we cannot multiply a string by a number so to solve this problem we need a nested loop. So go ahead and spend  five minutes on this exercise. And by the way, do your best to solve this. It is a little bit challenging, but it's not extremely difficult. It just requires a little bit of focus. You'll see my solution next.  Alright so first we need to iterate over all the items in this list. So for item  in numbers, or, you could rename this variable  to x_count. That is the number of x's on each line. Okay? Now I told you that if you want to cheat you can write code  like this. Print x times  x underline count. If you run this program we get the same  output. So this is the beauty of Python, with Python we can write expressions like this, we can multiply a string by a number to repeat it. A lot of other programming languages don't support this feature. But for this exercise, I wanted you to imagine that we don't have this feature in Python  so you will have to use an inner loop to solve this problem. Here's how it works. In the first iteration, x count is going to be 5. So we need to generate 5 x's. How can we do that? Well, let's say we define a variable called output and initially set it to an empty string. Now we need to add 5 x's to this string. So,  we can use another loop for count in range,  of x underline count. So we're using the range function to generate a sequence of numbers from 0 up to x count. So in our first iteration x count is going to be 5, so range of 5 would generate the numbers 1, 2, 3, 4.  So this inner loop will be executed 5 times.  That is exactly what this count represents.  So now in each iteration we simply need to append an x to our output variable. So we set output, plus, equals x,  and then after this inner loop we simply print  the output. With his we'll print 5 x's on  the first row. Then we go to the second iteration of our outer loop.  At this point x count is going to be 2, now on line 3, we're going to reset our output variable to an empty string. So we start over. Then we go to our inner loop,  this loop will be executed 2 times, so we'll append to x's  to the output variable and then print it, as simple as that.  So see, it wasn't really that difficult, but it was slightly more difficult then the previous exercises. So let's run this program, there you go.  Now if you're adventurous, I want you to modify the values that we have in our numbers list, to print and l here.  Now in this tutorial we're going to take a closer look at lists.  So, I'm going to define a list of names, let's send them to John Bob Mosh  Sarah and Mary. So,  if you print this list here, what we see on the terminal look exactly like how we define our lists we have square brackets, and in between these square brackets we have our item our items, so we have 5 strings in this list.  So we can also access an individual element using an index just like how we can access an individual character in a string using an index.  So, here we type out square brackets,  and specify an index. The index of the first item in this list  is 0. So, let's run this program, there you go,  we get Jon now if you want to print out the third element in this list it's index is 2, so names of 2,  returns Mosh, now we can also pass a negative index here, so negative 1, refers to the last item  in this list, that is Mary, let's run the program,  there you go, we see Mary, if you pass negative 2, this returns the second item from the end of the list. So let's run the program, there you go, we get sarah, so this is exactly like accessing  individual characters in a string. We can also use a colon to select a range of items, for example if  you pass 2 colon. This will get all items starting from the index of 2, that is Mosh here all the way to the end of the string. So let's run this program there you go. We get this list with 3  items, Mosh, Sarah, and Mary. We can also specify  an end index, let's say 4, so this will return all the items up to this index, but it doesn't include the item at this index. So when we run this program we only see Mosh and  Sarah, the item I've indexed 4which is the 5th element or 5th item in this list is not returned. So Mary is not returned. And also here we have default values, so if you leave out the end index this expression is going to return  all the items starting from the index of 2, to the end of the list or if you leave out the start index, this expression asumes 0 as the default index, so it will return all the items from the beginning to the end of the list. And by the way,  just like strings, these square brackets here, don't modify our original list, they simply return a new list. For example, if we pass 2 here, you can see this returns a new list with 3 items.  So if you go back here and print our original  list of names right after you can see it's not affected.  So here we want to use square brackets with a colon to select a  range of items, we get a new list, and by the way we can also  modify any of the elements in this list. For example let's say we made a mistake and the first item shouldn't be john with an h,  so we want to remove the h, that is very easy, so we access it,  using an index that is names of 0, and we set it to a new value like this. Now, let's print our list  so, you can see the first item in this list  is now data. So this is the basics of lists. And here's a  exercise for you. I want you to write a program to find the largest number  in your list. This is a fantastic exercise for beginners, so go ahead and  spend a few minutes on this, then come back and continue watching.  Alright, let's define a list of numbers, numbers, with a bunch of random numbers 3, 6, 2, 8, 4 and 10.  Now to find the largest number in this list. We need to define another  variable let's call it max, this variable will hold the largest number, now initially you want to assume  the first item in this list is the largest number. So we set max to numbers of 0. We're only assuming that the first item  is the largest number. Chances are our assumption is wrong. So we need to iterate over this list, we need to loop through it, get each item and compare it with max. If it's greater than Max, then we need to reset max to that number. So in the first iteration we get 3, and max is also 3. Is 3 greater than 3. No, so we move on, we get the second number, is  6, greater than 3? It is, so we need to reset max  to 6. Once again, we continue, we get 2, these two greater than 6, no it's not, so we move on, then we get 8,  is 8 greater than 6? It is, so we should reset max to 8.  That is pretty easy. So here we need a for loop, for number in numbers colon  now we need too heck to see if this number is greater than max,  so, if number is greater than max,  max colon then we need to reset max, so max to this new number, that's all we had to do. So, let's print max, and run our program we can see the largest number in this list is 10.  It doesn't matter whether this number is at the end of the list or the beginning.  So if I move 10 and put it right at the beginning  we should still see the same result. Let's run our program, we still see 10, if I put this somewhere in the middle, our program should still work. Let's put it right after 2.  Run the program, we still get 10.  In this tutorial I'm going to talk to you guys about two dimensional  lists in python. Two dimensional lists are extremely powerfully and they have a lot if applications in data science and machine learning. Here's an example, In math we have a concept called matrix, which is like a rectangular array of numbers, let me show you. So we have 1, 2, 3, 4, 5, 6, 7, 8, 9. So we have a rectangular array of numbers. You have rows,  and columns. So this is a 3 x 3 matrix  in math. Now we can model this in python using  a 2 dimensional list. A 2 dimensional list is a list where each item in that list is another list. So, you want to define a matrix. We set it to a list, each item in this list, is going to be another list, and that list represents  the items in each row. So, the first item in our list is going to be another list, and in this other list we're going to have the values 1, 2, and 3. Now the second  item in our matrix list, once again, we have a list,  this list represents the items in the second row. So,  4, 5, and 6, and finally 7, 8  9. So as you can see we have a 2 dimensional list Each item in our outer list is another list.  Okay? So, this is how we can implement a matrix in python, now to access an individual item in our matrix,  once again we use square brackets, let me delete this stuff,  alright, so how do we access 1 here,  well, you start with our list then we add square  brackets first we need to go and get the first item in this list.  Right? So we pass 0, now this expression  returns another list. That is the inner list. In this list,  let's say you want to access the second item, so,  once again we add square brackets, and we pass 1, that  is the index of 2 in this list, alright.  So if we print this on the terminal  we get 2. Okay? So using 2 square brackets  we can access individual items in our matrix, and  also we can modify these values using this syntax, so,  before printing this, let's change this to 20, so matrix of 0, and 1, let's change it to 20,  and then print it, there you go, it's modified, now here you can also use nested loops to iterate over all the items  in this matrix. Let me show you. So,  we start with a rows for the rows in matrix,  so with this loop, we are iterating over our Matrix list, in each iteration row will contain 1  list, 1 item, okay? Now, here we need to use an inner loop. So we need to loop over this row which is a list of items. We can type out 4  item in row colon and print  item. Okay? So, let's run this program,  there you go, we get all the item in our list. Hey, I just wanted to make a quick announcement. In case you haven't seen my website yet, head over to codewithmosh.com this is my coding school, where you can find plenty of courses on web and mobile application development. In fact recently I published a  comprehensive python course that goes way beyond this beginners  youtube. And if you're serious about learning python and getting a job, I highly encourage  you to enroll in this course. Just like this tutorial you can watch it anytime,  anywhere as many times as you want, and you will also receive a certificate  of completion that you can add to your resume, and the course comes with a 30 day money back guarantee, so if you're not happy we'll give all your money back,  no questions ask. The price for this course is 149 dollars, but the first 200 students can get it for only 15 dollars. So if you're interested,  the link is below this video, click the link, and get started. In this tutorial, I'm going to talk to you guys about the list methods, or list functions. These are the operations that we can perform in a list. So let's define  a list of numbers, here we pass a bunch of random numbers, like 5, 2, 1, 7, and  4. Now there are a number of things we can do with this list, we can add new items to it, we can remove existing items, we can check for the existence of an item  these are the operations that we can perform on a list. So,  the we type numbers, we can see all these functions or more accurately  the methods that are available in our list objects.  So we can call the append method to add a new item to this list. Let's say 13. Actually, no it's not a good number.  I'm joking I'm not superstitious, so let's add 20, it doesn't really matter and then print our list  when we run the program we can see 20 is added at the end of this list  but what if you want to add a number somewhere in the middle, or at the beginning of our list? For that we use a different method, that is called insert. So, insert, now this method takes 2 values, let me show you. So when we open parenthesis  look at this little tool tip above the insert method.  You see the first value that we need to pass here is an index, so this is the index at which we want to insert this new item. Let's say we want to add an item at the beginning of our list, so we passed our index position  of 0, and then the second value is the actual  object we want to add to this list. Let's say we want to add the number 10,  now when we print this list you can see that the number 10 is placed at the beginning of the list and  all the other items are pushed to the right. We can also remove an item so we call remove and pass the item that we want to remove 5. Now we print our list so we see 5 is gone, and we have 2, 1, 7, 4. If you want to remove all the items in the list, you can call the clear method, so, clear  this method doesn't take any values, so, we simply call it and it empties our list, all the items are removed.  We also have another useful method called hop,  and with this we can remove the last item in a list.  Let me show you. So, we run our program, you can see the number 4 is removed from the end of our list. Now if you want to check for the existence of an item in our list, you can call the index method.  So, we call index and pass a value here, like 5 and this returns the index of the first  occurrence of this item. So let's print this on the terminal.  We don't need this line anymore. So the index of 5 is 0. What if we pass a number that doesn't exist in this list? Let's say 50? Run the program, we get an error. We get a value error. 50 is not in the list. There is also another way to check for the existence of an item,  we can use the in operator. So, let me show you we type our 15 in numbers,  earlier we used the in operator with a string, we check for the existence of a character or a sequence of a character in a string, now here we're checking for the existence of 50 in the list of numbers, so let's print this, we get a boolean value,  false, so unlike the index method, this expression,  doesn't generate an error, so it's safer to use this. We also have another method for counting the occurances of an item, let's say we have  another 5 over here.  Now we can call numbers.count and pass 5 and this should return 2 because we have 2 5s in this list. Take a look. There you go. That is pretty useful now if you want to sort your lists you can call sort method. So, we call the sort method here, this method doesn't take any values so,  look at he return value, that is none, none is an object in python that represents the absence of a value. So this sort method doesn't really return any values it simply sorts this list, in place, so instead of printing the return value oft his method, we simply call it to sort our list and then print our list. Take a look.  Now, all the items are assorted in ascending order. We can also sort the items in descending order, so after we sort the list  we can call the reverse method. We can simply reverse our list. Now let's go ahead and run our program, take a look. Our numbers are sorted in descending order.  And one last method I want to show you here that is pretty useful is the copy method. So copy, with this method you can get a copy  of our list. So let's define another variable called numbers 2,  now numbers 2, is a copy of our original list. So if you make any changes to our original list, if you add new items to it, if you remove  existing items, these operations are not going to impact our second list.  Let me show you. So after we show you a copy of our numbers list let's add a new item to this list, so numbers.apphend  ten. So the first list is updated, so now we have a  new item in our first list, then lets print the second list. Take a look, we don't have the number 10 here, because these are 2 independent lists. So these are all the operations  that we can perform on lists. We can add new items to a list, we can remove exxisitn items, we can check for the existence of an item, we can sort  our list, and copy them. Now here's an exercise for this tutorial,  I want you to write a program, to remove the duplicates on our list.  Again, this is a fantastic exercise. So spend a few minutes on this and then come back and continue watching.  Alright let's say we have a list of numbers with a bunch of duplicates. So 2, 2, 4, 6,  6, 3, 4, 6, 1. We want to remove the duplicates. So we need to define another list let's call that new list. Initially we set it to an empty list. Then we need to iterate over our first list, get each item, and if we don't have that number in this unix list, then we'll add it to this second list.  As simple as that. So, for number  in numbers, now we need to check to see if we have this number in the second list. So we use the in operator. If number not  in units so if we don't have an operator in this units list, then we'll need to add it, so units. apphend number, that's all we have to do. So, let's go ahead and print the units list there you go. So you have 2, 4,  6, 3,and 1. The duplicates are removed.  In this tutorial I'm going to talk to you guys about another important structure.  in Python called tuple. Tuples are similar to lists so we can use them to store a list of items. But unlike lists we can not modify them, we cannot add new items, we cannot remove existing items, we tuples are immutable. We cannot mutate or change them. So let me show you. So I'm going to start by defining a list of numbers,  1, 2, 3, 4, so we use square brackets to define lists and  parenthesis to define tuples, so if we change this to parenthesis, 1, 2, 3. Now we have a  tuple. So if we type numbers. look here we don't have the append or insert methods, so we cannot add new items to this tuple. We also don't have remove clear and pop, we cannot remove any of these items here. We only have two methods, count,  and index. We use count to count the number of occurrences in an item,  and index, to find the index of the first occurrence,  of an item. So we can only get information about a tuple, we can't change it.  And by the way, these other methods that you see here, they start with two underscores, we refer to these as magic methods, they're more of an advanced topic, so they go beyond the scope of this tutorial. If you're interested to learn bout them. You can get my python course, I've covered them in detail. So similar to lists you can address individual items using squre bracketts,s o we can get the first item like this and then print another terminal, there you go, the first item is 1,  but if you try to change the first item we'll get an error, so,  numbers of 0, we set it to 10 and run our program  there you go. We get this type error, because the tuple object does not support item assignment. So we cannot  mutate or change tuples, they are immutable. Now practically  speaking, most of the time you'll be using lists, but tuples are also useful. If you want to create a list of items and make sure  no where in your program you accidentally modify that list, then it's better to use a tuple,  In this tutorial I'm going to show you a powerful feature we have in python called unpacking.  So lets find a tuple called coordinates and here we pass 3 values, 1, 2, 3. So you imagine these are the coordinates for x y and z. Now let's say we want to get these values and use them in a few expressions, a few complex expressions in our program. Maybe we want to include them as part of a large complex formula. So together we'll have to write code like this, coordinates of 0, then let's say we want to multiply this by coordinates of 1, and then multiply it by coordinates  of 2, our code is getting a little bit too long, this is just a very simple example. But let's say we want to use these values in quite a few places  in our program, a better approach is to get these values and store them in separate variables like we can get coordinates of 0, and store it in x, then you can get coordinates of 1 and store it in y.  And similarly we get coordinates of 2,  and then store it in z. Now we started repeating coordinates of 2 or coordinates of 0 multiple times, we can simply work with these variables, x times y times z, that is better.  Right? So nothing new so far. But in Python we have a powerful feature called unpacking and with that we can achieve  the same result with far less code. So we can define our variables  x, y, and z. And set them to our tuple. What we have on line 6 is exactly identical to what we have on lines 2-4. So this is a shorthand to achieve the same result. So let me delete this and explain how this code works. When Python interpreter sees this statement, it will get the first item in this tuple and assign it to the variable. Then it will get the second item in this tuple, then similarly we get the third item in this tuple and assign it to the third variable we have here, so we are unpacking this tuple into 3 variables. Now if we print x you can see x  is 1, similarly y is 2, there you go.  So this is unpacking. And by the way this is not limited to tuples, we can use this feature for lists as well. So, if I change parenthesis to square brackets, now  coordinates is a list, so we can unpack our list into 3 variables  now we run our program we can see y is 2. In this tutorial I'm going to talk to you about dictionary  in python. We use dictionaries in situations where we want to store information that comes as key value pairs. Here's an example. Think of a customer. A customer has a bunch of attributes like name, email, phone number, address and so on. Now each of these attributes has a value.  For example the name can be jon smith the email can be jon@ gmail.com the phone can be whatevr so what we have ere is a bunch of key value pairs. So in this example, our keys are name, email, and phone,  and each key is associated with a value. So this is where we use  a dictionary. With a dictionary, we can store a bunch of key value pairs.  So let me show you how to define a dictionary in python.  Back to our program, I'm going to define a variable, customer,  and here we set it to curly braces. With these curly braces we can define dictionary. In this example we have an empty dictionary that doesn't have any key value pairs. Now we can add one or more key value pairs in between the braces. So let's add a key value pair here, I'm going to set the key to a  name, and  the value to John Smith, then we add a comma, to add another key value pair. So let's set age to  30 let's add another key value pair is  underline verified and we set this to a boolean. Now what matters here is that these keys should be unique. So if I add another key value pair here,  set age to 40, now look pycharm has highlighted the age key, because we have duplicated that and that's not allowed. So each key should be unique in a dictionary, just like,  the dictionaries we have in the real world, in a real dictionary we have a bunch of words  and they're definition each word is only listed once in a dictionary. We don't have the word book twice. So let's delete the second duplicate key value pair, so the keys should be unique, and in this example, I'm using strings, but they can also be numbers, we're going to look at that later, but the value can be anything, it can be a string, a  number, a boolean, a list, literally anything. Now we can access each item in this dictionary  using square brackets. So, we type customer,  square brackets and then specify key like name and this will return the value associated with the name key. Let's print it on the terminal, have a look, there you go, so, the name is John Smith, now what if we pass a key that doesn't exist, lets say first date. You run the program, you get a key error because we don't have a key called birth date. Also, if we spell name with let's say a capital N, we get the same error because we don't have a key with the exact same sequence of characters in this dictionary. Now to get around this we can use the get method, so instead of using the square brackets  we call the get method and specify the key Now if you use a key that doesn't exist here, it doesn't yell at us. For example,  if you pass birth date it simply returns the non value. Earlier I told you that none is an object that represents the absence of a value. So instead of getting a key error we get none and we can also option supply a default value, for example, if this dictionary doesn't have this key, we can supply the default value, let's say January 1st 1980. Let's run the program  now instead of getting none we get this default value.  So, this is how we can access the value associated with the key in a dictionary. We can also update these values for example  before a print statement we can write code like this, customer of name, let's update the name to jack  smith, now this little warning is telling us here we can put jac smith here instead of defining it once, and then update it. Don't worry about them, it doesn't really matter. Now with this line if  we print the name of this customer, we should see jack smith, let me show you. So, I'm going to use the square bracket notation again, let's print the name of the customer you can see that is updated here,  we can also add a new key here, let's set the birthdate to some value like january first 1980. And then we can print it here,  so as you see we can easily add new key value pairs to a dictionary. So this is the basics of using dictionaries in python. They're extremely important and they have a lot of applications in the real world. Okay, here's an exercise for you. So here we have this program that asks our phone number. Let's type 1 234. We type it in digits and then this will translate it, to words, take a look. Enter, it prints, 1, 2, 3,  4. That's a pretty cool program, so go ahead and spend a few minutes on this exercise, it's pretty easy, I will see you next.  Alright, so first we need to get the users phone number, we call the input function  with the label phone, we get the result and store it in this variable, now let's say the user enters 123 4. So we need to look through this string, get each character and  translate it to a world, so what we need to implement this scenario. is a dictionary, because a dictionary is a structure that allows us to a key to a value. So we can have a dictionary with keys like 1234. And we map each of these keys to a word. So we cannot put digit 1 to the word 1 we can map 2  to two you get the point. So let's define  a dictionary, you can call it digits, underline mapping now this dictionary I'm going to add a few key value pairs.  One, we map it to 1, 2, we  to 2, 3, to 3,  and finally, 4 to 4. Now technically we should add all the digits from 0 to 9, but I don't want to waste all your time  typing repetitive things here, you got the point. So lets move on, now we need to look through the phone string. So  4 character in phone, we get each character and then use it to access a key value pair in dictionary. So, digits underline mapping we can use square brackets or call the get method,  I would prefer to use the get method, so in case the user enters some character that is not part of our dictionary, our program is not going to yell at them. So, we call the gt method and pass this character a the key, and if we don't have this key, we can supply a default value like exclamation mark, so with this we get a word now we need to add this word to an output string, so we can define an output string, initially we set it to an empty string,  in each iteration we get this and add it to our output string.  So, we type output, plus equals.  This and we should also add a  space at get. So the words are not close to each other, okay? That's all we have to do. Now finally let's print this output, run our program, so I want to type 1, 3,4, 5, lets  see what we get. We get 1, 3, 4 with an exlamantion mark.  In this tutorial I'm going to show you something really cool that you can do with dictionaries, so here in this program you can type a message like good morning followed by a smiley face, when we press enter, we get this beautiful smiley face, or we can type i am sad, with a  sad smiley face and it gets translated to this beautiful emoji.  So this is another application if using dictionaries, we have a dictionary  that maps these characters into smiley faces.  So lets go ahead and build this program together, we start by calling the input function, here we pass a greater than symbol as an indicator for the user to type a message, we give that message, store it here, as you know that is a string, now we need to split this string by a space, so if the user types good morning with a smiley face, we want to break this down into 3 words, good morning, and smiley face.  To do that we can call the split method. So we call message.split and pass  a string with one space as a separator. What this method does is basically it goes through this string and anywhere it finds this character, in this case a space, it uses it as a boundary to separate this string into multiple words. And then it will return a list. Let me show you. So let's store that here, words, and then Then print it on the terminal,  let's go ahead and run our program. So if you type good morning  sunshine, enter, we get a list with three items  each item is a string, okay? Now,  back to our program, we need to define a dictionary for mapping special characters like these 2 into a smiley face, so,  we can call that emojis  set it to curly braces, here we add a key value pair,  a smiley face, and we map that to a string,  in this string we want to add an emoji, if you're on a mac keyboard you can press  control command and space and this should bring up this emoji box, if you're on Windows honestly I really don't know how you can do this, but there must be applications who do this for you. So lets go ahead and pick this happy smiley face, good,  now lets add another key value pair, or sad face we map this to,  this face here, good. So, we  have a list of words now we need to look through this list, get each word and potentially map it to an emoji. So we can write a for loop for word in words,  now we want to go to our dictionary, and see if you have an item with this word as the key. If you have an item with that key, we get it's value, otherwise we want to use the same word. So if a user types good morning, we don't want to translate those words, we just want to return those. So that is the case,  where we use the get method to supply a  default  value, so we wan to get an item with a key word, and if we don't have an item with that key, we simply use that word as  the default value. Now similar to the exercise that we did in the last tutorial  we need an output variable. So let's define that here,  output set it to an empty string, now back to line 9, we get the return value of the get method,  and add it to our output variable. So output  plus equals whatever we get from the get method, and finally  we need to append a space at the end.  That's it, we're done. So let's print the output  and run our program and I'm going to type good morning sunshine with a smiley face, we get that  beautiful, let's try the sad face as well, I am sad.  Too bad. Beautiful! So as you can see dictionaries have a lot of use cases in real applications. Here's a solution from the last tutorial where we created an emoji  converter. Now so far we have been writing all our code right here, in app,py, but as our programs grow we need a better way to organize our code.  We need to break up our code into smaller, more manageable  and more maintainable chunks which we call functions. So function  is a container for a few lines of code that perform a specific  task for example you have learned about a few of the built in functions in python like print, and input, each of these functions  have a purpose, they know how to perform a specific task. So when we  build large complex programs, we should break up our code into smaller  reusable chunks which we call functions to better organize our code. And that's what I'm going to show you in this tutorial. So let's write this simple  program, for printing a greeting message. So we're going to do a print,  hi there, and lets add another message  welcome aboard. So here we have a simple  program with only two lines of code. Now let's say these two lines  potentially we're going to need them in other programs so we can put them in a function that we can reuse. Let me show you how to do that, so,  we start typing out death, that is a reserve keyword in  Python, and it's short for define. When Python interpreter sees this it knows that we're defining a function, next we need to give our function  a name, lets say greet_user. So all the best practices you learned about naming your variables also apply here,  which means we should name our functions with lower case characters  if there are multiple words, we need to separate them using an underscore  and you should always, always, always use meaningful descriptive names for your functions. So, here we define a function called greet user, after that we'll need to add parenthesis  followed by a colon. Now you know that whenever we add a colon at the end of a line we're telling python that we're defining a block of code. So when we  press enter, the next line is indented. Now any code that we write here will belong to this function. So I'm going to move these two lines these two print statements inside of our function. You can simply  press tab to indent them, beautiful, also lets remove this extra line break, that is better, so these two lines now are part of our greet user function, so whenever we  call this function, these two lines will be executed. Okay? Now,  let's remove indentation so here we are outside of our function,  let's do a print statement and print start after that let's call our function, so greet user. And finally let's do another create statement and print finish. Now we have this little warning here, this underline, if you hover your mouse over this line, this tool was telling you that we should add two blank lines after a function definition. This is coming from pep8 which is a document that defines the best practices for formatting our code. We'll look at that in the future. So for now to make pycharm happy, lets add an extra line break to this function so whenever we define a function we need to add two lines breaks after. Okay? so, now let's run our program and see what happens. Alright, so we have 4 messages on the terminal  first we get the start message then we get the messages  coming from our create function, so either and welcome aboard, and finally we see the finished message. So let me explain the flow of our program  when python runs this code it doesn't actually print these two messages on the terminal because these two lines of code are inside of this function, so they would only get executed if we call this function. If we don't call this function, these lines don't get executed.  Okay? So the execution of our program actually starts here, the first message that we see on the terminal is the start message. After that, Python sees that we are calling the greet function, so it will jump over here and then execute these two lines. Then, it will jump out of this function and continue the normal execution of our program so it will print the finish message on the terminal. So this is how functions work. Also note that the order of this code matters, so here we're calling the greet function after after we have defined it. If you try and call it before you define it you will see an error. For example, if we call the greet user function right here, see we immediately get this red underline which says unresolved reference, greet user which basically  means python doesn't know what is this greet user, it's not defined anywhere.  So we always define our functions first, and then  call them.  Here's a function we created in the last tutorial now I got a question for you, what is the difference between calling this functions nd the print function of python? The difference  is that the print function takes some information, in this case  the message that we want to print, but our greet function doesn't take  any information. Wouldn't it be nicer if you could pass the name of the user here and then instead of saying hi there, you could print the name of the user. So,  in this tutorial, I'm going to show you how to pass information to your functions, and  that is pretty easy, so back to the definition of our greet user function, inside of these parenthesis, we can add parameters these parameters are pale holders for receiving information.  For example, you can add a name parameter, and we can pass the name of the user when calling this function. So let's pass Jon here, now when we call this function and pass this value this name parameter will be set to Jon. So it will act like a local variable that we defined inside of this function.  Just imagine, we didn't have this parameter, and instead we had  a variable like name that was set to jump. Now here we could simply  print the name of this user, so we could use a formatted string,  and print the value of the name variable, right? Now,  we don't really have this local variable defined in this function we have a parameter, it's exactly the same thing. So  with these parameters we can receive information in our functions. Now let's go ahead and run this program, so take a look.  We get Hi John welcome aboard, we can take this to the next  level. Now we can call this function one more time. So  greet user, and this time supply a different name. Let's say Mary.  So we are reusing our greet function and passing it a different value. Imagine if we didn't have this function you would have to  repeat this line twice , once for hi jon and another time for hi mary.  So this is the benefit of defining functions, we can take a few lines of code that have a specific purpose and put them inside of a  function, so now let's run our program one more time there you go. So you get hi job, welcome aboard, then you get hi mary welcome aboard. Now note that when a function has a parameter  we are obligated to pass a value for that parameter.  So if you remove jon from here and run  our program, we get this type error, greet user,  missing one required positional argument.  Argument in programming is the value that we supply to a function, so back to this example, marrying this case is an argument that we pass to the name parameter. And lot of programmers don't know the difference between parameters and arguments and think they are the same.  But they are not, parameters are the holes or placeholders that we define in our function for receiving information,  arguments are the actual pieces of information that we supply to these functions.  Okay? So, let's bring back  this jon string, now we can also define multiple  parameters, for example, let's rename this parameter to first name as I told  you before, you can right click here, go to refactor and then  rename, or preferably you can use a short cut. So the shortcut for this on Mac is shift and f6.  And this brings up the renamed dial up box, here we can change this to first  underline name. Now we can add a second parameter  so comma followed by last underline name  so back to our formatted string, let's also print  the last name, beautiful, so here when calling this function,  then we can supply another argument so jon smith and lets delete this line we don't really need it anymore  run our program, take a look, hi jon smith,  so in the last tutorial you learned that whenever  we define parameters for our functions we should always supply  values otherwise we'll get an error. Let's look at that error one more time. So In going to delete this second argument and only pass jon.  Run our program, we get this message,  greet user missing one required, position  argument. So these arguments that you have here like jon  and smith you refer to these as positional arguments.  Which means their position or argument matters. In other words, the first argument we add here is the value or the first parameter  and the second argument is the value for the second parameter.  So if you change their position or order, we'll get different results.  Let's take a look. Let's pass smith first and then jon. Okay, good, delete, now let's go with this, so instead of getting Hi Jon Smith,  we get hi smith jon. So that is the reason we refer to these arguments as positional arguments, they're positioned or order matters. But in python we also have keyword arguments, and  with those the position doesn't matter. Let me show you how they work. So,  let's say here you want to pass Jon as the value for the first  name parameter. We can simply specify that here. So first name  equals jon. Now what we have here is a keyword argument.  the key word argument. So this combination of having the parameter name, followed by it's value is what we call a keyword argument, and what we get with this keyword argument the position doesn't really matter. So here we're supplying Jon as an argument fort he first parameter. Now similarly,  we can use a keyword argument for smith, so last name equals smith, so that we have 2  keyword arguments. So with these keyword arguments we don't have to worry about the order of the parameters. Now that doesn't mean we should always use keyword arguments.  Not really. Most of the time we use positional arguments, but in certain situations these keyword arguments helming us improve  the readability of our code. So on line 7 it's quite clear that we are supplying smith as the last name and jon as the first name. Now in this particular example, even if we didn't have the keyword arguments, just passing two positional arguments like jon  and smith, would be sufficient, because it's easy to guess what is the purpose of these arguments. But sometimes you're dealing with functions and you're passing numerical values to them, in those situations it may not be quite clear what those values represent. Let me show you an example. Let's say we have a function for calculating the total cost of an order,  so we still call that calculate, underline cost,  so when calling this function, you need to supply three pieces of information. One is the total cost of all the order items lets say 50 dollars. The other is the shipping cost, let's say  5 dollars, and the last piece is discount, let's say 0,  .1. Someone reading this code, may not be sure  what these three values represent, in this case, we can improve the readability of this code, by using keyword arguments. So we can prefix each value with the name of parameter they target, for example,  we can set total to 50 and then shipping to 5, and then discount to 0.1.  Now if you give this code to someone else, they can immediately tell what these values represent. So that is the power  of keyword arguments. So here's what I want you to take away. For the most part, use positional arguments, but if you're dealing with functions that take numerical values, see if you can improve the readability of your code by using keyword arguments. You simply  prefix the arguments that you pass with the name of their parameters and this will  increase the readability of your code. Now there is one more thing you need to know about keyword arguments. These keyword arguments should always come after positional arguments. Let me show you what I mean. So,  back to our simple greet user function, let's use a keyword argument  for the first thing. So, let's set  first name to jon and see what happens. So we immediately get this error and  positional argument after keyword argument.  So when calling this function we're supplying one keyword argument  and one positional argument, and python doesn't like this. So,  if you're mixing positional and keyword arguments, you should always use and then the keyword arguments.  In other words, lets remove this keyword argument here,  so jon is now a positional argument, is targeting the first parameter. Now after this positional argument we can supply any number of keyword arguments, so if you set last name to smith look, python doesn't have any problem with this because we are adding  a keyword argument after a positional argument. So let's quickly recap, for the most part use positional arguments  if you're dealing with functions that take multiple numerical values  and it's not quite clear what those values represent, use keyword arguments  to improve the readability of your code, and finally if your passing both positional and keyword arguments, use the keyword arguments after the positional arguments.  So far you have learned how to create functions and send them information using their parameters in this tutorial I'm going to show you how to create functions that return  values, this is particularly useful if you're doing some kind of calculation your function and you want to return the result to whoever is using your function. let me show you. So let's start by defining a  function, called square, this function simply calculates the square of a number. So we need to add one parameter here,  that is is our number, now here we want to calculate number  times number, that is the square of a number.  Now to return this color outside of this function we simply  use the return statement. So return. Now,  our square function is very simple, it only had one line of code.  But in a real program, you might have a function that has ten lines of code to calculate something. So, this return statement is very valuable. So now we can return values to the caller of our function.  So, with this, when we call the square function,  let's say we give it 3, now this function returns a value,  just like an input function of python, this input function  waits for the user to type something and press enter and then it will return the user's input as a string so we can get it and store it in a variable like this, right? We have the same story with our story, with our square function. So our square function returns the value we can simply get it and store it in a variable. Let's call that result. Now, we can print  result on the terminal, there you go, so result is 9,  we could also pass this function called directly inside of the print function without defining a separate variable. Sometimes this is useful for writing shorter code, so in this case.  So, in this case, we don't really need this result variable. We simply want to print  the square of 3. So, we could simply pass this function  call right here, as an argument for the print  function. So let's delete this variable now our code is shorter so with this we're calling the square function, this returns a  value and we'll pass that value as an argument to the print function.  Okay? When we run this program, we get the exact same  result. There you go. Now what happens if we don't  use a return statement in our function. So in the last example we simply used a print statement. Let's temporarily remove  this return statement and print the result on the terminal. Like this. So let's run our program  one more time and see what we get. We see two things, the number 9, and none. What is happening here? Well when Python interpreter executes this code, first it will call the square function. So the control moves to the square function  here we calculate the square of this given number and then print it on the terminal. That is the reason we see 9 right here,  now, by default, all functions return the value  none. So if we don't have a return statement  here, by default python returns none. None is an object that represents the absence of a value, it's like nothing  or null i c, c++ java and Javascript.  So, in this example, we didn't have a return statement, and  by default python returned none from this function.  So, after this square function is executed, the value none  is returned and passed as an argument to the print function, that is the reason  we see none on the second line. So here are the two things you need to take away from this tutorial. By default all functions in Python  return none. You can change that, so if you have a function that  calculates something, you can return the result using the return statement.  Here's the code for our emoji converter program that we wrote earlier.  If you missed that tutorial, make sure to go back and watch it, as  I told you before, there is a table of content right below this video in the description. So we can simply click on the emoji converter tutorial to watch it.  Now, your exercise is to reorganize this code using a function.  So I want you to extract a function in this code, because this algorithm for converting these smiley faces into emoji's is something that we probably want to use in a couple different applications. We can use it in a chat application in an email application and so on. We don't want to write all this code every time  we want to convert these characters into smiley faces.  So, out of all these lines of code that we have from line 1 to  line 10, the lines 10-2 belong to our algorithm, all these lines together implement this feature.  So, you should put these lines in a separate function,  Now, why don't we have the input in this function? Because the input will can come in different forms, currently we're using the import function  to receive the input from the terminal, but in other applications  we might receive the input from a graphical user interface, so the input can come in different forms. We don't want to put that in our function, because this line will not be reuseable.  You want to give our function the actual message,  as a string. We don't care how we got that message. In one  program you might get it from the terminal, in another program you might get it from  a graphical user interface. So that is the reason this line up code should not be in that function. By the same function, you shouldn't include the last line in that function because what we do with the output is different from  one program to another. In this program, we are printing the output  in another program, you might send an output as an email, or as a response in  a chat application, so as a general rule of thumb you're function should not worry about receiving input and  printing it. These lines of code should not belong to your functions. So go  ahead and reorganize this code by extracting a function.  Alright, on the top, first we need to define our function. So first we type  def, give our function a name like emoji_ converter, so the name of this function clearly tells me what it does. Each function should be responsible for one and only one task,  and that task should be clearly explained in the name of the function.  So, our emoji converter function should take  a parameter, we call that message, that is a string, right? Colon now we need to move the lines  5 all the way to the end of our for block  into the function, so let's select all these lines, you can cut them from here, by pressing command and x on Mac, or control and x on Windows, then we paste it here,  as you can see these lines are automatically indented  so, they are part of the emoji converter function, if this didn't happen on your computer, make sure to select these lines and use the  tab to indent them. Alright, so here's our emoji converter function  beautiful. Now after that  in the main flow of our program, first we get the input from the user  we store it in this variable message and then we call emoji converter and pass this message,  this function should return a value, that is what we use to calculate the end of this function, so right after this for block we need to add  a return statement, return output,  now that our function returns a value, we can get it and store it in a separate variable, let's call that result  and then we can simply print that here, or we can make this code shorter, we don't really need this code here so we can simply  call the emoji converter, and print the result. Like this. Now here we have an underline because as I told you before we need to blank lines after our function definitions. So currently we have only one blank line  we need to add another black line, good, let's go ahead,  and run this program, and make sure everything works as before  so I'm going to type a message like good morning with a smiley face  good, let's run it one more time, times that,  to add okay beautiful, so, here's the final result, we defined this function called emoji converter, this function takes a parameter called message. And finally returns the output.  In this tutorial I'm going to teach you how to handle errors in your  python programs, so let's start by writing  a small program  to get the user age from the terminal. So we call the input variable  input, and a label here,  like age, this returns a string, so we need to pass it to the end funciton and store the result in a variable called age, now let's print age to make sure you have implemented everything properly we run our program, we type  20, 20 is printed here, beautiful, now look at  the exit code of this program, exit code 0 means our program terminated successfully, there were no errors, but what if we run this program one more time and instead of entering  a numerical value, we enter something like asd.  We get a value error with his message invalid literal  for int with base 10. Basically what this message is telling  us is that this string asd does not contain  a valid home number that can be converted to an integer. Now look at the exit code of this program, exit code 1 means our exit code crashed,  so 0 always means success and anything but 0 means crash  now as a good python programmer you should anticipate this situation.  You don't want to let your entire program crash just because the user entered  an invalid value. So instead of letting the program  crash you should handle the situation and print a proper error message, and  that's what I'm going to show you in this tutorial, now before we get any further  look at the type of error we get here, value error,  so remember this, we're going to get back to this shortly  now how can we handle these errors, in python we have a construct called  try accept we use that to handle errors.  Let me show you how it works. So on the top we type try: now as you know we are defining  a code block so, I'm going to move these two lines,  inside of our try block so press tab here.  And remove this black line, now these two lines are part of our try block, right? So after try we type  accept, and then we add the type of the error  that our program may encounter, that is value error okay? Then, we add a colon and in this block we can define what should happen if our program encounters  an error of type value error. In this case we want to print  a proper error message, so print,  invalid value. So with this try and accept we are telling python hey, go ahead and try running one or these two lines of code,  if you encounter, an error of type. Value error  then instead of crashing the program, try this error message on the terminal so this is how this works. Now more accurately in programming we reefer to this kind of error as an exception. So an exception  is a kind of error that crashes our program. So our user enters an invalid value, this line of code  in line 2 will raise an exception, and on line 4 will catch it and print this error message, so our program will no longer  crash. Let me show you. So let's go ahead and run this age 20, everything  works just like before and the exit code is 0, let's  rerun this program, and enter asd,  so we get this proper error message invalid error menu and once again  the exit code is 0, so that means our program completed successfully. Didn't crash, now, we can also handle different kinds of  errors or exceptions, for example right when we get the age let's define a variable income and set it to 20,000. And then define another variable called risk and set it  to income divided by age.  Let's run this program and enter 0 as the game to see what happened.  So 0 is obviously a numerical value  so when we enter this value, technically we shouldn't get any exceptions.  Take a look. Our program crashed, we  did a 0 division error, because we cannot divide a number by 0.  Once again look at the exit code, so we couldn't catch this kind of error or this kind of exception with this accept block.  Accept block is only cashing exceptions of type value error. And this happens when we try to convert a nonnumerical value,  to an integer. So in a situation like this. We should handle  different kinds of exceptions, we can add another  except statement for an exception of type 0 division error. Now in this block we can print a  different kind of message, like age cannot be 0. Let's run our program one more time. Now,  I'm going to enter 0 as the age so we get this error message age cannot be 0 and look at the exit code. It's 0, so our program didn't crash, so to recap, we  `used try accept blocks to handle exceptions that are raised in our programs, as a good programmer you should always anticipate these kind of exceptions and handle them properly.  In this tutorial I'm going to talk to you guys about comments in python.  We use comments to add notes or comments to our programs.  For example, here I'm going to make a print statement,  sky is blue. Now, before that, I  can add a comment using a hi sign and then whatever we type here  is going to get ignored it's not going to get executed. Let me show you so let's run this program, look we only see this message. Sky is blue. So with this comment we can explain  something about our code, we can use it as reminders to fix things or clear things up, or we can use it to communicate things with other developers  reading our code, why we have written this code in a certain way. These are good use cases for using comments, we can also have comments over multiple lines, so we can simply add more comments, each line should start with a new hi sign. Now one thing you need to avoid when using comments is explaining what the code does. So here's an example of a bad comment.  Let me just delete these two lines, and with this comment I'm going to say print sky is blue. Why is this a bad comment, because it's telling me the obvious, it's telling me  this slide is going to print sky is blue. Now the problem with this comment is that apart from being verbose and repetitive, if you come here,  and change sky to ocean, now this comment gets  outdated. So overtime we change this code, then we have to come back and  modify the corresponding comment. So I've seen some developers  add comments in front of their functions, for example, they define  a function let's say a square that takes a number  and simply returns number times number. But it is obvious that this function calculates and returns the square of the given number. So there is really no need to add a comment and  explain that. Calculates and returns the square of a number. This is very repetitive and it creates  noiser code. Someone else reading your code they get distracted with all these unnecessary comments, so use comments to explain whys and hows. Not why's if you have made certain assumptions, we can use comments to explain those assumptions. Or we can use them to add notes to remind yourself  or other developers to do something in the code.  So comments are good, but too much of a good thing is a bad thing.  In this tutorial I'm going to talk to you guys about classes in python.  Classes are extremely important in programming and they're not specific to python, in fact, a lot of other programming languages do support the notion of classes. We use classes to define new types. For example, so far you have learned about the basic types in Python  like numbers, strings, and booleans,  these are the basic or simple types in python, you also learn  about a couple of complex types like lists and  dictionaries. While these types are extremely useful, they cannot  always be used to model complex concepts, for example, think about  the concept of a point, or a shopping cart. A shopping cart is not a boolean, it's not a list, it's not a dictionary, it's a different kind of thing. So we can use classes to define new types to  model real concepts. Now in this new model I'm going to show you how to define a new type called point, and this new type is going to have methods  for working with points. For example, back to our main program. Let's  create a list, numbers, 1, 2, 3,  you know that here, when we type that dot,  functions or methods available in list objects, now similar to this,  we're going to create a new type called point, this point is going to have metas like move, draw, get,  distance from another point, these are the operations that we can perform on points. So let me show you how to do this. We start by defining a class by using the class keyword,  and right after that we give our class a name. Now look at the naming convention I've used here. I've capitalized the first letter here, this is what we call a pascal naming convention. So the naming convention we  used for naming our classes is different from the convention we use for naming our variables and functions. For variables and functions we always use lower case letters and we separate multiple words using an underscore. But when naming classes, we don't use an underscore  to separate multiple words, instead we capitalize  the first letter of every word. So in this case our class has only a single  word, if you had multiple words, let's say email client  look I've capitalized the first letter of every word. Once again, this is called pascal naming convention and it comes from the old pascal language that you might have heard of. So, back to our point class. Here we add  a colon which means we're going to define a block, now in this block we can define all the functions or methods that belong  to points, for example, we can define a function called  move for moving a port, now note that as soon as we type open parenthesis, pycharm automatically adds self here,  this is a special keyword and we're going to get back to this shortly.  So, for now, in this method, let's print  move on the terminal, now let's define another  method like draw, so define draw  and in this method, let's print draw on the terminal, now let's remove the indentation, we're done  with the definition of our point class, so we need to add two line breaks  okay, so with this class we defined a new  type with this new type we can create new objects, so an object is an instance of a class, a class simply defines  the blueprint or the template for creating objects, and  objects are the actual instances based on that blue print.  So we can have tens of hundreds of points on the screen, these are the objects or the instances. So to create an object, we type out the name of our class and then call it like a function  this creates a new object and then returns it. So then we can store that object in a variable, let's call that point 1,  there you go, now when we use the dot operator.  Look, we have these two methods that we  defined, draw and move, we also have a bunch of other methods that we start with two underscores, these are called magic methods  we'll look at them later in the course. Now, let's call the draw method  of our point object, and run our program  so you can see draw is printed on the terminal. Now apart from methods these objects can also have attributes and these attributes are like variables that belong to a particular object. For example,  here, after we've defined .1.  We can set .1.x to  10. And .1.1 to 20.  Now we can easily print out these attributes, let's print  .1.x and run our program one more time take a look, so the x coordinate of .1 is 10. Now we can create another object, let's call that.2  so .2 once again we type out the name  of our class and then call it like a function. Now this object is completely  different then the first object. So if you print  .2.x  look we get this attribute error, because this point object doesn't have an attribute called, so each object is a different  instance of our points class. Now here we can assign a value to .2.x. Let's  send that to 1, and then run our program so we can see the  x coordinates of .2 is 1. So to recap we use classes to define new types, these types can have  methods that we define in the body of the class and they can also  have attributes that we can set anywhere in our programs. You have learned how to create new types using classes  now therein a tiny problem in this implementation.  We can create a pooint object without an x or y coordinate let me show you. So point we create this object here, and before we set point.x let's print point .x run our program  we get this attribute error which you saw in the last tutorial, so point object has no attribute called x This is the problem we have here, it is possible,  to have a point object without an x or y coordinates.  And that doesn't really make sense, because whenever we talk about a point,  we ned to know where that point is located. To solve this problem, we use a constructor. A constructor is a function that gets called at the time of creating an object. So here on line 9, when creating this point object, we want to pass values for x or y  coordinates, let's say 10 and 20, and with this,  this point object that we get here, will have it's x and y coordinates initialized. So how do we do this? We need to add a special method in this class called constructor.  So, on the top, I define a new function,  look at the name of this function, double underscore init, double under score. So init is short for initialized, and this is the function or the method that gets called when we create a new point object.  Now, press enter, so this automatically adds,  self in parenthesis, we're going to come back to this shortly.  Now, right after self, we want to add 2 extra parameters,  x and y, so let's type out x and y,  and then in the body of this method, we should read the values past here, and use them to initialize our object, so when we pass 10 and 20, these arguments will be used for x and y parameters. Now to initialize  our object, we type our code like this. Self.x equals  x. And then self.y equals y.  What is going on here, this self that you see here is a reference to the current  object. So, back to line 13,  when we create a new point object, self references that object in memory, the same object, that we're referencing using this cariable. So earlier we typed point.x equals 10,  with this code we set the x attribute of this point object.  Now what we have in the constructor is exactly the same, we use the self  to reference the current object and then we set the x attribute  to the x argument passed to this function. So,  using this init method, we can initialize our objects and  we refer to this method as a constructor, this method is used to construct  or create an object, okay? so, Now, let's remove line 14, so we created point object with these values and then print point.x let's run our program  there you go, x is 10, we can also change  these values later, so just before printing point.x we can set  point.x to 11 and then run our program  so x is updated, beautiful, alright, here's a  exercise for you. I want you to define a new type called person these person objects should have a name attribute as well as a talk method. This is a very easy exercise so,  you can tackle it in probably a couple of minutes.  Alright, so first we start with a  class keyboard, we define this person class  once again look at the naming convention I have used here, the first letter of the first word in this case the only word is uppercase.  Now, in this class we define all the methods we need, currently we only have method that is the talk method, so define talk,  pycharm automatically adds self, we come back to this shortly,  for now let's just print talk.  So this is the body of our person class. We remove the indentation  and add two line breaks after defining our  classes. Now we can create the personal object, let's call that jon,  we set it to person, we can call jon. talk, let's run the program so we get this message, beautiful, but our person objects should also have a name attribute, it doesn't make sense to have a person without the name.  So that is when we use the constructor function. So on the top,  we add a new method, at the name of this method is double  underscore, init double underscore. So we call this method a constructor. Now in this method we need to add another parameter which is name, so we  simply set self.name to name. Once again, self references the current object, we're setting the name  attribute of the current object, to the name argument passed to this method.  With this we can go back to line 9, and  when creating a person object we pass the name, let's see jon smith  now let's print jon.name and run our program  there you go. So jon Smith is printed on the terminal, beautiful,  so this is all you had to do as part of this exercise. But let's make this program a little more interesting. Instead of printing this boring message here, let's print hi, I am Jon Smith.  So, we can use a formatted string with a message  like Hi, I am, now we want to dynamically add the name of this person. How do we do this? Well, look at  the parameter of this talk method. As I told you before,  every method in our class should have this parameter, self. And they should be the very first parameter of each method, okay? So,  with this self we can get reference to the current object, so we can add curly braces and type out self  .name. Thsi returns the name attribute of the current  person object. With this we can remove  line 10, where we print jon.name and simply call jon.talk. Lets run our program. Hi, I am Jon Smith. There we go, beautiful. Now we can build another person object, let's say Bob, is a new person  called Bob Smith, when we say  Bob.talk. And run our program  we get a different message, hi I'm Bob Smith, so each object is a different instance of a person class.  In this tutorial Im going to talk to you about inheritance in Python,  inheritance is a mechanism for using code and once again  it's no limited to python, most languages that support classes also support inherence. So let ms how you how this works. Let's say we have this dog class with a simple walk method, in this method we're simply printing the walk message on the terminal, now let's say in real program, instead of just one line of code here we're going to have 10 lines of code. Now, what if in the future we want to define a  another class let's say cat and we want to add  this walk method there as well. Sow e'll have to repeat all that code,  in this new class, walk.  This is bad. because you have repeated or duplicated our code. In programming we have a principle called dry which is short for don't repeat yourself.  Let's say sometime in the future, we discover a problem with our walk method. If you have repeated or duplicated this method in many other places, then we'll  have to come back and fix that problem in every single place we have duplicated this code. So that's why in programming we should not define something  twice. So how can we solve this problem.  There are different approaches, one approach that is easier to understand for beginners is inherence  Now here's how it works. We define a new class called maml and move the walk method right there. Then we'll have the dog and cat classes inherit that method from their parent just like how humans inherit certain attributes or behaviors form their parents. That' exactly the same, so on the top, we define a new class, let's call it mammal then we need to move the walk method there. So,  we select it, cut it, using command and x on Mac, or control x on Windows and then paste it here, beautiful,  now we want our dog class to inherit this class from the mammal class so right after the class name we add parenthesis and  then type out the name of the parent class. In this case, mammal. That's all we have to do. So with his the dog class will inherit all he methods defined in the mammal class.  Now there is a tiny problem here, if you look at line 9, there is a  red underline here. The reason this is happening is because python doesn't like an empty class, so right now our dog class is empty, it doesn't have anything, we either need to add methods specific to dogs or just to make Python happy,  we can use the path statement, and that basically means nothing. We're telling python interpreter, hey, pass this line, don't worry about it. But with this, we don't have an empty class, okay? Now as I told you before after each class I should have two line breaks so right now we  only have one line break and that is the reason we have this little warning here, so let's add another black line, beautiful, so our dog class is inheriting the walk method from the mammal, you need to apply the same change  to the cat class. So we'll have cat  inherit from mammal, and then,  use the path statement here. With these changes,  now we can create either a dog or  cat object, let's say dog,  one, we set it to a dog object, and  when we type dot look we have the walk method that is defined  in the mamall class. We can easily call it, let's run our program there you go, you see the walk message,  so both the dog and cat classes are inheriting all the classes methods defined in their parent class. Now here we can add methods specific to dogs, for example, we can define a method called  bark, and then print bark.  Now, we don't need the path statement because we already defined  one method in our dog class. So now when we type out  dog1. look we have two methods one is the walk method that we inherited and the bark method that we just defined in the dog class. Similarly, we can add a method  specific to a cat, for example, we can define a method called be annoying, I hate cats, so let's print annoying , now when we create the cat object, let's remove that, cat1 and type out cat1. you have these two methods  dog and be annoying. So these are the basics of inheritance in python Now there is more to this that really goes beyond the scope of this beginners tutorial.  If you're interested to learn more about inheritance and other mechanisms  for reusing code, I encourage you to get my complete Python course. In this tutorial, I'm going to talk to you about modules in python.  A module in python is basically a file with some python code.  And we use modules to organize our code into files.  Just like sections in a super market. When you go to a super market there are different sections for fruits, vegetables, cleaning products, and so on. We don't have  one section with all the products in the super market. We have the same concept in programming. So instead of writing all our code, instead of writing all the functions and classes in app.py we want to break up our code into multiple files. We refer to each file as a module.  With this, not only is our code better organized and structured,  but we'll also have the ability to reuse our code. For example,  over here in app.py, I've defined two functions for converting weight from pounds to kilograms and vice versa.  Now we can take these two functions and put them in a separate module called converters, and then we can import that module into any program that needs these converter functions. Let me show you how to do this. So, let's open up our project panel and right click the project, go to new, and add the new file,  we're going to call this file, converters.py.  Then, we go back to app.py  select all this code, cut it and then  paste it into our new module. converters.py.  With this we have cleaned up our app module it's not bloated with different functions, so as we write more functions with classes, we put them in their  corresponding modules, a module should contain all the related functions and classes, okay? Now you want to import the converters module into our app module, and that is really easy, on the top we write import converters  without extension, so we don't add .py we only type out the name of the file. Let me close that project panel. Now,  this converter is an object so we can use the dot operator to access it's members. So currently we have defined  these two functions inside of our module, kilogram to pound,  and pounds to kilograms. So we can easily call one of these functions  let's pass 70 kilos get the result and print it out.  Run our program, so,  that is under 55 pounds. Now there is also another syntax for importing modules, let me show you, so instead of importing the entire module we can import specific functions from that  module. Here's how it works. We type out from  then we add the name of our module, so converters  import, now here if you press control and space we can see the list of all the functions defined in this module.  So here we can grab one of these functions let's say kilogram to pound, and  with this we can directly call this function just like the function defined in this file. App.py. Compare what we have on line 4 to what we have on line 6. On line 6 we'll have to prefix this function with the name of an object  converters. So we have to type converters. and then we'll be able to access this function. In contrast. When we import  a specific function from our module, then we can easily call that function without prefixing it with the module name. So here's what you need to take away.  We use modules to better organize our code. Instead of writing all the code, instead of writing all the functions in one file, you break up our code across multiple files. Each file is called  a module and it should contain all the related functions and classes  then we can import a module into another module, in this case, we are importing  the converters module into our app module. And as you saw,  there are two ways to import this module, we can import the entire module, and then we'll get an object with the same name as the module so we can type converters . and then we'll be able to access all the functions and classes defined in this module. The other appraoch is to impot a specific function or class from a module using the from import statement. Now here is your exercise. Earlier in the course you had an exercise for finding the largest number in the list. So here on the top we have a list of numbers, initially we set max to the first number in this list then, we look through this list, get each number,  if the current number is grater than max, then we reset max.  And finally when we are done with our loop we print max on the terminal.  Now here's what I want you to do. This code currently  has no organization. We don't have any functions, we don't have any modules, we wrote all  the code in app.py, that is okay for small programs,  but as your programs grow, you need to properly organize your code into classes and modules. So, as part of this exercise, I want  you to write a function, call it find max.  This function should take a list, and return the largest number in that list.  Now after you do this, go ahead and put this function  in a separate module. So extract it from here, and put it in a module,  called utils. So in this module we're going to have a bunch of  utility functions, oaky? Then import the utility  module into the current module and call this function.  Finally, get the result and print it on the terminal, this is a  fantastic exercise to teach you how to properly organize your code. So,  go ahead and spend a couple minutes on this exercise.  So the first step is to define a function called find max. So on the top, I'm going to define function, find max this function should take a list of numbers, so we add a parameter called numbers. Now inside of this function you want to have these few lines, this is the algorithm for finding the  largest number in a list, we don't want to bring the first line, because this is where we create a list. So somewhere in our program we're going to create this list,  and tehen pass it as an argument to pass max  function. Okay? So, let's go ahead and grab these few lines, cut them, and put them inside of find max function. Alright, so we find the largest number in this list, finally we need to return it, so,  return max. So here's our function. Now we need to move this into a separate module. So let's go to the panel  right click the project and add a new  file, we can also add a new python file that's the same, let's call that utils so if you add a new python file  pycharm automatically adds .py extension, but if you go to new file we'll have to explicitly type out  .py. So make sure to get the extension right.  Now, back to app.py, let's cut this code and  paste it into this new module, okay beautiful.  Now I'm going o go back to app.py and import our new module.  We can either import the entire module, so import utils  and then access individual functions so we can call utils  .find max or we can explicitly  import this function from the utils module. It doesn't really make a difference.  So, we could type from utils import find max. And then we don't need to prefix this with the name of it's object, so we simply call find max. Now we need to call this after we initialize our list. So first we need to define the list of numbers.  Then, we pass that list as an argument to find max we get the result which is max and finally we print it on the terminal. let's go ahead and run our program, so the largest number is 10, beautiful,  now one last thing before we finish this tutorial, here we have this little warning  under max and the tool tip says shadows built in name  max. The reason we see this is because we actually have a function called  max. And it does the exact same job  as our find max function. So this is actually built into python.  But I ask you to do it as an exercise because it's a great exercise for beginners.  Now, back to the warning, this warning is basically telling us that we are overwriting the built in max function in python  so we are changing the meaning of this function, and this is considered a bad practice,  let me show you what I mean. So let's comment out what we have on line 4,  by putting a hash sign here, we can also use,  a short cut command and slash on Mac, or control on slash on Windows. So now this line is commented out. Look at the color of max here, it's purple, it's the same color as print. And this is the color used to identify the built in functions. So now we can call this function and give it a list of numbers  run our program we get the same exact result however,  if we bring this line back, once again we can use the same  shortcut that is command and slash on Mac or control slash on Windows.  Now, we are redefining max, so up to this line, max used to be a function, but after line 4 is executed  max is set to an integer, that is the largest number in this list.  So, we'll no longer be able to call it on line 5,  let's run our program and see what happens. So there you go,  we get this type error, int object is not  callable, because max is now an integer, it's not a function,  so we cannot call it. So to solve this problem, we can rename  this variable to something else. So right click here.  Go to refactor and rename,  and rename this to maximum. So you can see the warning is gone. As you can see we have the same warning  in our utils module. So here we're redefining max  and as I told you before this is a bad practice. We're changing the  meaning of built in functions in python. So,  let's rename these as well, I'm going to use the short cut that is shift and  f6 there you go and here we can change this to  maximum. Enter, done.  In this tutorial we're going to talk about packages in python,  packages are basically another way to organize our code, so currently we have only 3 files for modules in our project but a real project  can contain hundreds or even thousands of modules.  We don't want to add all those modules here, because over time this directory will get  bloated with so many files, so a better approach is to organize related  modules, inside of a package, so a package is a container  for multiple modules In file system terms a package is  a directory or folder. So in our project we can add a new directory  and in that directory we can add all the directed modules, as a metaphor think of a mall. When you go to a  mall or a shopping center there are different  sections for mens women and kids clothing, so that is ilke a package, now when you go to the mens section, there are different areas fior different kinds of products, we have a section for shoes, t shirts,  jackets, and so on, so each of these is like a module, so,  in this tutorial, I'm going to show you how to create and use packages in Python,  here in our project panel, right click the panel and add a new directory.  Let's call this directory e commerce. So we're going to create a package called e-commerce and in this package we're going to have all the modules related for an ecommerce application. For example,  we can have modules for sales, shipping, customer service  and so on. So let's go ahead  Now here we have an empty directory, in order to convert this to a package  we need to add a special file in it. So, right click this directory and add a new python file,  call that file double underscore in it, double underscore  this is a special convention in Python.  When Python interpreter sees a file with this name and  name in a directory, it treats this directory as a package, we also have a  shortcut for that in pycharm so let me delete this directory  and start again. So delete, once again right click  the project, and go to new but instead of creating a new directory  we can create a new python package, let's call our package ecommerce as you can see  pycharm automatically creates this file for us so we don't have to manually create it. Okay? Now, in this package, let's add a new module,  so a new python file, let's call it shipping okay? Now in this module we want to have  a function for calculating the shipping costs. So define  calculate, underline, shipping.  Now don't worry about parameters or implementation, we simply print  calculate underline shipping.  Now lets say you want to import this shipping module  into our app module, with this new structure this shipping  module is now part of the ecommerce package, so we cannot import a direct  you have to start from the ecommerce package. So,  bak to app,py once again there are two ways to import this module.  We can import the entire module or we can  import one of it's functions or classes. So let me show you both approaches.  First, we're going to import the entire module. Now what is the name of our  package? it is ecommerce, right? So ecommerce. shipping. So instead of typing import  shipping we type import ecommerce  .shipping. we have to prefix it with the name of it's package.  Now to access any of the functions or classes in this module  we'll have to type out ecommerce.shipping. and there you go. Now we can access the calculate shipping  function. So let's go ahead and run our program,  we see this message printed on the terminal, beautiful. However  with this approach, every time you want to call one of the functions to this module, we'll have to prefix it with ecommerce. shipping. that is very verbose. So when working with packages  we often use the second approach, using the from statement. So we can type from ecommerce  .shipping import  calculate shipping. Now we don't have to prefix this function with ecommerce.shipping, and we can call it multiple times  in this module, so our code is a little bit shorter. But what if you want to use multiple functions in this shipping module. We can either import them here, so calculate shipping, comma, let's say calculate_ tax. Or we can import the entire module and then  access all he functions or classes in that module. So,  let me revert this back. To import the entire module  we type from ecommerce so we remove.shipping  so from this package, import  the shipping module. Now the shipping module,  is an object so we can access  all the functions and classes defined here, using the dot operator, so shipping. there you go, calculate shipping. So to  recap, when using the from statement we can either start from  the package and import a specific module, or we can start from package.module  and then import a specific function. Like calculate shipping.  So, this was the basics of using packages in  python. As I told you before, packages are extremely important, especially  when you want to work with a framework like django, we use django for building  web applications with python, and I'm going to show you that later in this course.  So in Django we have quite a few packages and  each package contains several modules. So make sure to watch the tutorials,  about modules and packages one more time, otherwise you're going to get confused later  when we get to Django.  In this tutorial I'm going to talk to you  guys about the built in modules in python, so python  comes with a standard library that contains several modules for common tasks such as sending emails, working with date and time,  generating random values and passwords and so on. There are so many modules  already built into Python and that means there is already lots of functionality  that we can reuse. Let me show you where you can find  this standard library. So open up this browser and search for python 3, module index,  make sure to add the version number, because the modules in python 2 are different from modules in python3. So here we search for python 3  module index, and the first page here, you can see is python module index, or python 3, let's go ahead,  so these are all the modules built into python,  for example we have modules for working with date and time,  we have modules for sending emails for encoding values,  there are so many modules here. Now the explanation of all these is  beyond the scope of this course, that really requires it's own course.  Because we have so many modules here, but don't let this list intimidate you.  This is not something that you need to learn right now, as you learn python  as you build more applications, gradually you will get familiar with more modules here, in fact nobody knows all the modules in python standard library. Everybody knows some modules based on the applications they have built.  So in this tutorial, I'm going to show you how to use one of the built in modules,  for generating random values. So on the top, we import the random module, now because random is a built in module, we don't need to have a file here  called random.py. So python interpreter knows that random is a built  in module as long as it knows where to find it.  Now if you're curious where this random module is stored on the disk, let me show you, so here in the project panel, expand external  libraries, then expand python 3,  and then one more time python 3.7 library  route. So this is a folder somewhere on your computer, in this folder, we have  all the built in modules in python. So,  if you scroll down, you should be able to find.  The random module. There you go. It's right here. So random. py. You can open this and this shows you the source  code of this module. there you go. Now in this tutorial,  we don't want to worry about hat, so let's go back to our app.py, and use this module to generate random values. So when we import this module, now we have this object, random, so we can use the dot operator to acces it's methods. One method that is useful  here is the random method, and every time we call it it generates a random value between 0 and 1. So here we can do a for loop,  let's say for I in,  range 3. So just to refresh your memory we are using the range function to create a range object. We can look through this range object  and in each iteration this object will spit out a value.  So with this for loop, we can execute this code 3 times. Now, let's  indent this. Okay, and finally, let's print the result,  There you go. So we can see that in each iteration we get a new random value between 0 and 1.  Now what if we want a random value for a particular age? Let's say random values between 10 and 20, well,  there is another method here, rand int, we use 2 arguments here to specify our range, let's say 10 and 20.  Run our program one more time. Now we have the numbers 20 13 and 18. If we run our program one more time,  We get different values, so 20, 19, 11, one more time.  Look, you also have another powerful method for  randomly picking an item from a list. Let's say we have a list of team members and you want to randomly pick someone as the leader. Let me show you how to do that.  So, we define the list of team members, we set it to jon, mary, bob,  and mosh. Now we can call random  .choice and pass our members list  this method randomly picks a method from this list and returns it. SO,  we can store the result in leader and then  print it on the terminal. let's run our program,  so now the leader is mary, if you run our program one more time this line is mosh now it's mosh again one more time,  it really likes mosh, you get the point. So the random module is very powerful, and it has a lot of applications.  Now here's a very cool exercise. I want you to write this program to  roll a dice. So every time we run this program we get a different value.  Now we have 3 in 1, next time we get 3 and 6, one more time  5 and 6, 4 and 3, double one, that's a very cool exercise.  So before we get started, I want you to pay attention to a few things.  I want you to define a class called dice  in this class we're going to have a method called rope so every time we call this method, we get a tuple, a tuple remember is a list of  values but values cannot be changed, you cannot add a new item to it, we cannot remove it. So it's like a read only list. So every time,  we call the row method, we should get the tuple of two random values.  So go ahead, and do this exercise, You'll see my solution next.  Alright, we start by importing the random module on the top,  then we define a class called dice: this class we want to have a method called row. So define row  parenthesis, this automatically adds self, now in this method,  you want to generate two random values between 1 to 6.  So we call random.randint.  And pass 1 and 6. So this generates the first number,  we can ut that here, now let's call this one more time,  so I'm going to copy what we have on line 5, put it here, and  change this variable to second. So we have two variables first and second. With two random values, finally we need to return them,  in a tuple, so return parenthesis instead of square brackets,  first and second, now  in python when you want to return a python from a  function, you don't have to add this parenthesis, so you can simplify your code and python will automatically  interpret this as a tuple. So we are done  with a definition of our class, we remove the indentation and add  two line breaks. Now we create an object of this type  so you set dice to dice next we roll the dice, so dice.roll and  print the result on the terminal, that's all you have to do. Let's run this program, so now we get 2 and 5,  lets run it one more time, 3 and 2, 1 and 1, beautiful.  Now we have this little warning here, that says  expected 2 black lines found 1. Once again this is coming from pep 8, pep is short for python and  proposal. We have so many python enhancement proposals or peps. Pep 8 is a very famous 1, and in this document we have  all the best practices for formatting our code. So pep 8 says, that after we define our classes we should have 2 lines breaks, we've already done that so the reason this is complaining is because we had 1 line break before  the class, so let's add one more line break, now pycharm  is happy. So basically pycharm is following all the best  practices defined in pep8. Now you don't have to memorize  any of these best practices, as you code in pycharm, pycharm gives you a little more warning, and gradually you will learn how to properly format your code, so it's readable by other people.  In this tutorial, I'm going to show you how to work with directories in python. So here in python3,  module index, you can see we have a module called path lib which provides an object  oriented file system pact. That basically means it provides classes that we can use to create objects to work with directories and  files. So, if you click here, you can see how this module works, we can see all kinds of examples. For example, here on there basic  useage, you can see this is how we import the path class from the path lib module. Let me zooming so you can see clearly. Okay, so look, from path lib, that's our module, import path, note the naming convention.  P is capitalized, that means path is a class, so we need to create  an instance of this class as you can see, right here,  now there's so much documentation here, you can read this on your own, but let me quickly show you a few examples to help you get started. So after pycharm  on the top, from the path led module, that's import the path class. Now we need to create,  a path object to reference a file or directory  on our computer. So there are basically to ways to do this we can use an absolute path, or a relative path which basically  means a path starting from the current directory. For example,  if you wanna reference this ecommerce directory in our project, we can use the relative path. So we start from the current directory and then go somewhere else. With absolute paths we start from the root  of our hard disk. For example, if you're on Windows you might have  an absolute path like this, c drive, backslash,  program, files, backslash microsoft,  so these are directories in c drive.  On Windows we use a backslash to build a path. If you're on Mac or Linux, your paths will look a little bit different, so instead of backslash we have a forward slash lets say user/local /bin. So these are examples of absolute paths. In this tutorial we're going to work with he relative path to work with this ecommerce  directory that we have in our project. Now if you didn't create this directory  earlier, simply right click on the project and then go to new  directory. oaky? So, let's close this panel,  we create a path object, now,  if you don't pas an argument here, this will reference the current directory alternatively, we can pass string, in this string we can add a file or a directory. let's say the ecommerce  directory. Now this runs a path object, so we store it here,  now this path object has a few interesting methods  for example, we can check to see if a path exists by calling  the exist method. This simply returns a boolean so let's print it on the terminal,  there you go. So this path exists,  what if it changes to ecommerce 1, and  run our program and get false, we can also create a new directory  for example, let's change our path to email, now when we  run this program, obviously we don't have this directory but we can  create it by calling the mk dir method  so make directory. Let's run our program alright, this method returns none which basically means  it doesn't return any values. Now if you look at the project panel you can see here we have a new directory called emails, we can also delete this directory  so, instead of mk dir we call  rmdir which is short for remove directory, but  let's go ahead, now we can see that directory is gone. We can also see all the files and directories in a given path, that is, very useful if you want to write a little program to automate something. For example,  you can iterate over all the spreadsheets in a directory one them and  process them. Let me show you. First we change the path to the current directory and then we call the glob  method. With his method we cans each for files and  directories in the current path. So as the first argument we need to pass a string  that defines a search pattern. We can type an asterisk  and that means everything, all files and all directories.  We can optionally add an extension, so to get all the files, you need the files you use star.star. With this  pattern, we'll only get the files in the current directory. But not the directories.  We can also search for all the py files, or all the excel  spreadsheets. Anything. So let's search for all the py files  in the current directory, now when we run our program  we get this generator object. Generator object  are kind of an advanced topic, and they are beyond the scope of this beginners  python course. But for now all you need to know is we can iterate  or loop through these generator objects. So instead of  printing this generator object, let's just iterate over it using  a for loop, so, for, file in,  the generator object that is returned from the glob method. q Let's print file.  We run our program, there you go. So these are all the py files in my current directory, this could be different on your machine if you didn't follow the exercises I gave you earlier. For example, this utils.py, we created this as part of one of the exercises earlier in this course.  So don't worry if the files you see here are different on your machine.  So, you can use the glob method to search for files using  a pattern, we can also get all the files and directories in the current  path, so, we just use one asterisk, then run our program, take a look,  so we have this ecommerce directory, we have notes.txt, this is a file I  added earlier just to write notes as part of my presentation so you're not going to have this file. We also have a bunch of directories and files.  Even though python's standard library is comprehensive and has  so many modules for common tasks, it's not complete by any means.  That's why we have this directory called python package  index. Or pypi. And in this directory you can find hundreds  of packages for doing awesome things. These are packages that people like you and I have built as part of our projects, and then they have published it as part of this directory.  For other people to use. So that's why we have a fantastic community in python,  there are so many python developers out there and there are so many packages  right in front of us to reuse in our programs, let's say you want to send text messages in your programs, you don't have to build this functionality from scratch,  we can simply come to pypi.org and  search for sms aas you can see there are so many  projects or apckages that give you this functionality. Of course not every package, not every project is complete or bug free, some of them are still  in development or they have bugs, but if you look around I'm pretty sure  for any kind of function you can imagine there is a good  reliable and well documented package for you. In my complete python course,  I will show you some of those most useful packages on pypi. For example you will learn how to access the information on yelp.com in your programs. So you can write a program and search for businesses  registered on Yelp. Let's say you want to search for the best barber  in New York City. I will show you how to do that. You will also learn how to use a technique called  web scraping, which means you can build an engine and have that engine  browse a website, and extract information from HDML files. This is the same technique that Google does to index various websites. So they have several engines, or web crawlers, these web crawlers  are continuously looking at various websites and extracting information  from their pages. When you publish a blog post Google's web crawler  finds the title of your post, its keywords and so on. So,  I'm going to show you how to do that with Python, we'll also look at browser automation, and this is extremely  powerful, because you can automate testing of your web applications. So you might get a job as a test engineer, and  your daily job is to browse a website, click here and there, fill out this form, that form, and  ensure that this website is functioning properly. You can automate all that  with a powerful python package called selenium, as I have shown in my complete, as I show in my complete python course. Now in this tutorial, I'm going to show you how to install packages, from pypi.org. So,  here on pypi.org let's search for open py xl. This is a package that we use for working with excel  spreadsheets. So let's search for this package, there you go, so currently  it's at version 2.5. On the top you can see,  this instruction pip install open pyexcel.  this is the command that we need to type in the terminal window to install this package into our program, so back to pycharm,  here on the status bar. You can open up a terminal window for executing  various commands. So let's open it, now if you're on Windows  you're probably going to see something different instead of this dollar sign, don't worry about that just execute this command I'm going to show you. So pip install open py xl Make sure to spell everything properly. So pip is the tool,  that comes with a python installation, and we use it to install or uninstall packages registered on pypi.org. So here,  we're using pip to install this package. open py  xl. Enter, let's go ahead with that, it's going to take a few  seconds, oaky done, now we can import this package and it's modules just like the built in modules in python, or the modules that we have in our project. Now if you're curious where this package is stored on disc let me show you. So open up the project panel,  and then expand external libraries, next expand python 3, and then expand sight packages.  This is where all these packages that we installed with pip are stored.  So here we have open py xl, you can open this,  in this folder we have another folder called cell, now Now, look what we have here you have this init type, earlier I told you that whenever we add this file to a folder, python treats that folder as a package, so sell is a package, and this package we have is modules. Sell, interface, read only and text.  So as you can see, this package openpyxl has several subpackages like cell, start, chart sheet and so on.  And in each package we have several modules, in the next tutorial I will show you how to work with excel files.  So we have covered all the core concepts in Python, I hope you have learned a lot.  please support my hard work by liking this video and sharing it with others.  And be sure to subscribe to my channel for more tutorials like this. Next we're going to work on our first python project that involves automation.  You're going to write a python program that can process thousands of spreadsheets in under a second. Are you excited? Let's get started. In this tutorial I'm going to show you something really awesome you can do with python. You're going to  learn how to process spreadsheets, and this is extremely valuable in situation where you have hundreds or thousands of spreadsheets that need to be updated. If you want to do this by hand it may take hours or days  weeks, or even months, you can simply build a python program in less then  half an hour. And have that python program, automatically process thousands of spreadsheets in under one second. So, here we're going to work on this excel spreadsheet. You can download this below this video. In this spreadsheet we have three columns, transaction ID, product ID, and press. Now don't worry about the fourth column yet.  So in this spreadsheet we're going to record all kinds of transactions, but let's say due to an error, it could be a human error or a system error. The price that we have here is wrong. Let's say we need to decrease this by 10 percent.  If you want to do this manually, we'll have to come back here and  add a formula, so we typed out equal sign, let's say you want to recalculate say you want to recalculate the value of this cell. have to get that and then multiply it by 0.9 and that is like 90% of the original price, we are reducing the original reducing the price by 10%. Now when you hit enter you can see the updated price.  Next we'll have to come back here, select this cell and apply the same formula to all the other rows. Now what if you have thousands of rows here? You'll have to scroll up and down, this is going to be very tedious.  So we're going to write a python program that will do this for us. It's going to auotmate this process and not only that it will also add this beautiful chart right here,  once again if you want to open up hundreds or thousands of spreadsheets  and add a chart to each one, this is going to take at least a week or two Our python program is going to do all of this in a matter of seconds. So, let's get started. Alright the first thing I want you to do is to download this transactions file and add it to your project.  I put the link below this video for you to download. So if you're wondering  how to put this in this project, you can simply right click the project,  and if you're on Mac you have this item where reveal in finder, if you're on Windows you should see something like reveal in explorer, or file explorer, or whatever it's called when you click this, this opens up the direct  on your machine where this is stored. So simply copy paste the transactions file right here. Now,  here on the top, first we need to import the open py excel package.  So import open py excel, we can give it a  an alias to make our code shorter. So asxl.  This is not required but it just makes our code a little bit cleaner.  Let me show you. So now instead of typing open pyxl. we type xl. okay so that's an alias for this package. Now in this package we have a function for loading an xl  workbook. So let's call load workbook,  and as the argument we pass transactions.  .xlsx. So this we load our excel workbook and return a workbook object.  Okay? Now if you open this workbook, you can see you add only 1 sheet, and that is called sheet 1, so to access that you use  square brackets, and specify the name of the sheet,  that is sheet one, make sure to spell this with a capital  S. Because this is case sensitive, if you don't spell it properly  you're going to get an error, so this returns a sheet,  now in this sheet, we have various cells. So next you need to learn how to access a particular cell, and that is very easy. back to py charm, with this sheet object, you can use  square brackets and give the coordinate of a cell.  Coordinate is the combination of the column and the row.  For example, this cell it's coordinate is a1.  So back to pycharm, we can type a1, and this returns  our first cell. Also, there is another approach to getting a cell, instead of using square brackets with a string, we can use the cell method of the sheet object, so,  sheet.cell, you pass the row and the column, so row  and column 1 these return the exact same  cell. Now let's print the value of this cell, cell.value and run our program so  the value is transaction id, beautiful,  so now we need to iterate over all these rows and for each row we need to get the value  in the third column. That is the price. We'll get that and then multiply  by 0.9. So first we need to know how many rows  we have in this spreadsheet. We can get that from the sheet object so sheet has an attribute called mx_ row. Let's print this, so in this sheet,  we have 4 row, and you can verify that here. So we have a total of 4 rows. So we need to add a for loop. that would generate the numbers 1-4. So,  let's delete this print statement, nd add a for loop  for row in were going to use the range function unction to generate a range of numbers,  starting from 1, all the way to sheet  .max_grow. Plus 1. The reason we're  adding 1 to this, is because as I told you before this range function  will generate numbers, starting from this value all the way to this value, but it will not include the second value. So currently  max row returns 4, if you use range of 1-4 this will generate  the numbers 1, 2, and 3, but not 4.  So to include 4, we need to add 1 to it. Let's go over here,  so we tied sheet.max underline row plus 1.  Now before going any further let's just print row and make sure our program is working up to this point. So let's run  this, we get the numbers 1-4 beautiful.  So now we can easily get the cells in the third column. However we don't really want this first cell, that's the heading.  so technically you want to ignore the first row. Back here, you want to change  our range function, and start from 2. Now,  we're going to use sheet.cell to get access to the cell at this row. And the column should be 3.  We get a cell object, let's print it's value and make sure you're on the right track, so run the program these are the values we get. 5.95 6.95 and 7.95 these are the values of the third column. Next we need to multiply each value by 0.9 so instead of printing  cell.value we multiplied by 0.9 and this is the corrected underline price,  so this is the mistake we're going to make with our program, now we need to add a new cell to our worksheet, so we want to add all the corrected prices, ia  new column, it could also overwrite the values in this column,  but in this tutorial I'm going to show you how to add a new column. So using the same method, now we need to get a reference to the cell, to the given  row, but in the fourth column. So, we call sheet .cell, and pass row and four as the arguments.  Once again, this returns a cell object, let's store that in a  separate variable and call it price_cell. So note that my variable names are  very descriptive. There is no guess work. You have corrected price which holds actual value and we have corrected price, which is a cell object in this spreadsheet. Next we have to set the value in this cell. So we set corrected price cell. value to this corrected price. With these few lines  we can easily update our spreadsheet, but first we need to save it. So,  after our for loop, we call workbook. save. Now let's save this in a new file because we don't want to accidentally overwrite the original file in case our program has a bug so, I'm going to call that transactions 2.sms  ex. And finally let's run our program,  so, you can see that happened in a split of a second, now here we have a new file tranactions 2. When we open this we get something like this.  So you can see we have this 4th column with the updated prices. Beautiful. So half of the problem is solved, now we need to add a chart here. To add a chart, we need to add a couple classes on the top, so,  after this import statement let's type out from  open py excel.chart, import, bar chart,  comma, reference.  So lets see what's going on here. In this package you have a module  chart, and from this module we're importing two classes, bar chart,  and reference. Again, look at the naming convention used  here. The first letter of e very word is capitalized. Also it's better to add a line break after our import statements to make our code cleaner. So, before we save our workbook, we need to add achart to the current sheet. First we need to select a range  of values. For this exercise, I'm going to select the values in the fourth column/. So all the values in rows 2-4 these are the values I'm going to use in our chart. Now in this part 2 example it doesn't really make sense to add a chart per transaction, but that doesn't really matter we just want a bunch of numbers to create a chart, so after our for loop, we're going to use the reference class to select a range of values. Now the first argument in the constructor is the sheet. So we pass our sheet here, then we add 4 keyword arguments, the first one is min_row, we set this to 2. The second one is max_row we set this to the maximum row in this sheet. That is sheet,  .max_row, so we want to select the cells in row 2-4. kay? Now to make this code a little bit cleaner  I'm going to put this on a new line, so we can see clearly, now this is going to select all the cells  in all the columns in these rows. That's not what we want.  we only want the values in the fourth column, so back here we need to set a couple more key word arguments men_call or column, we set that to for, and also  max underline call, we set that to 4 as well. So we are limiting the range of cells we're selecting to the fourth column.  Now, we're creating an instance of the reference class, let's store the result in a variable called values, so this values object  will have all these values in the fourth column, now we are ready to create  a chart, so we create an instance of the bar chart class and store it in this object.  Next, we call chart.add_date and  pass our values. That is pretty straight forward finally we need to add this chart  to our sheet. So, we call sheet,  .add_chart and pass this chart object  We should also specify where we want to add this chart. let's say we want to add it here, on row 2, after the fourth column.  So the coordinate of this cell is e2, and this is going to be,  the top left corner of our chart. So as the coordinate I'm going to pass e2 that's all we had to do, done. Let's run our program one more time, beautiful, let's open up the update workbook. And here's the end result, so right after the fourth column, we have this beautiful chart. Now we could take this to the next level,  we could add a legend here, we could change the color of these bars, we could even use a different  kind of chart, it doesn't have to be a bar chart. So to learn more about this we can read the documentation for openpyxl. So our program is complete, for our code is dirty, it's not clean, it's not  organized. We don't have any functions here. We have written all the code in app.py.  So let's goo ahead and organize this code like a professional software developer.  So, on line 4, we are loading our workbook  then we're getting a reference to the first sheet, but we don't really need these two lines here  this is purely for demonstration to show you how to access a cell. So,  let's delete these unnecessary lines, this is a very important practice as you're coding always look at your code, always review it, see if you have some code that is not used. Always delete those. Okay, next we are iterating over  all the rows, fixing the prices, and then  we select the values to add a chart, and finally we save the workbook.  Now, if you were going to use this to automate the process of updating thousands of spreadsheets, this program wouldn't work, because it's only  relying on this file. So we want o reorganize this code, and  move it inside of a function. This function should take the name of a function So let's define a function. Let's call it process_workbook.  It gets a file name. Now, we move all the code inside  of this function, so let's select everything, and press tab, beautiful, now back to our function, instead of loading this transactions file we're going to load this file name, that's better,  Also, now that our program is working properly, there is really no need to store the result in a separate file. So here we can simply overwrite the same file. So let's pass file name, that is the end of our function, so,  now, we have this reusable function, we can simply reuse this to process thousands of spreadsheets. Earlier in this python course you learned  how to find all the files in a  directory, so we can get each file in a directory  and pass the name of the file to this function, this function will go ahead and update this spreadsheet in just a second or less.  So, that was just one example of using python to automate  repetitive boring task that waste your time. But automation is not just about processing excel spreadsheets, there are so many things we can automate.  Here's a question for you, what do you want to automate, how do you want to use python to make your life easier? Use the comment box below and let me know. I love to hear about your ideas. Next we're going to work on  project which involves machine learning, which is a  subset of artificial intelligence. Are you excited?  Let's get started.  In this section, you're going to learn about machine learning, which is a subset of AI or artificial intelligence. It's one of the trending topics in the world,  these days, and it's going to have a lot of applications in the future. Here's an example. Imagine I ask you to write a program to scan an image, and tell if it's a cat or a dog. If you want to build this program using traditional programming techniques, your program is going to get overly complex  You will have to come up with lots of rules to come up with specific curves edges and colors in an image to tell if it's a cat or a dog.  But if I give you a black and white photo, your rules may not work, they may break. Then you would have to rewrite them. Or I may give you a picture of a cat or a dog from a different angle that we did not predict before. So solving this problem  using traditional programming techniques is going to get overly complex or sometimes impossible. Now to make the matter worse. What if I ask you to extend this program such that it supports 3 kinds of animals.  Cats, dogs, and horses, once again you will have to rewrite  all those rules. That's not going to work. So machine learning is a technique  to solve these kinds of problems, and this is how it works. We build a model or an engine and give it lots and lots of data.  For example, we give it thousands or tens of thousands of pictures of  cats and dogs. Our model will then find and learn patterns and the input  data, so we can give it a new picture of a cat that we haven't seen before.  And ask it, is it a cat or a dog or a horse  and it will tell us with a certain level of accuracy, the more input data we give it, the more accurate our model is going to be. So that was a very basic example, but machine learning has other applications in self driving cars,  robotics, language processing, vision processing,  forecasting things like stock market trends and the weather, games and so on. So that's the basic idea about machine learning. Next we'll look at machine  learning in action.  A machine learning project involves  a number of steps, the first step is to import our data which often comes in the form of a csv file. You might have a database with lots of data,  we can simply export that data and store it in a csv file for the purpose of our machine learning project. So we import our data, next,  we need to clean it. And this involves tasks such as duplicated data. If you have duplicates in the data, we don't want to feed this to the model, because otherwise our model will learn bad patterns in our data and will produce the wrong result,  so we should make sure that our input data is in a good, and clean shape. If there is data that is irrelevant we should remove them, if there are duplicates or incomplete we can remove or modify them, if our data is  text based, like the name of countries, or genres of music,  or cats and dogs, we need to convert them to numerical values.  So this step really depends on the kinds of data we're working with, every project  is different. Now that we have a clean data set, we need to split it into two segments. One for training our model, and the other for testing it, to make sure our model produces the right result. For example, if you have 1,000 pictures of cats and dogs, we can reserve 80% for training, and another 20% for testing.  The next step is to create a model, and this involves selecting  an algorithm to analyze the data. There are so many machine learning algorithms  out there, such as decision trees, neural networks and so on. Each algorithm have pros and cons in terms of accuracy and performance  so the algorithm you use, depends on the kind of problem you're trying to solve and your input data. Now the good news isnthat we don't have to explicitly program an algorithm, there are libraries out there that provide these algorithms, one of the most popular ones, which we are going to look at  in this tutorial, is side kick learn. So we build a model using an algorithm ,  next we need to train our model. So we feed it our training data.  Our model will then look for the patterns in the data, so enxt we can ask it to make predictions. Back to our examples of cats and dogs,  we can ask our model is this a cat or is this a dog and our model  will make a prediction, now the prediction is not always accurate in fact when you start out, it's very likely your predictions are inaccurate.  So we need to envalue the predictions and measure their accuracy.  Then we need to get back to our model and either select a different algorithm  that is going to produce a more accurate result for the kind of problem  we're trying to solve. Or fine tune the parameters of our model. So each algorithm has parameters that we can modify to optimize the accuracy. So these are the high level steps that you follow in a machine learning  project. Next we'll look at the libraries and tools for machine learning.  In this lecture we're going too look at the popular python library that we use in machine learning projects. The first one is numpy which provides a multidimensional array. A very, very, popular library.  The seconnd one is pandas, which is a data analysis library that provides a concept called data frame. Data frame is a two dimensional  data structure similar to an excel spreadsheet. So we have rows and columns  we can select columns in a row or a column or a range of rows and columns, again, very very popular in machine learning  and data science projects. The third library is mad plot lib which is a two dimensional plotting library for creating graphs on plots.  The next library is sidekick learn, which is one of the most popular machine learning  libraries that provides all these common algorithms like decision trees,  neural networks and so on. Now, when working with machine learning  projects, we use an environment called jupiter for writing our code, technically we can still use vs code or any other code editor, but these editors  are not ideal for machine learning projects, because we need to frequently  inspect the data, and that is really hard in environments like vs code and  terminal. If you're working with a table of 10 or 20 columns  visualizing this data in a terminal window is really, really difficult and messy, so thats why we use jupiter. So that's why we use jupiter, it makes it really easy to inspect our data.  Now to install jupiter, we are going to use  platform called anaconda.  So, head over to Anaconda.com/download. On this page you can download Anaconda distribution for your operating system,  so, we have distributions for Windows Mac and Linux. So let's go ahead and install  Anaconda for python 3.7. Download,  Alright, so here's Anaconda, download it on my machine, let's double click this.  Alright, first it's going to run a program to determine if the software can be installed.  So, let's continue and once again continue,  pretty easy, continue one more time,  I agree with the license agreement, we can use the default  you ca use the default installation location so don't worry about that, just click install, give it a few second, now the beautiful thing about Anaconda is it will install jupiter, as well as all those data popular science libraries  like numpy, Pandas and so on. So we don't have to manually install this using pip. Alright now as part of the next step Anaconda is suggesting to install Microsoft vs code. We  already have this on our machine so we don't have to install it we can go with continue  and close the installation, now finally we can move the this to trash because we don't need this installer in the future. Alright, now open upa  terminal window and type  jupiter, with a y, space, notebook.  This will start the notebook server on your machine. So enter there you go. This will start the notebook server  on your machine, we can see these default messages here, don't worry about them, now  it automatically opens a browser window, pointing to local host  port 888. This is what we call jupiter dashboard. On this dashboard we have a few tabs, the first tab is the files tab, and by default, this points to your home directory. So every user on your machine has a home directory, this its my home directory  on Mac, you can see here we have a desktop folder as well as documents,  downloads and so on. On your machine you're going to see different folders, so somewhere so somewhere on your machine you need to create a jupiter notebook. I'm going to go to desktop here's my desktop I don't have anything here, and then click new, I want to create a notebook for python  3. In this notebook we can write python code, and execute it line by line. We can easily visualize our data as you can see over the next few videos. So,  let's go ahead with this,  alright, here's our first notebook, you can see by default it's called untitled, let's change that to Hello World so this is going to be the hello world of our machine learning project. Let's rename this now if you look at your desktop you can see this file  hello world.ipynb. This is a jupiter  notebook. It's kind of similar to our py files where we write our python code, but it includes additional data that jupiter uses to execute our code. So back to our notebook, let's do a print hello world.  And then, click this run button here and here's the result printed in jupiter, so we don't have to navigate back and forth between the terminal window we can see all the result right here. Next I'm going to show you how to load a data set from a  csv file in jupiter.  Alright, in this lecture we're going to download a data set from a very popular website called caggle.com. Caggle is basically a place to do data science projects.  So the first thing you need to do is to create an account, you can sign up with Facebook,  Google, or using a custom email and password, once you sign up then come back  here, on caggle.com, Here one the search bar  search for video game sales.  This is the name of a very popular data set that we're going to use in this lecture. So,  here in this list you can see the first item with this kind of reddish  icon, so, let's go with that, as you can see this data set includes the sales data for more then 16,000 videos  games. On this page you can see the description of various  columns in this data set, we have rank, name, platform,  year, and so on, so here's our data source, it's a csv file called vg sales.csv, as you can see there are over 16,000 rows, and 11 columns in this data set.  Right below that you can see the first few records of this data set.  So, here's our first record, the ranking for this game is 1, it's the wi sport  game for wii as the platform and it was released in the year 2006, now, what I want you to do is go ahead and  download the data set, and as I told you before you need to sign in before you can download this. So this will give you a zip file as you can see here,  here's our csv file, now I want you to  put this right next to your jupiter notebook, on my machine that is on my desktop so I'm going to drag and drop this onto the desktop folder.  Now, if you look at the desktop you can see here's my  jupiter, hello world notebook, and right next to that we have  vgsales.csv. With that, we go back  to our jupiter notebook, let's remove the first line and instead  import pandas  as pd. With his we're importing pandas module  and renaming it to pd, so we don't have to type pandas. several times in this code. Now let's type pd. read_csv. And pass the  name of our csv file. That is vgsales. csv. Now because this csv file, is in the current folder right next to our jupiter notebook,  we can easily load it, otherwise we have to supply the full path  to this file. So, this returns a  data frame object which is like an excel spreadsheet. Let me show you. So we store it here, and then we can simply type df to inspect it. So one more time let's run this program  here's our data frame with these rows and these columns so we have frank name platform and so on. Now this data frame object  has lots of attributes and methods that we're not going to cover in this tutorial, that's really beyond the scope of what we're going to do, so I'm going to leave it up to you to read pandas documentation or follow other tutorials to find out about pandas data frames.  But in this lecture, I'm going to show you some of the most useful methods and attributes.  The first one is shape, so shape  let's run this one more time, so here's the shape of this data set, we have over  16,000 records and 11 columns.  Technically this is a 2 dimensional array of 16,000  and 11, okay? Now, we can see here we have another  segment for writing code. SO we don't have to write all the code in the first segment  so here in the second segment we can call one of the methods of the dataframe, that is df.describe.  Now when we run this program, we can see the output for each segment right next to it. So here's our first segment, here we have these three lines, and this is the output of the last line. Below that we have our second segment, here we're calling the describe method, and right below that we have the output of this segment So this is the beauty of jupiter, you can easily visualize  our datsa, doing this with vscode in windows is really tedious and clunky. So what is the describe method returning? Basically it's returning some basic information about each column in this data set, So,  as you saw earlier we have columns like rank, year and so  on. These are the columns with numerical values. Now for each column we have  the count which is the number of records in that column, you can se  our rank column has 16,5 -98 records whereas the year column has 16,3- -27 records.. So this shows that some of our records don't  have the value for the year column. We have null values. So in a real data science or machine learning project we'll have to use some  techniques to clean up our data set. One option is to remove the records  that don't have a value for the year column. Or we can assign them a default value.  That really depends on the project. Now another attribute for each column  is mean so this is the average of all the values, now in the case of the rank column, this rank doesn't really matter, but look at the year.  So the average year year for all these video games in our dataset is 2006. And this might be  important in the problem we're trying to solve.  We also have standard deviation, which is a  measure to quanitfy the amount of variation in our set of values, below that we have min, as an example the minimum value for the year column  is 1980. So quite often when we work with a  new data set,  we call the describe method to get some basic statistics about  our data. Let me show you another useful attribute.  So, in the next segment, let's type df.values.  Let's run this, as you can see this returns  a two dimensional array, this square bracket indicates the outer array and a second one represents an inner array.  So the first element inn our outer array, is an  array itself, these are the values in this array, which basically  represent the first row in our data set. So the video game we ranking  1, which is called wii sports. So this was a basic  overview of pandas data frames, in the next lecture I'm going to show you some of the useful shortcuts of jupiter.  In this lecture I'm going to show to you some of the most useful shortcuts in Jupiter,  Now the first thing I want you to pay attention to is this green bar on the left.  This indicates that this cell is currently in the edit mode, so we can  write code here. Now, if we press the  escape key, green turns to blue, and that means this cell is currently in the command mode. So basically the activated cell can either  be in the edit mode or command mode. Depending  on the mode, we have different shortcuts, so here we're in the command mode.  If we press h, we can see the list of all the  keybord shortcuts, right above this list we can  see, Mac OS modifier keys, these are the  extra keys on a Mac keyboard. If you're a Windows  user you're not gong to see these. So as an example, here is the shape of the  command key, this is control, this is option,  and so on. With this guideline you can easily understand the shortcut associated with  each command. Let  me show you. So here we have all  the commmands when a cell is in the command mode. For example, we have this command, open the command palette. This is exactly like the command palette that we have in vs code. Here is a short cut to execute this command. That is command shift and F.  Okay, so here we have lots of shortcuts,  of course you're not going to use all of them all the time, but it's good to have a quick look here to see  what is available for you. Tis these shortcuts you can write code much faster.  So let me show you somme of the most useful ones. I'm going to close this, now with our first cell in the command mode  I'm going to press b, and this inserts, a new  cell below this cell. We can also go  back to our first cell, press escape, now the cell is in the command  mode. We can insert an empty cell above this cell by pressing a.  So either a or b. A for above or  b for below. Now if you don't want this cell, you can press d  twice to delete  it. Like this.  Now in the cell I'm going to print a hello world message. So print  hello world. Now, to run the code in this cell, we can click on the run button here,  so, here's our print function, and  right below that you can see the output of this function. But note that when you run  a cell, this will only execute the code in that cell.  In other words, the code in other cells will not be executed.  Let me show you want I mean, so in the cell below the cell, I'm going to delete the call  to a describe method. Instead I'm going to print  ocean. Now, I'm going  to put the cursor back in this cell where we print this hello world message and run this cell. So we can see hello world  is displayed here, but the cell below is still displaying  the describe table, so we don't see the changes here. Now,  to solve this problem, we can go to the cell menu on the top,  and run all cells together. This can work for a  small project, but sometimes you're working with a large data  set, so if you want to run all these cells together it's going to take a lot of time. That is the reason jupiter saves the output of each cell, so we don't have to rerun that code if it hasn't changed. So this notebook file that we have here,  includes our source code organized in cells as  well as the output for each cell. That is why it's different  from a regular py file where we only have the source code. Here we also have autocompletion and intellisence, so in this cell,  let's call df data frame  . now if you press tab you can see all the attributes and methods in this object. So let's call  describe, now with the cursor on the name of the method we can press shift and tab, to see this tool tip that describes what this method does and what parameter it takes. So here in front of  so here in front of signature you can see the describe method, these are the paramter and their default value, and right below that you can see the description of what that method does. In this case, it describes generates descriptive statistics, that summarize the central tendency and so on.  Similar to vs code, we can also convert a line to comment  by pressing command and slash on mac, or control slash on windows. Like this. Now that line is a comment, we can  press the same shortcut one more time to remove the comment,  so these are some of the most useful shortcuts in jupiter.  Now over the next few lectures we're going to work on a real machine learning project, but before we get there,  let's delete all the cells here, so we start with only a single  empty cell, so here, in this cell, first I'm going to press the escape button, now the cell is blue, so we're in the command mode, and  we can delete the cell by pressing d twice. There you go.  Now, the next cell is activated and is in the command mode.  So, let's delete this as well, so we have two more cells to delete  there you go, and the last one, like this,  so now we have an empty notebook with a single cell. Over the next few lectures, we're going to work on a  real machine learning project,  imagine we have an online music store, when our users sign up,  we asked our age and gender, and based on their profile,  you recommend various music albums their likely to buy. So in this project,  you want to use machine learning to increase sales.  So, we want to build a model, we feed this model with some sample data,  based on the existing users. Our model will learn the patterns in our data,  so we can ask it to make predictions. When a new user signs up,  we tell our model, hey, we have a new user with this profile, what  is the kind of music, that this user is interested in, our model will say jazz, or hip hop,  or whatever, and baed on that we can make suggestions to the user so, this is the problem we're going to solve, now back to the list of steps in the machine  learning projects, first we need to import our data, then, we should prepare or clean it, next we select a machine learning algorithm  to build a model, we treat our model and ask it to make predictions.  And finally, we evaluate our algorithm to see it's accuracy. if it's not accurate we either fine tune our model or  select a different algorithm. So let's focus on the first step.  Head over to bit.ly/music.csv this is a very basic csv that I've created for this project, it's just some random made up data it's not real. So we have a table with 3 columns, age, gender, and genre. Gender  can either be one which represents a male,  or a 0, which represents a female, here I'm making a few assumptions.  I'm assuming that men between 20 and 25 like hip hop men between  26 and 30 like jazz, and after the age of 30,  they like classical music. For women I'm assuming  that if they are between 20 and 25 they like dance music, if they are between 26 and 30 they like acoustic music, and just like men, after the age of 30 they like classical music. Once again this is a made up pattern, it's not the representation of the reality, so,  let's go ahead and download this csv. Click on this ... icon here and download this file.  In my downloads folder, here we have this music.csv.  I'm going to drag and drop this onto the desktop because that's where I've stored this hello world notebook. So I want you to put this csv file  right next to your jupiter notebook.  Now, back to our notebook, you need to read the csv file, so just like before  first we need to import the pandas module, so import panda  as pd. And then we'll call pd,  .read_csv and  the name of our file is music.csv. As you saw earlier this returns a data frame which is a two dimensional array similar to an xl spreadsheet,  so let's call that music_ data. Now let's inspect  this music_data to make sure we loaded everything properly so run, so here's our data frame, beautiful, next we need to prepare or clean the data. And that's the topic for the next lecture.  next lecture.  The second step in a machine learning project, is cleaning, or  preparing the data, and that involves tasks such as removing duplicate  null values and so on. Now on this particular data set we don't have to do anything  kind of cleaning, because we don't have any duplicates, and as you can see  As you can see, all rows have values for all columns, so we don't have null values.  But there is one thing we need to do,  we should split this data set into two separate data sets, one into the first two columns, which we refer to as the input set, and the other  with the last column which we refer to as the output set. So when we train a model,  so when we train a model we give it two separate data sets. The input set and the output set.  The output set which is in this case  the genre column contains the predictions so we're telling our model that if we have a user who's 20 years old and a male they like  hip hop. Once we train our model then we give it a new input set. For example, we have a new user who is  21 years old and is a male, what is the genre of the music that this user probably likes. As you can see in our input set, we don't have  a sample for a 21 year old male, so we're going to ask  our model to predict that. That is the reason we need to split this data  set into two separate sets. Input and output  So back to our code, this data frame object has a  method called drop. Now if you put the cursor on the method name and press shift  and tab, you can see this tool tip, so this is the signature of this drop method, these are the parameters you can pass here.  the parameter we're going to use in this lecture is set to none by default. Witht his parter we can specify the columns we want to drop, so in this case we set columns  to an array with one string, genre  now this method doesn't actually modify the original data set.  In fact it will create a new data set but without thisq call. So by convention we use a capital X to  represent that data set, so capital x equals this  expression. Now, let's inspect x,  so as you can see our input set or x  includes these two columns, age and gender, it doesn't have the  output or predictions. Next we need to create our output set so,  once again we start with our data frame using data, using square brackets we can get all the  values in a given column. In this case, genre. Once again this returns  a new data set. By convention we use a lower case y to represent that. So that is our output  data. Let's inspect that as well. So,  in this data set we only have the predictions or the answers.  So we have prepared our data, next we want to create a model using an  algorithm.  The next step is to build a  model using a machine learning algorithm. There are so many algorithms out there, each algorithm  has its pros and cons, in terms of the performance and accuracy.  In this lecture we're going to use a very simple algorithm called decision tree.  Now the good news is we don't have to explicitly  program these algorithms, they're already implemented in a  library called side kick learn. So, here on the top,  from sklearn.tree  let's import the decision tree  classifier. So sklearn is the package  that comes with sidekick learn library, this is the most popular machine learning library  in python. In this package, we have a module called tree. And in this module we have a class called decision tree classifier.  This class implements the decision tree operator, okay? So, now we need to create a new instance of this class. So, at the end, let's create  an object called models nd set it to anew instance of decision,  tree classifier. Like this.  So now we have a model, next we need to train it so it learns patterns in the data, and that is pretty easy. You call model, .fit this method takes  2 data set. The input set and the output set.  So they are capital x, y.  Now finally, we need to ask our model to make a prediction, so we can ask it, what is the kind of music a 24 year old male likes? Now before we do that, let's temporarily inspect our initial data set. That is music data. So, look what we got here. As I told you earlier, I've assumed  that men between 20 and 25 like hip hop music but  here we only have 3 samples for men age  20, 23,and 25. We don't have a sample for  a 21 year old male. So if you ask our model to predict the kind of music  that a 21 year old male likes, we expect it to say hip hop. Similarly,  I've assumed that women between 20 and 25 like dance music,  but we don' have a sample for a 22 year old female. So once again if you ask our model to predict the kind of music that a 22 year old woman  likes, we expect it to say dance.  So, with these assumptions let's go ahead and ask our model  to make predictions. So let's remove  the last line, and instead we're going to call model  .predict. This method takes a  2 dimensional array. So here's the outer array. In this array, each element  is an array. So I'm going to pass  another array here, and in this array I'm going to pass a new input set.  a 21 year old male. So 21, 1 that is like a new record in this table. Okay? So,   this is one input set, let's pass another input for a 22 year old  female. So here's another array, here,  we add 22 comma 0, so we're asking our model to make 2 predictions  at the same time. We get the result and store it in a variable called predictions, and finally  let's inspect that in our notebook.  Run, look what we got, our model is saying that a 21 year old male likes hip hop, and a  22 year old female likes dance music. So our model successfully  will make predictions here. But wait a minute, building a model that makes  predictions accurately is not always that easy. After we build a model we need to measure it's accuracy. And if it's not accurate enough, we should either fine tune it or build a model using a different  algorithm. So next lecture I'm going to show you how to measure the accuracy of a model.  In this lecture I'm going to show you how to measure the accuracy of your models. Now in order to do so,  first we need to split our data set into two sets. One for training and the other  for testing, because right now, we are passing the entire data set,  for training the model and we're using 2 samples for  making predictions. That is not enough to calculate the accuracy of a model. A general rule of thumb is to annotate  70-80% of our data to training, and another20-30%  for testing, then instead of passing only two samples for making predictions, we can pass the data set for testing  we'll get the predictions and then compare the predictions with the actual values.  In the test set. Based on that, we can calculate the  accuracy. That's really easy, all we have to do is import a couple functions and  call them in this code. Let me show you. So first on this top from sklearn.model underline selection module we import a function called  train test split. With this function we can easily split our data set into two sets. So training and testing,  now, right here, after we define x and y,  sets, we call this funciton, so train  test split. We give it 3  arguments, x, y, ad a keyword argument that specifies  the size of our test dataset. So test _size we set it to 0.2 So we're allocating 20% of our data for testing. Now this functions returns a  tuple, so we can unpack it into 4 variables right here. x_train x_test y_train and y _test. so the first two variables  are the input sets for training and testing.  And the other are the output sets for training and testing,  now, when training our model,  instead of passing the entire data set we want to pass only the training data set.  So, x_train,  and y_train. Also, when making predictions  instead of passing these two samples, we pass  x_test. So thats the datas set.  That contains input values for testing. Now we get  the predictions. To calculate the accuracy we simply have to compare these predictions  with the actual values we have in the output set  for testing. That is very easy. First on the top,  we need to import a funciton, so, from sklearn.metric  .metrics import accuracy  _score. Now at the end.  We call this function, so accuracy score and  give it two arguments y_test. Which contains the expected values and  predictions which contains the actual value.  Now this functions returns an accuracy score between 0  to 1. So we can store it here,  and simply display it on the console. So let's go ahead  and run this program. So, the accuracy score  is 1 or a 100% but if we run this one more time, we're going to see a different result because every time we split our data set into  training a test sets. We'll have different data sets, because this function  randomly picks data for training and testing. Let me show you, so put the cursor  in the cell, now we can see this is activated  note that if you click this button here, it will run the cell and also insert a new  cell below this cell. Let me show you. So if I go to this second cell press the skip button, now we are in the command mode,  press d twice, okay now it's deleted, if we  click the run button, we can see, this code was  executed, and now we have a new cell, so if you want to run our cell multiple times  every time you have to click this and then run it, and then click again, and run it, it's a little bit tedious. So I'll show you a shortcut.  Activate the first cell, and press control and enter  this runs the current cell without  adding a new cell below it. So, back here, lets run it multiple times  okay, now look the accuracy dropped to 0.75, it's  still good, so the cuuracey scored here, is somewhere  between 75% to a hundred %. But let me show you something, if I  change the test size, from 0.2 to 0. 8, so essentially we're using only 20 percent of our data,  for training this model. And you're using the other 80%  for testing. Now let's see what happens when we run this cell multiple times. SO, control and enter, look, the accuracy immediately  dropped to 0.4 One more time, now 46%  40%, 26% it's really, really bad. The reason this is happening is because you are using very little data for training this model. This is one of  the key concepts in machine learning, the more data we give to our model and the cleaner the data is, we get the better result, so if you have duplicates,  irrelevant data, or incomplete values, our model will learn back patterns in our data. That's why it's really important to clean  before training our model. Now let's change this back to 0.  2, run this one more time, okay, now  the accuracy is 1, 75%, now we drop to 50%  again, the reason this is happening, is because we don't have enough data.  Some machine learning problems, require, thousands or even millions  of samples, to train model, the more complex a problem is,  the more data we need. For example, here we're only dealing with a table of three  columns, but if you want to build a model to tell if a picture of a cat or a dog or a horse,  or a lion, we will need millions of pictures, the more animal  it will support the more pictures we need. In the next lecture, we're going to talk about  model persistence.  So this is a  very basic implementation of building a training a model to make a prediction.  Now to simplify things I have removed all the code that you wrote in the last lecture for calculating the accuracy, because in this lecture, you're going to focus on a different topic, So basically we import our data set.  Create a  model, train it, and then  ask it to make predictions, now this piece of code that you see here, is not what we want to run everytime we have a new user or every time we want to make recommendations to an existing user sometimes it's really time consuming. In this example, we're dealing with a  very small data set that only has 20 records. But in a  real application,  you might have a data set with thousands or trillions of examples, training for that  might take seconds or minutes or even hours.  And that is wy model persistence is important, once in a while,  you build and train our model and then we save it to a file.  Now, next time we want to make predictions, we simply load the model from the file and  ask it to make predictions. That model is already trained  you don't need to retrain it, it's like an intelligent person. So let me show you how to do this. it's very very easy. On the top,  from sklearn.externals module we import joblib. This job lib object has methods for saving and loading modules. So,  after we train our model we'll simply call job lib .dump and give it  two arguments. Our model and the name of the file  in which we want to store this model. Let's call this music  -recommender.job lib  That's all we have to do. Now temporarily I'm going to comment  out this line, we don't want to make any predictions, we just want to store train model in a file. So let's run this cell with control,  and slash, okay, look, in the output  we have an array that contains the name of our model file.  So this is the return value of the dump method. Now back to our  desktop, right next to my notebook we can see our job lib file, this is where our model is stored.  It's simply a binary file. Now back to our  jupiter notebook. As I told you before in a real application we don't want to train model every time. So let's comment out these few lines, on Mac, we can press command and slash and on windows control slash. Okay, these lines are commented out, now this time, instead of dumping  our model, we're going to load it, so we call the load method, we don't have the model, we simply  pass the name of our model file. This returns our trained model. Now with this  two lines we can simply make predictions, so, earlier,  we assumed that men between 20-25 like hip hop music.  let's print predictions and see if our model is behaving  so control  so this is how we persist and load models.  Earlier in this section, I told you that decision trees are the easiest  to understand. And that's why we started machine learning with decision trees. In this lecture, we're going to  export our model in visual format, so you will see  how this model makes predictions, that is really, really cool.  Let me show you. So once again I've simplified this code so we simply import our data set, create  input and output sets, create a model, and  train it, that's all we are doing, now I want you to follow along with me, type everything exactly as I show you in this lecture. Don't worry about what everything means we'll come back to it shortly. So on the top, from sklearnimport tree, this object has a method for exporting our decision tree in a  graphical format. So after we  train our model, let's call tree  _graph vis. Now here are a few arguments we need to pass. The first argument is our model, the second is the name oft he output file. So here we're going to use keyword  arguments, because this method takes so many parameters, and we want to selectively pass  keyword arguments without worrying about their order. So,  the parameter we're going to set it out_file  let's set this to music-recommend  .dot. This is the dot format, which is the  graph format, which is a graph description language, you will see that shortly.  Now the other parameter you want to set is feature  _names. We set this to an array of two strings,  age and gender. These are the features  or the columns of our data set. So they are properties or features of our data. Okay? The other parameter  is class names. So class_names  we should set this to the list of classes or labels we have in our output data set, like hip hop, jazz, classical and so on.  So, this y data set includes all the genre or all the classes of our data, but they are repeated a few times in this data set.  So, here we call y.unit this returns  the unique list of classes, now we should sort this alphabetically.  So, we call the sorted function, and pass the  result a y.unique.  The next parameter is labeled, we set  this to a string, all, once again don't worry,  about the details of these parameters, we're going to come back to these shortly. So,  set label to all, then round it,  to true, and finally field to true. So,  so this is the end result, now let's run this sound  using control and enter, okay,  here we have a nw file music recommender .. that's a little bit funny. So we want to open this file with vs code.  So drag and drop this into a vs code window.  Okay, here's a dot format, it's a textural language for describing graphs  Now to visualize this graph we need to install an extension in vs code. So on the left side, click extensions panel and search  for dot, dot. Look at this second extension here.  graphvis or .language by stephon vs. Go ahead and install this extension  and then reload vs code. Once you do that, you can visualize  this dot file. So let me close this tab.  Alright, look at this ... on the right side. Click this,  you should have a new menu, open preview to the side. So like that alright, here's the visualization of our decision tree,  let's close the dot file, there you go. This is exactly  how our model makes predictions. So we have this binary tree, which means every node can have a maximum of two children. On top of each note we have a condition  if this condition is true we go to the child node on the left side. Otherwise we  go to the child node on the right side. So let's see what's happening here, the first condition  is age less then or equal to 30  .5. If this condition is false, that means that user is 30 years  or older, so the genre of the music that their interested in is classical.  So here we're classifying people based  on their profile. That is the reason we have the word class here,  so a user who is 30 years or older, belongs to the class of  classical. Or people who like classical music. Now what if this condition  is true. That means that user is younger then  30, so, now we check the gender, if it's less then 0.5,  which basically means it equals to 0, then  we're dealing with a female. So we go to the child node here,  now once again we have another condition, so we are dealing with a female  who is younger than 30. Once again we ned to check their age so  is the age less then 25.5? If that's the case  then that user likes dance music, otherwise they like acoustic music.  So this is a decision tree that our model uses to make predictions  Now if you're wondering why we have these floating point numbers like 25.5 These are basically the rules  that our model generates, based on the patterns in our dataset.  As we give our model more data, these rules will change so they are not always the same.  So they are not always the same, also the more columns or the more features  we have, our decision tree is going to get more complex.  We only have two features, age, and gender. Now back to our code  let me quickly explain the meaning of all these parameters, we set field to true  so each box or each node is filled with a color. We set  rounded to true, so they have rounded corners. We set label to all so every node has labels that we can read.  We set class names to the unique list of genres  and that's for displaying the class for each note, right here, and we set feature names to age and gender, sow e can see the rules  in our notes. So that was a short and  sweet introduction to machien learning. Now you can use the materials that you learn in this section  and apply them to solve a different set of problems. Now here's a question for you:  What ideas do you have for machine learning? What kind of problems do you want to solve  with machine learning? Use the comments box below and let me know. I love to hear about your ideas! Next we're going to use python and a popular framework called django. To build a web application. Are you ready, let's get started In this turorial, I'm going to show you how to create your first website with python, and A  and a very popular framework called django. So it's spelled with a silent D,  and is pronounced django. it's a web framework for perfectionists with deadlines. So if you're a perfectionist and you want to quickly put together a website that is fast, scaleable and secure,  django is your best friend. And here are the popular websites  built with Django. Like Instagram, Spotify YouTube, Washington Post, and so on. Now you might say what is a framework, and why do we need a framework to build a web application or a web site? Well, the framework is essentially a library of reusable modules these modules provide functionality for common tasks  for example, in the case of a web framework like django we have modules to work with http requests  url's, sessions, cookies and so on.  These are the concerns of pretty much every website or  application out there. So all this functionality is baked into django, we don't have to code it from scratch, that is why we use a framework like django. Now,  django. Now technically a framework is more then a library,  apart from providing these modules it also provides a structure for each application  It tells us what folders or files we should have in our project. So this provides a consistency among various django projects. So as you move from one company to another and work on different projects, you can easily transition from one project to another, because all these applications follow the same structure now, with that interaction, let's create our first  django project. So back to pycharm, close the hello world  project, and create a new project, create a new project,  let's call this new project pyshop go ahead, alright, now down at the bottom let's  open up a terminal window, in this window we're going to install django. So we use pip to install  django. But be sure to add two equal signs here followed by  2.1 With this we are telling pip that we want to install django version  2.1. The reason I'm doing this, is because in the future when you're watching this video,  chances are there is a newer version django out there. I  want to make sure that you can easily follow these tutorials, even though what I'm going to show you  in these tutorials will most likely work with the latest version of django. I just want to be on the safe side. So let's go ahead alright, django is installed,  next we need to create a django project, so here press control and L this cleans up our terminal window, you don't have to do it, but it's just easier to see. To create a django project, we need to execute this command, django,  -admin space  start project space, you're going to call this  project pyshop space period.  So when we install django, django brings a  command line utility called django admin so this is a utility or program that we can execute form the command line or terminal, right here.  Now, this program takes various arguments, in this case  we want to use this argument start project, with this we're going to create a project called pushup in the current folder.  So this period is imported here, that means the current folder, if you don't add this period, this utility is going to create an extra folder and that looks a little bit repetitive, so let's go ahead with this,  alright, now, back to the project panel, if you expand py shop we can see that this is our project that we created in pycharm  and in this folder we have these files.  So, init.py, you have seen this before, that means  this folder is package, so we can import various modules,  of this package into other modules, and in this module,  we define various settings for our application, you're going to see this later in this course. You also have this url's module, and with this module  we define what should the user see when they see slash about/contact/products/shopping cart again, we're going to work with this only. And finally we have this module, that wsgi, that is short for web server gateway interface. The purpose of this module is to provide a standard interface between applications built with django and web servers. This is  an advanced topic, so for now, don't worry about it. Now, outside of this folder,  of this folder you also have this new folder in our project  manage.py. As the name implies, we use this to manage  this django project. With this we can start our web server,   we can work with our data base, again, we're going to work with this soon,  let's open up the terminal window one more time, now,  type out this command, python if you're on windows or python  3 if you're on Mac, because as I told you at the beginning of the course, Mac by  default comes with an installation of python, that is python 2. But that is this course is python 3. So python 3 space manage  .py space run  server. What is going on here? So with python interpreter  we are running this program manage.py and passing run server  as an argument. This manage.py is essentially the same program  that we worked with here, django admin.  But we use django admin before creating a django project, now we have a django project, so now  in this project we work with manage.py this is a module that contains some python code, so we use this module to manage  our django project. So let's go ahead and "
_V8eKsto3Ug,"Welcome to our an introduction. I'm Barton 
Paulson. And my goal in this course is to   introduce you to our This is our, but also, 
this is our. And then finally, this is our,   it's arguably the language of data science. And 
just so you don't think I'm making stuff up off   the top of my head, I have some actual data. This 
is a ranking from a survey of data mining experts   on the software that they use most often in 
their work. And take a look here at the top   are is first. In fact, it's 50% more than Python, 
which is another major tool in data science. So   both of them are important. But you can see why 
I personally am fond of R. And why is the one   that I want to start with introducing you to 
data science. Now there's a few reasons that R   is especially important. Number one, it's free. 
And it's open source compared to other software   packages can be 1000s of dollars per year. Also, 
R is optimized for vector operations, which means   you can go through an entire row, or an entire 
table of data without you having to explicitly   write for loops. If you've ever had to do that, 
then you know, it's a pain. And so this is a nice   thing. Also, R has an amazing community behind it 
where you can find supportive people. And you can   get examples of whatever it is you need to do. 
And you can get new developments all the time.   Plus our has over 9000 contributed or third party 
packages available, make it possible to basically   do anything. Or if you want to put it in the words 
of Yoda. You can say this, this is our there is no   if only how, and in this case, I'm quoting our 
user Simon Blomberg. So very briefly, in some,   here's why I want to introduce you to our number 
one, because r is the language of data science,   because it's free, and it's open source. 
And because of the free packages that you   can download, install r makes it possible to do 
nearly anything when you're working with data. So   I'm really glad you're here. And then I'll have 
this chance to show you how you can use R to do   your own work with data in a more productive, 
more interesting and more effective way. Thanks   for joining me. The first thing that we need to 
do for our an introduction is to get set up. More   specifically we need to talk about installing 
are, the way you do this is you can download it,   you just need to go to the home page for the our 
project for statistical computing. And that's at   our dash project.org. When you get there, you 
can click on this link in the first paragraph   that says download our and then I'll bring you to 
this page that lists all the places that you can   download it. Now I find the easiest is to simply 
go to this top one, this has cloud because that'll   automatically direct you to whichever of the 
below mirrors is best for your location. When   you click on that, you'll end up at this page, 
the comprehensive our archive network, or CRAN,   which we'll see again, in this course, you need to 
come here and click on your operating system. If   you're on a Mac, it'll take you to this page. 
And the version you're going to want to click   on is just right here, it's a package file, 
that's a zipped application installation file,   click on that, download it and follow the 
standard installation directions. If you're   on a Windows PC, then you're probably going to 
want this one base again, click on it, download   it and go through the standard installation 
procedure. And if you're on a Linux computer,   you're probably already familiar with what you 
need to do. So I'm not going to run through   that. Now before we get a look at what is actually 
like when you open it, there's one other thing you   need to do. And that is to get the files that 
we're going to be using in this course. on the   page that you found this video, there's a link 
that says download files. If you click on that,   then you'll download a zipped folder called 
our oh one underscore entro underscore files,   download that unzip it. And if you want to put 
it on your desktop, when you open it, you're   going to see something like this a single folder 
that's on your desktop. And if you click on it,   then it opens up a collection of scripts. The 
dot r extension is for an R source or a script   file. I also have a folder with a few data files 
that we'll be using in one of these videos. If   you simply double click on this first file, whose 
full name is this, that'll open up in our and let   me show you what that looks like. When you open 
up the application Are you will probably get a   setup of windows that look like this. On the left 
is the source window or the script window where   you actually do your programming. On the right is 
the console window that shows you the output and   right now it's got a bunch of boilerplate text. 
Now coming over here again on the left, any line   that begins with a pound sign or hashtag or aka 
Thorpe is a commented line. That's not right. On   these other lines or code that can be run, by the 
way, you may notice a red warning just popped up   on the right side, that's just telling us about 
something that has to do with changes in our and   it doesn't affect us. What I'm going to do right 
here is I'm going to put the cursor in this line,   and then I'm going to hit Command or Control and 
then enter, which will run that line. And you can   see now, that is opened up over here. And what 
I've done is I've made available to the program,   a collection of data sets. Now I'm going to pick 
one of those data sets is the iris data sets very   well known as a measurement of three species of 
the iris flower. And we're going to do head to see   the first six lines. And there we have the sepal 
length, sepal width, petal length and petal width   of in this case, it's also Tosa. But if you want 
to see a summary of the variables, get some quick   descriptive statistics, we can run this next line 
over here. And now I get the quartiles. The mean,   as well as the frequency of the three different 
species of Iris, on the other hand, is really   nice to get things visually. So I'm going to run 
this basic plot command for the entire dataset.   And it opens up a small window, I'm 
gonna make it bigger. And it's a   scatterplot of the measurements or the three kinds 
of viruses, as well as a funny one where it's   including the three different categories, they're 
gonna close that window. And so that is basically   what our looks like and how our works in its 
simplest possible version. Now, before we leave,   I'm actually going to take a moment to clean up 
the application in the memory, I'm going to detach   or remove the datasets package that I added. 
I already closed the plot. So I don't need to   do this one separately. But what I can do is come 
over here to clear the console, I'm actually going   to come up to edit and come down to clear console. 
And that cleans it out. And this is a very quick   run through of what our looks like in its native 
environment. But in the next movie, I'm going to   show you another application we can install called 
our studio that lays on top of this, and makes   interacting with our a lot easier and a lot more 
organized and really a lot more fun to work with.   The next step and are an introduction and 
setting up is about something called our   studio. Now. This is our studio. And what it is 
is a piece of software that you can download,   in addition to our what you've already installed, 
and its purpose is really simple. It makes working   with our easier. Now there's a few different ways 
that it does is number one is it has consistent   commands. What's funny is, the different operating 
systems have slightly different keyboard commands   for the same operations. And our, our studio 
fixes that. And it makes it the same whether   you're on Mac, Windows or Linux. Also, there's 
a unified interface instead of having two,   three or 17. windows open, you have one window 
with the information organized, and also makes   it really easy to navigate with the keyboards 
and to manage the information that you have in   our and let me show you how to do this. But first 
we have to install it, where you're going to need   to do is to go to our studios website, which is at 
our studio.com. From there, click on download our   studio. Now bring it to this page or something 
like it. And you're going to want to choose   the desktop version. Now, when you get there, 
you're going to want to download the free sort of   community version as opposed to the $1,000 a year 
version. And so click here on the left. And then   you're going to come to the list of installers for 
supported platforms, it's down here on the left,   this is where you get to choose your operating 
system. Click the top one if you have windows. The   next one if you have a Mac and then we have lots 
of different versions of Linux, whichever one you   get, click on it, download it and go through the 
standard installation process, then open it up.   And then let me show you what it's like working 
in our studio. To do this, open up this file and   we'll see what it's like in our studio. When you 
open up our studio, you get this one window that   has several different panes in it. At the top, we 
have the script or the source window. And this is   where you do your actual programming. And you'll 
see that it looks really similar to what we did   when I opened up the our application. The color is 
a little different. But that's something that you   can change in preferences or options. The console 
is down here at the bottom. And that's where you   get the text output. Over here is the environment 
that saves the variables if you're using any and   then plots and other information show up here 
in the bottom right. Now you have the option   of rearranging things and changing what's there 
as much as you want. Our studio is a flexible   environment. And you can resize things by simply 
dragging the divider between the areas. So let me   show you quick example, using the exact same code 
that I did in my previous example. So you can see   how it works in our studio as opposed to the 
regular our app that we use first time. First,   I'm going to load some data, that's by using 
the datasets package, I'm going to do a Command   or Ctrl N, enter to load that one. And you 
can see right here, it's run the command.   And then I want to do the quick summary of 
data I'm going to do head Irish shows the   first six lines. And then here it is down here, 
I can make that a little bit bigger if I want.   Then I can do a summary by just coming back 
here, and clicking Command or Control Enter.   And actually, I'm going to do a keyboard command 
to make the console bigger now. And then we can   see all of that, I have the same basic descriptive 
statistics and the same frequencies there. And go   back to how it was before. And make this bring 
this one down a little. And now we can do the   plot. Now this time, you see it shows up in this 
window here on the side, which is nice. It's not   a standalone window. Let me make that one bigger, 
it takes a moment to adjust. And there we have the   same information that we had in the our app. 
Right here, it's more organized in a cohesive   environment. And you see that I'm using keyboard 
shortcuts to move around. And it makes life really   easy for dealing with the information that I have 
in our I'm going to do the same cleanup, I'm going   to detach the package that I had, this is actually 
a little command to clear the plots. And then here   in our studio, I can run a funny little command 
that'll do the same as doing Ctrl l to clear the   console for me. And that is a quick run through 
of how you can do some very basic coding in our   studio, again, which makes working with our more 
organized more efficient and easier to do overall.   In our very basic introduction to our and setting 
up, there's one more thing I want to mention that   makes working with are really amazing. And that's 
the packages that you can download install.   Basically, you can think of them as giving you 
have superpowers when you're doing your analysis,   because you can basically do anything with 
the packages that are available. Specifically,   packages are bundles of code. So it's more 
software that add new function to our makes it   so we can do new things. Now, there are two kinds 
of package two general categories. There are base   packages, these are packages that are installed 
with our so they're already there. But they're   not loaded by default. That way, our doesn't use 
maybe as much memory as it might otherwise. But   more significant than that are the contributed 
or third party packages. These are packages that   need to be downloaded, installed, and then 
loaded separately. And when you get those,   it makes things extraordinary. And so you may 
ask yourself, where to get these marvelous   packages that make things so superduper? 
Well, you have a few choices. Number one,   you can go to CRAN. That's the comprehensive 
our archive network, that's an official,   our site that has things listed with the official 
documentation, too, you can go to a site called   CRAN tastic, which really is just a way of listing 
these things. And when you click on the links,   it redirects you back to CRAN. And then third, 
you can also get our packages from GitHub,   which is an entirely different process. If 
you're familiar with GitHub, it's not a big   deal. Otherwise, you don't usually need to deal 
with it. But let's start with this first one,   the comprehensive our archive network, 
or CRAN. Now, we saw this previously,   when we were just downloading our This time, 
we're going to CRAN dot r dash project.org.   And we're specifically looking for this one, 
the CRAN packages, that's gonna be right here   on the left click on packages. And when you open 
that, you're gonna have an interesting option.   And that's to go to task views. And that breaks 
it down by topic. So we have here, packages that   deal with Bayesian inference packages that deal 
with chemo metrics, and computational physics,   so on and so forth. If you click on any one of 
those, it'll give you a short description of   the packages that are available and what they're 
designed to do. Now another place to get packages,   I said, is CRAN tastic, at CRAN tastic.org. And 
this is one that lists the most recently updated   the most popular packages. And it's a nice way of 
getting some sort of information about what people   use most frequently, although it does redirect 
you back to CRAN to do the actual downloading.   And then finally@github.com if you go to slash 
trending slash R, you'll see the most common   are most frequently downloaded packages on GitHub 
for use and are now regardless of how you get it,   let me show you the ones that I use most often and 
I find these Make working with are really a lot   more effective and what easier. Now they have kind 
of cryptic names. The first one is d plier, which   is for manipulating data frames, then there's 
tidy or for cleaning up information, stringer   for working with strings or text information. 
lubra date for manipulating date information.   h TT er for working with website data. GG ww is 
where the GG stands for grammar of graphics. This   is for interactive visualizations. GG, plot two 
is probably the most common package for creating   graphics or data visualizations in our SHINee is 
another one that allows you to create interactive   applications that you can install on websites. 
reo is for our input output is for importing and   exporting data. And then our markdown allows you 
to create what are called interactive notebooks or   rich documents for sharing your information. Now, 
there are others, but there's one in particular,   that thing's useful. I call it the one package 
to load them all. And it's Pac Man, which not   surprisingly, stands for package manager. And 
I'm going to demonstrate all of these in another   course that we have here. But let me show you very 
quickly how to get them working. He just tried   an R. If you open up this file from the course 
files, let me show you what it looks like. What   we have here in our studio is the file for this 
particular video. And I say that I use Pac Man,   if you don't have it installed already, then run 
this one installation line. This is the standard   installation command in R. And now add Pac Man, 
and then it will show up here and packages. Now   I already have it installed. So you can see it 
right there. But it's not currently loaded. See   because installing means making it available 
on your hard drive. But loading means actually   making it accessible to your current routines. 
So then I need to load it or import it. And I   can do it with one of two ways. I can use the 
require, which gives a confirmation message,   I can do it like this. And you see it's got that 
little sentence there. Or I can do library which   simply loads it without saying anything. You 
can see now by the way that it's checked off,   so we know it's there. Now, if you have 
Pac Man installed, even if it's not loaded,   then you can actually use Pac Man to install other 
packages. So what I actually do is because I have   Pac Man installed, I just go straight to this one 
you do Pac Man and then the two colons. It says,   use this command, even though this package isn't 
loaded. And then I load an entire collection,   all the things that I showed you starting with Pac 
Man itself. So now I'm going to run this command.   And what's nice about Pac Man is, if you don't 
have the package, it will actually install it,   make it available and load it. And I gotta tell 
you, this is a much easier way to do it than the   standard r routine. And then, for base packages, 
that means the ones that come with are natively   like the data sets package, you still want to do 
it this way you load and unload them separately.   So now I've got that one available. And then I can 
do the work that I want to do. Now I'm actually   not going to do it right now, because I'm going to 
show it to you in future videos. But now I have a   whole collection of packages available, they're 
going to give me a lot more functionality and   make my work more effective. I'm going to finish 
by simply unloading what I have here. Now if   you want to with Pac Man, you can unload specific 
packages, or the easiest way is to do p underscore   unload all. And what that does is it unload all 
of the add on or contributed third party packages.   And you can see I've got the full list 
here of what is unloaded. However,   for the base packages like data sets, you 
need to use the standard r command detach,   which I'll use right here. And then I'll clear 
my console. And that's a very quick run through   of how packages can be found online installed into 
our and loaded to make your code more available.   And I'll demonstrate how those work in basically 
every video from here on out. So you'll be able   to see how to exploit their functionality to 
make your work a lot faster and a lot easier.   Probably the best place to start when you're 
working with any statistics program is basic   graphics so you can get a quick visual impression 
of what you're dealing with. And the command and   are the next simplest of all, is the default plot 
command is also known as basic x, y plotting for   the x and y axes on a graph. And what's neat about 
RS plot command is that it adapts to data types   and to the number of variables that you're dealing 
with. Now, it's going to be a lot easier for me to   simply show you how this works. So let's try it 
in our just open up the script file and we'll see   how we can do some basic visualizations in our 
The first thing that we're going to do is load   some data Data Sets from the data sets package 
that comes with our, we simply do library data   sets. And that loads it up, we're gonna use the 
iris data, which I've showed you before. And   you'll get to see many more times. Let's look 
at the first few lines. I'll zoom in on that.   And what this is, is the measurement of the Siebel 
m petal length and width for three species of   viruses is a very famous data set about 100 years 
old. And it's a great way of getting a quick feel   for what we're able to do and are, I'll come back 
to the full window here. And what we're going to   do is first get a little information about the 
plot command to get help on something in our   just do the question mark, and the thing you want 
help for. Now we're in our studio. So this opens   up right here in the help window. And you see 
we've got the whole set of information here,   all the parameters and additional links, you can 
click on and then examples here at the bottom.   I'm going to come over here and I'm going to use 
the command for a categorical variable first.   And that's the most basic kind of data that we 
have. And so species, which is three different   species is what I want to use right here. So I'm 
going to do plot, and then in the parentheses,   you put what it is you want to plot. And what I'm 
doing here is I'm saying it's in the data set,   Iris, that's our data frame, actually. And then 
the dollar sign says use this variable that's   in that data. So that's how you specify the whole 
thing. And then we get an extremely simple three   bar chart, I'll zoom in on it. And what it tells 
you is that we have three species of Iris setosa,   versicolor, and virginica, and then we have 50 of 
each. And so it's nice now that we have balanced   group that we have three groups because that 
might affect some of the analyses that you do.   And it's an extremely quick and easy way to 
begin looking at the data all zoom back out.   Now let's look at a quantitative variable, so 
one that's on an interval or nominal level of   measurement. For this one, I'll do petal length. 
And you see I do the same thing plot and then Iris   and then peddling. Please note I'm not telling 
are that this is now a quantitative variable. On   the other hand, it's able to figure that one out 
and by itself. Now, this one's a little bit funny,   because it's a scatterplot, I'm going to zoom in 
on it. But the x axis is the index number or the   row number in the dataset. So that one's really 
not helpful. It's the variable that's going on the   Y, that's the petal length that you get to see the 
distribution. On the other hand, you know that we   have 50 of each species. And we have the setosa. 
And then we have the versicolor. And then we have   the virginica. And so you can see that there 
are group differences on these three things.   Now, what I'm going to do is I'm going to 
ask for a specific kind of plot to break it   down more explicitly between the two categories. 
That is, I'm going to put in two variables now,   where I have my categorical species, and 
then a comma, and then the petal length,   which is my quantitative measurement. I'm 
going to run that again, you just hit Ctrl,   or command and Enter. And this is one that I'm 
looking for here. Let's zoom in on that. Again,   you see that it's adapted. And it knows, for 
instance, that the first variable I gave it   is categorical. The second was quantitative, and 
the most common chart for that is a box plot. And   so that's what it automatically chooses to do. 
And you can see, it's a good plot here, we can   see very strong separation between the groups on 
this particular measurement. I'll zoom back out.   And then let's try a quantitative pair. So now 
I'll do petal length and petal width, so it's   gonna be a little bit different. I'll run that 
command. And now this one is a proper scatterplot,   where we have a measurement across the bottom, 
and a measurement of the side. But you can see   that there's a really strong positive association 
between these two. So not surprisingly, as a petal   gets longer, it generally also gets wider, so it 
just gets bigger overall. And then finally, if I   want to run the plot command on the entire data 
set the entire data frame, this is what happens,   we do plot and then Iris. Now we've seen this one 
in previous examples, but let me zoom in on it.   And what it is, is an entire matrix of scatter 
plots of the four quantitative variables. And then   we have species, which is kind of funny because 
it's not labeling them. But it shows us a dot   plot for the measurements of each species. And 
this is a really nice way if you don't have too   many variables of getting a very quick holistic 
impression of what's going on in your data. And so   the point of this is that the default plot command 
is able to adapt to the number of variables I gave   it, and to the kind of variables I give it, and 
it makes life really easy. Now, I want you to   know that it's possible to change the way that 
these look. I'm going to specify some options.   I'm going to do the plot again, this scatterplot 
where I say plot, and then in parentheses,   I give these two arguments, or saying what I 
want in it, I'm gonna say, do the petal length,   and do the petal width. And then I'm gonna go 
to another line, I'm just separating with comma.   Now if you want to, you can write this all as one 
really long line, I break it up, because I think   it makes a little more readable. I'm going to 
specify the color, a new with call for color, and   then I use a hex code. And that code is actually 
for the red that is used on the data lab homepage.   And then PCH is four point character, and that 
is a 19 is a solid circle. Now I'm going to main   title on it, and then I'm gonna put a label on the 
x axis and a label on the y axis. So I'm actually   going to run those now by doing Command or Control 
Enter for each line, and you can see it builds up.   And when we finished, we got the whole thing, I'll 
zoom in on it again. And this is the kind of plot   that you could actually use in a presentation 
or possibly in a publication. And so even what   the base command, we're able to get really 
good looking, informative and clean graphs.   Now, what's interesting is that the plot command 
can do more than just show data, we can actually   feed it in formulas, if you want, for instance, 
to get a cosine, I do plot and then coast is   for cosine. And then I give the limit, I go from 
zero to two times pi, because that's relevant for   cosine. I click on that, and you can see the graph 
there, it's doing our little cosine curve, I can   do an exponential distribution from one to five. 
And there it is curving up. And I can do D norm,   which is for a density of a normal distribution 
from minus three to plus three. And there's the   good old bell curve there in the bottom right. 
And then we can use the same kind of options   that we used earlier for our scatterplot. Here 
to say, do a plot of D norm, so the bell curve   from minus three to plus three on the x axis. And 
now we're going to change the color to red l WD is   for linewidth, make it thicker, give it a title on 
the top, a label on the x axis and a label on the   y axis. We'll zoom in on that. And so there is my 
new and improved prettier and presentation ready   bell curve that I got with a default plot, command 
and R. And so this is a really flexible and   powerful command. Also, it's the base package. And 
you'll see that we have a lot of other commands   that can do even more elaborate things. But this 
is a great way to start and get a quick impression   of your data, see what you're dealing with, and 
shape the analyses that you do subsequently.   The next step in our introduction, and our 
discussion of basic graphics, is bar charts.   And the reason I like to talk about bar charts 
is this, because simple is good. And when it   comes to bar charts, bar charts are the most basic 
graphic for the most basic data. And so they're a   wonderful place to start in your analysis. Let me 
show you how this works. Just try it in our open   up this script. And let's run through and see how 
it works. When you open up the file in our studio,   the first thing we're going to want to do is 
come down here and open up the datasets package.   And then we're going to scroll down a little bit 
and we're going to use a dataset called empty   cars. Let's get a little bit of information about 
this do the question mark and the name of the data   set. This is Motor Trend. That's a magazine 
car road test from 1974. So you know they're   42 years old. Let's take a look at the first few 
rows of what's in empty cars by doing head. I'm   going to zoom in on this. And what you can see is 
that we have a list of cars the Mazda RX four and   the wagon the Datsun 710, the AMC Hornet and I 
actually remember these cars and we have several   variables on each of them we have the mpg MPG, 
we have the number of cylinders the displacement   and cubic inches, the horsepower the final drive 
ratio which has to do with the axle, and then we   have the weight in tons the quarter mile time in 
seconds. And these are a bunch of really really   slow cars. V S is for whether the cylinders are in 
a V, or whether they are in a straight or in line.   And then the am is for automatic or manual. Then 
we go into the next line we have gear which is the   number of gears in the transmission and carb for 
how many carburetor barrels they have, which is   we don't even use carburetors anymore. Anyhow. So 
that's what's in the data set. I'll zoom back out.   Now if we want to do a really basic bar chart, 
you might think that the most obvious thing to   do would be to use RS bar plot command. That's, 
it's named for the bar chart. And then to specify   the data set empty cars, and then the dollar sign, 
and then the variable that we want cylinders. So   you think that would work, but unfortunately, 
it doesn't. Instead, what we get is this,   which is just kind of going through all the 
cases on a one by one by one row and telling   us how many cylinders are in that case, that's 
not a good one. That's not what we want. And   so what we need to do is we actually need to 
reformat the data a little bit, by the way,   you would have to do the exact same thing, if 
you wanted to make a bar chart in a spreadsheet,   like Excel or Google Sheets, you can't do it with 
the raw data, you first need to create a summary   table. And so what we're going to do here is we're 
going to use the command table, we're gonna say,   take this variable from this data set and make a 
table of it, and feed it into an object, you know,   a data thing, data container called cylinders, 
I'm going to run that one. And then you see that   just showed up in the top left, let me zoom in 
on that one. So now I have in my environment,   a data object called cylinders, it's a table, 
it's got a length of three, it's got a size of   1000 bytes, and it gives us a little bit more 
information. Let's go back to where we were.   But now I've saved that information into 
cylinders, which just has the number of cylinders,   I can run the bar plot command. And now I get 
the kind of plot I expected to see. From this, we   see that we have a fair number of cars with four 
cylinders, a smaller number was six. And because   this is in 74, we've done a lot of eight cylinder 
cars in this particular data set. Now, we can also   use the default plot command, which I showed you 
previously, on the same data, we're just going   to do something a little different, it's actually 
going to make a line chart where the lines are the   same length of each bars, I'd probably use the bar 
plot instead, because it's easier to tell what's   going on. But this is a way of making a default 
chart that gives you the information you need   for the categorical variables. Remember, simple 
is good. And that's a great way to start. In our   last video, on basic graphics, we talked about bar 
charts. If you have a quantitative variable, then   the most basic kind of chart is a histogram. And 
this is for data that is quantitative or scaled or   measured, or interval or ratio level, all of those 
are referring to basically the same thing. And   in all of those, you want to get an idea of what 
you have. And a histogram allows you to see what   you have. Now there's a few things you're going 
to be looking for with a histogram. Number one,   you're going to be looking for the shape of the 
distribution, is it symmetrical, is it skewed is a   uni modal by modal, you're going to look for gaps 
or big empty spaces in the distribution. You're   also going to look for outliers, unusual scores, 
because those can distort any of your subsequent   analyses. He'll look for symmetry to see whether 
you have the same number of high and low scores or   whether you have to do some sort of adjustment 
to the distribution. But this is going to be   easier if we just try it in R. So open up this R 
script file. And let's take a look at how we can   do histograms in R. When you open up the file, the 
first thing we need to do is come down here and   load the data sets. We'll do this by running the 
library command, I just do Ctrl or Command Enter.   And then we can do the iris data set. Again, we've 
looked at it before. But let's get a little bit of   information from it by asking for help on Iris. 
And there we have Edgar Anderson's Iris data,   also known as Fisher's Iris data, because he 
published an article on it. And here's the full   set of information available on it from 1936. So 
it's 80 years old. Let's take a look at the first   few rows. Again, we've seen this before, Siebel 
and petal length and width for three species of   Iris. We're gonna do a basic histogram on the 
four quantitative variables that are in here.   And so I'm going to use just the hist command. 
So hist and then the dataset Iris and then the   dollar sign to say which variable and then Siebel 
dot length. I run that I get my first histogram.   Let's zoom in on a little bit. And what happens 
here is of course, it's a basic sort of black line   on white background, which is fine for exploratory 
graphics. And it gives us a default title that   says histogram of the variable and it gives us the 
the clunky name which is also on the x axis on the   bottom, it automatically adjusts the x axis and it 
chooses about seven or nine bars, which is usually   the best choice for a histogram. And then on the 
left, it gives us the frequency or the count of   how many offs revisions are in that group. So 
for instance, we have only five irises whose   sepal length is between four and four and a half 
centimeters, I think it is. Let's zoom back out.   And let's do another one. Now, this time for 
a simple width, you can see that's almost a   perfect bell curve. And we do petal length, we get 
something different. Let me zoom in on that one.   And this is where we see a big gap, we've got a 
really strong bar there at the low end. In fact,   it goes above the frequency axis. And then we 
have a gap. And then sort of a bell curve that   lets us know that there's something interesting 
going on with the data that we're going to want   to explore a little more fully. And then 
we'll do another one for petal width,   I'll just run this command. And you can see 
the same kind of pattern here where there's   a big clump at the low end, there's a gap. And 
then there's sort of a bell curve beyond that.   Now, another way to do this is to do the 
histograms by groups. And that would be an   obvious thing to do here, because we have three 
different species of Iris. So what we're going   to do here is we're going to put the graphs into 
three rows, one above another in one column. I'm   going to do this by changing a parameter pa RS 
for parameter, and I'm giving it the number of   rows that I want to have in my output. And 
I need to give it a combination of numbers,   I do this C, which is for concatenate, it means 
treat these two numbers as one unit, where three   is the number of rows, and then the one is the 
number of columns. So I run that it doesn't show   anything just yet. And then I'm going to come down 
and I'm going to do this more elaborate command,   I'm going to do hist. That's the histogram that 
we've been doing. I'm going to do petal length,   except this time in square brackets, I'm going to 
put a selector is this means use only these rows.   And the way I do this is by saying I want to do it 
for this atossa irises. So I say, Iris, that's the   data set, and then dollar sign. And then species 
is the variable. And then two equals because in   computers, that means is equivalent to and then 
in quotes, and they have to spell it exactly the   same with the same capitalization and do setosa. 
So this is the variable and the row selection.   I'm also going to put in some limits for the 
x, because I want to manually make sure that   all three of the histograms I have have the same 
x scale. So I'm going to specify that breaks is   for how many bars I wanted the histogram. And and 
actually, what's funny about this is it's really   only a suggestion that you give to the computer, 
then I'm going to put a title above that one,   I'm going to have no x label, and I'm going to 
make it read somebody would do all of that right   now. I'll just run each line. And then you see 
I have a very skinny chart, let's zoom in on it.   So it's very short. But that's because I'm gonna 
have multiple charts, it's gonna make more sense   when we look at them all together. But you can see 
by the way that the petal width for this atossa   irises is on the low end. Now let's do the same 
thing for versicolor. I'm going to run through all   that. It's all gonna be the same, except we're 
gonna make it purple. There's versicolor. And   then let's do virginica last. And we'll make 
those blue. And now I can zoom in on that.   And now when we have our three histograms, it's 
the same variable petal width, but now I'm doing   it separately for each of the three species. And 
it's really easy to see what's going on here.   Now. setosa is really low versicolor and virginica 
overlap, but they're still distinct distributions.   This approach, by the way, is referred to as small 
multiples, making many versions of the same chart   on the same scale. So it's really easy to compare 
across groups are across conditions, which is what   we're able to do right here. Now, by the way, 
anytime you change the graphical parameters,   you want to make sure to change them back to what 
they were before. So here, I'm going par, and then   going back to one column and one row. And that's 
a good way of doing histograms for examining   quantitative variables, and even for exploring 
some of the complications that can arise when you   have different categories with different scores 
on those variables. In our two previous videos,   we looked at some basic graphics for one variable 
at a time, we looked at bar charts for categorical   variables, and we looked at histograms for 
quantitative variables. While there's a lot more   you can do with univariate distributions. You also 
might want to look at by various distributions,   we're gonna look at scatter plots as the most 
common version of that you do a scatter plot when   what you want to do is visualize the association 
between two quantitative variables. Now,   I actually know it's more flexible than that. But 
this is the canonical case for a scatterplot. And   when you do that, what sorts of things do you want 
to look for in your scatterplot? I mean, there's a   purpose in it. Well, number one, you want to see 
if the association between your two variables is   linear, or if it can be described by a straight 
line, because most of the procedures that we do   assume linearity. You also want to check if you 
have consistent spread across the scores as you go   from one end to the x axis to another, because if 
things fan out considerably, then you have what's   called heteroscedasticity. And it can really 
complicate some of the other analyses. As always,   you want to look for outliers, because an unusual 
score, or especially an unusual combination of   scores, can drastically throw off some of your 
other interpretations. And then you want to   look for the correlation is there an association 
between these two variables. So that's what we're   looking for it, let's try it in our simply open up 
this file, and let's see how it works. The first   thing we need to do in our is come down and open 
up the datasets package just to command or control   and Enter. And we'll load the data sets, we're 
going to use empty cars, we looked at that before,   it's got a little bit of information, it's road 
test data from 1974. And let's look at the first   few cases. I'll zoom in on that. Again, we have 
miles per gallon cylinders, so on and so forth.   Now, anytime you're going to do an association, 
it's a really good idea to look at the univariate   or one variable at a time distributions as well, 
we're going to look at the association between   weight and mpg. So let's look at the distribution 
for each of those separately. I'll do that with a   histogram, I do hist. And then in parentheses, 
I specify the data set empty cars in this case,   and then $1 sign to save which variable in that 
data set. So there's the histogram for weight.   And you know, it's not horrible there, it looks 
like we've got a few on the high end there. And   here's the histogram for miles per gallon. Again, 
mostly kind of normal, but a few on the high end.   But let's look at the plot of the two of them 
together. Now, what's interesting is I just use   the generic plot command, I feed that in, and r 
is able to tell that I'm giving it to quantitative   variables, and that a scatterplot is the best 
kind of plot for that. So we're gonna do weight   and mpg. And then let me zoom in on that. And 
what you see here is one circle for each car at   the joint position of its weight and its MPG, and 
it's a strong downhill pattern. Not surprisingly,   the more a car weighs and we have some 
in this data set that are five tonnes,   the lower miles per gallon, we have get down to 
about 10 miles per gallon here, the smallest cars,   which appear to weigh substantially under 
two times get about 30 miles per gallon.   Now, this is probably adequate for most purposes. 
But there's a few other things that we can do. So   for instance, I'm going to add some colors here, 
I'm going to take the same plot, and then add on   additional arguments or say, use a solid circle 
pchs for point character 19 as a solid circle,   c x has to do with this size of things, and I'm 
going to make in the 1.5 means making 150% larger   call is for color and I'm specifying a particular 
read the one for data lab in hex code, I'm going   to give a title, I'm going to give an X label and 
a y label. And then we'll zoom in on that. And now   we have a more polished chart that also because of 
the solid red circles makes it easier to see the   pattern that's going in there, where we got some 
really heavy cars with really bad gas mileage,   and then almost perfect linear association up to 
the lighter cars was much better gas mileage. And   so a scatterplot is the easiest way of looking at 
the association between two variables, especially   when those two variables are quantitative. 
So they're on a scaled or measured outcome.   And that's something that you want to do anytime 
you're doing your analysis to first visualize it,   and then use that as the introduction to any 
numerical or statistical work you do after that,   as we go through are necessarily very short 
presentations on basic graphics. I want to   finish by saying one more thing, and that is 
you have the possibility of overlaying plots.   And that means putting one plot directly on top of 
or superimposing it on another. Now, you may ask   yourself why you want to do this Well, I can give 
you an artistic version on this. This, of course,   is Pablo Picasso's Les Demoiselles d'Avignon. And 
it's one of the early masterpieces in Cubism and   the idea of Cubism is it gives you many views, 
or it gives you simultaneously several different   perspectives on the same thing. And we're gonna 
try to do a similar thing with data. And so we   can say very quickly. Thanks, Pablo. Now, why 
would you overlay plots, really, if you want the   technical explanation is because you get increased 
information density, you get more information,   and hopefully more insight in the same amount of 
space and hopefully the same amount of time. Now,   there is a potential risk here. You might 
be saying to yourself at this point, well,   you want dense, guess what? I can do dance. And 
then we end up with something vaguely like this,   the Garden of Earthly Delights, and it's 
completely overwhelming, and it just makes   you kind of shut down cognitively. No, thank 
you. Hieronymus Bosch. No, I instead, well,   I like Hieronymus Bosch his work. And to tell you 
when it comes to data graphics use restraint. Just   because you can do something doesn't mean that you 
should do that thing. When it comes to graphics   and overland plots, the general rule is this, use 
views that complement and support one another that   don't compete. But that gives greater information 
in a coherent and consistent way. This is going   to make a lot more sense. If we just take a 
look at how it works in our so open up this   script. And we'll see how we can overlay plots for 
greater information density and greater insight.   The first thing that we're going to need 
to do is open up the datasets package.   And we're going to be using a data set we haven't 
used before about lynxes, that's the animal. This   is about Canadian Lynx trappings from 1821 to 
1934. If you want the actual information on the   dataset, there it is. Now let's take a look at 
the first few lines of data. This one is a time   series. And so what's unusual about it is this 
is just one line of numbers. And you have to know   that it starts at 1821. And it goes through. So 
let's make a default chart with a histogram. As   a way you've seen, or links trappings consistent 
or how much variability was there, we'll do hist,   which is the default histogram. And we'll simply 
put links in, we don't have to specify variables,   because there's only one variable in it. And when 
we do that, I'll zoom in on that, we get really a   skewed distribution, most of the observations are 
down at the low end, and then it tapers off to   it's actually measured in 1000s. So we can tell 
that there is a very common value, it's at the   low end. And then on the other hand, we don't know 
what years those were. So we're ignoring that for   just a moment and taking a look at the overall 
distribution of trappings, regardless of yours,   Miss zoom back out. And we can do some options 
on this one to make it a little more intricate,   we can do a histogram. And then in parentheses, I 
specify the data. I also can tell it how many bins   I want. And again, it sort of is suggesting 
that because r is going to do what it wants   Anyhow, I can say make it a density instead of 
frequency. So it'll give proportions of the total   distribution. We'll change the colors to call the 
sisal one because you can use color names. And our   will give it a title here. By the way, I'm using 
the paste command because it's a long title,   and I want it to show up on one line, but I 
need to spread my command across two lines,   you can go longer, I have to use a short 
command line. So you can actually see what   we do when we're zoomed in here. So there's that 
one, and then we're going to give it a label,   this has number of links trapped. And now we have 
a more elaborate chart. I'll zoom in on it, and   it's a kind of little thistle purple lilac color. 
And we have divided the number of bins differently   previously, it was one bar for every 1000. Now 
it's one bar for 500. But that's just one chart.   We're here to see how we can overlay charts and 
a really good one anytime you're dealing with a   histogram is a normal distribution. So you want to 
see are the data distributed normally now we can   tell they're skewed here, but let's get an idea of 
how far they are from normal. To do this, we use   the command curve. And then D norm is for density 
of the normal distribution. And then here I tell   it axes you know just a generic variable name, 
but I tell it use the mean of the Lynx data. Use   the standard deviation of the Lynx data We'll make 
it a slightly different fissel color. Number four,   we'll make it two pixels wide, the line width 
is two pixels and then add says stick it on the   previous graph. And so now I'll zoom in on that. 
And you can see if we had a normal distribution   with the same mean and standard deviation as 
this data, it would look like that. Obviously,   that's not what we have, because we have 
this great big spike here on the low end,   then I can do a couple of other things, I 
can put in what are called kernel density   estimators. And those are sort of like a bell 
curve, except they're not parametric, instead,   they follow the distribution of the data, that 
means they can have a lot more curves in them,   they still add up to one like a normal 
distribution. So let's see what those   would look like here, we're gonna do lines. That's 
what we use for this one. And then we say density,   that's going to be the standard kernel 
density estimator, we'll make it blue.   And there it is, on top, I'm going to do 
one more than we'll zoom in, I can change   a parameter of the kernel density estimator, 
here, I'm using a just to say, average across   it sort of like a moving average, average across 
a little more. And now let me zoom in on that.   And you can see, for instance, the blue line 
follows the spike at the low end a lot more   closely than it dips down. On the other hand, 
the purple line is a lot more slower to change,   because of the way I gave it his instructions 
with the Adjust equals three. And then I'm going   to add one more thing, something called a rug 
plot, it's a little vertical lines underneath   the plot for each individual data point. And 
I do that with rug. And I say just use links,   and then we're gonna make it a line width or 
pixel width of two, and then we'll make it gray.   And that, and assuming is our final plot, you can 
see now that we have the individual observations   marked, and you can see why each bar is as tall as 
it is and why the kernel density estimator follows   the distribution that it does. This is our final 
histogram with several different views of the same   data. It's not Cubism, but it's a great way of 
getting a richer view of even a single variable   that can then inform the subsequent analyses you 
do to get more meaning and more utility out of   your data. Continuing in our an introduction, 
the next thing we need to talk about is basic   statistics. And we'll begin by discussing the 
basic summary function in our The idea here is   that once you have done the pictures that you've 
done that basic visualizations, then you're going   to want to get some precision by getting numerical 
or statistical information. Depending on the kinds   of variables you have, you're going to want 
different things. So for instance, you're going   to want counts or frequencies for categories. 
They're going to want things like core titles   and the mean for quantitative variables. We can 
try this in our and you'll see that it's a very,   very simple thing to do. Just open up this script 
and follow along. What we're going to do is load   the data sets package, controller command and 
then enter. And we're actually going to look   at some data and do an analysis that we've seen 
several times already, we're going to load the   iris data. And let's take a look at the first 
few lines. And again, this is for quantitative   measurements on the seaplane petal length 
and width are three species of Iris flowers.   And what we're going to do is we're going to 
get summary in three different ways. First,   we're going to do summary 
for a categorical variable.   And the way we do this is we use the summary 
function. And then we'd say Iris, because that's   the data set and then $1 sign and then the name of 
the variable that we want. So in this case, it's   species, we'll run that command. And you can see 
it just has setosa 50 versicolor 50 and virginica   50. And those are the frequencies are the counts 
for each of those three categories in the species   variable. Now we're going to get something 
more elaborate for the quantitative variable,   we'll use sepal length for that one, and I'll just 
run that next line. And now you can see it lays   it out horizontally, we have the minimum value 
of 4.3, then we have the first quartile of 5.1,   the median than the mean than the third quartile 
and then the maximum score of 7.9. And so this   is a really nice way of getting a quick impression 
of the spread of scores. And also by comparing the   median and the mean sometimes you can tell whether 
it's symmetrical or there skewness going on. And   then you have one more option and that is getting 
a summary for the entire data frame or data set.   at once, and what I do is I simply do summary 
and then in the parentheses for the argument,   I just give the name of the dataset IRS. And 
this one, I need to zoom in a little bit,   because now it arranges it vertically. Where do 
we do sepal length. So that's our first variable,   and we get the courthouse and we get the median. 
And we do Siebel with petal length, petal width,   and then it switches over at the last one species 
where it gives us the counts or frequencies of   each of those three categories. So that's the most 
basic version of what you're able to do with the   default summary variable in R gives you quick 
descriptives gives you the precision to follow   up on some of the graphics that we did previously. 
And it gets you ready for your further analyses.   As you're starting to work with R, and you're 
getting basic statistics, you may find you want   a little more information than the base summary 
function gives you. In that case, you can use   something called describe, and its purpose 
is really easy. It gets more in detail. Now,   this is not included in ours basic functionality. 
Instead, this comes from a contributed package,   it comes from this psych package. And when you 
run describe from site, this is where you're going   to get, you'll get n that's the sample size, the 
mean, the standard deviation, the median, the 10%,   trimmed mean, the median absolute deviation, the 
minimum and maximum values, the range skewness,   and kurtosis, and standard errors. Now, don't 
forget, you still want to do this after you   do your graphical summaries pictures first 
numbers later. But let's see how this works   in our simply open up this script, and we'll run 
through it step by step. When you open up are,   the first thing we're going to need to do is 
we're going to need to install the package. Now,   I'm actually going to go through my default 
installation of packages, because I'm going to use   one of these Pac Man. And this just makes things 
a little bit easier. So we're going to load all   these packages. And this assumes, of course, you 
have Pac Man installed already, we're going to get   the data sets. And then we'll load our Iris data. 
We've done that lots of times before sepal, and   petal length and width and the species. But now 
we're going to do something a little different,   we're going to load a package, I'm using p load 
from the Pac Man package. That's That's why I   loaded it already. And this will download it if 
you don't have it already, it might take a moment.   And it downloads a few dependencies, generally 
other packages that need to come along with it.   Now, if you want to get some help on it, you can 
do p anytime you have P and underscore that's   something from Pac Man p help site. Now when you 
do that, it's going to open up a web browser and   it's going to get the PDF help. I've got it open 
already because it's really big. In fact, it's 367   pages here, have documentation about the functions 
inside. Obviously, we're not going to do the whole   thing here. What we are going to do is we can look 
at some of it in the our viewer, if you simply add   this argument here, web equals F for false, 
you can spell out the word false, as long as   you do it in all caps, then opens up here on the 
right. And here is actually this is a web browser.   This is a web page we're looking at. And each of 
these, you can click on and get information about   the individual bits and pieces. Now, let's use 
describe that comes from this package. It's for   quantitative variables only. So you don't want to 
use it for categories. What we're going to do here   is we're going to pick one quantitative variable 
right now. And that is Iris and then sepal length.   When we run that one, here's what we get. Now 
I get a list here a line, the first number,   the one simply indicates the row number, we only 
have one row. So that's what we have anyhow. And   it gives us the N of 150, the mean of 5.84, the 
standard deviation, the median, so on and so forth   out to the standard error there at the end. Now, 
that's for one quantitative variable. If you want   to do more than that, or especially if you want to 
do an entire data frame, just give the name of the   data frame in describe. So here we go describe 
Iris. I'm going to zoom in on that one because   now we have a lot of stuff. Now it lists all the 
variables down the side sepal length and it gives   the variables numbers 12345. And it gives us the 
information for each one of them. Please note   it's given us numerical information for species 
but it shouldn't be doing that because that's a   categorical variable. So you can ignore that 
last line. That's why I put an asterisk right   there. But otherwise, this gives you more detailed 
information including things is like the standard   deviation and the skewness that you might need. 
To get a more complete picture of what you have   in your data. I use describe a lot, it's a great 
way to compliment histograms and other charts   like box plots to give you a more precise image of 
your data and prepare you for your other analyses.   To finish up our section in our an introduction 
on basic statistics, let's take a short look at   selecting cases. What this does is it allows you 
to focus your analysis, choose particular cases   and look at them more closely. Now in art, you can 
do this a couple of different ways. You can select   by category if you have the name of a category, 
or you can select by value on a scaled variable.   Or you can select by both. Let me show you how 
this works and are just open up this script and   we'll take a look at how it works. As with most 
of our other examples, we'll begin by loading the   data sets package and by using library, just Ctrl 
or Command Enter to run that command that's now   loaded, and we'll use the iris dataset. So we'll 
look at the first few cases head Iris is how we   do that. Zoom in on it for a second. There's the 
iris data, we've already seen it several times,   we'll come down and we'll make a histogram of 
the petal length for all of the irises in the   data set. So I received the name of the data set 
and then petal length. There's our histogram off   to the right, I'll zoom in on it for a second. So 
you see, of course, that we've got this group's   stuck way at the left, and then we have a gap 
right here, then we have a pretty much normal   distribution, the rest of it, I'll zoom back 
out, we can also get some summary statistics.   I'll do that right here. For petal length, there 
we have the minimum value of the core tiles and   the mean. Now let's do one more thing. And let's 
get the name of the species. That's going to be   our categorical variable and the number of cases 
for of each species. So I do summary, and then   it knows that this is a categorical variable. 
So we run it through and we have 50 of each,   that's good. The first thing we're going to do 
is we're going to select cases by their category,   in this case by the species of Iris. We'll 
do this three times. We'll do it once for   versicolor. So I'm going to do a histogram where I 
say use the iris data. And then dollar sign means   use this variable petal length. And then in square 
brackets, I put this to indicate select these rows   or select these cases. And I say select when this 
variable species is equals, you got to use the two   equal signs to versicolor. Make sure you spell 
it and capitalize it exactly as it appears in   the data. Then we'll put a title on it. This says 
petal length versicolor. So here we go. And there   is our selected cases. This is just 50 cases going 
into the histogram. Now on the bottom right, we'll   do a similar thing for virginica, where we simply 
change our selection criteria from versicolor   virginica. And we get a new title there. And 
then finally, we can do first atossa also.   So great. That's three different histograms 
by selecting values on a categorical variable,   where you just type them in quotes exactly as they 
appear in the data. Now, another way to do this is   to select by value on a quantitative or scaled 
variable. We want to do that what you do is in   the square brackets to indicate you're selecting 
rows, you put the variable, I'm specifying that   it's in the IRS data set, and then say what value 
you're selecting. I'm looking for values less than   two. And I have the title chance to reflect 
that. Now what's interesting is this selects   the subtypes. This is the exact same group. And so 
the diagram doesn't change. But the titles and the   method of selecting the cases did. Probably more 
interesting. One is when you want to use multiple   selectors. Let's look for virginica that will be 
our species. And we want short petals only. So   this says what variable we're using petal length. 
And this is how we select with a Iris dollar sign   species. So that tells us which variable is 
equal to with the two equals virginica. And   then I just put an ampersand, and then say, Iris 
petal length is less than 5.5. Then I can run that   I get my new title, and I'll zoom in on it. 
And so what we have here are just virginica,   but the shorter ones. And so this is a 
pair of selectors use simultaneously.   Now, another way to do this, by the way, is if you 
know you're going to be using the same sub sample,   many times, you might as well create a new data 
set that has just those cases. And the way you   do that is you specified the data that you're 
selecting from then in square brackets, the rows   and the columns, and then you use the assignment 
operator. That's the less than and dash here. What   you can read as a GED So, so I'm going to create 
one called i dot setosa, for Iris setosa. And I'm   going to do it by going to the iris data. And in 
species reading just setosa, I then put a comma,   because this one selects the rows, I need to tell 
it which columns. If I want all of them, you just   leave it blank. So I'm going to do that. And now 
you see up here in the top right, I'll zoom in on   it, I now have a new object new data object. And 
the environment is a data frame called ice atossa.   And we can look at that sub sample that I've just 
created, we'll get the head of just those cases.   Now you see, it looks just the same as the other 
ones, except it only has 50 cases, as opposed to   150. And get a summary for those cases. And this 
time, I'm doing just the petal length. And I   can also get a histogram for the petal length. And 
it's going to be just these two choices. And so   that's several ways of dealing with sub samples. 
And again, saving this election, if you're going   to be using it multiple times, it allows you to 
drill down on the data and get a more focused   picture of what's going on, and helps inform 
your analyses that you carry on from this point.   The next step in our introduction is to talk 
about accessing data. And to get that started,   we need to say a little bit about data formats. 
And the reason for that is sometimes your data,   you're like talking about apples and oranges, you 
have fundamentally different kinds of things. Now,   there are two ways in particular that this 
can happen. The first one is you can have   data of different types, different data 
types. And then regardless of the type,   you can have your data in different structures, 
and it's important to understand each of these,   we'll start by talking about data types. 
This is like the level of measurement of   a variable. You can have numeric variables, 
which usually come in integer whole number or   single precision or double precision. You can 
have character variables with text in them. We   don't have string variables in our they're all 
character, you can have logical which are true,   false, or otherwise called Boolean. You can have 
complex numbers, and you can have a data type raw.   But regardless of which kind that you have, you 
can arrange them into different data structures.   The most common structures are vector, matrix or 
array, data frame, and list, we'll take a look at   each of these. A vector is one or more numbers 
in a one dimensional array. Imagine them all in   a straight line. Now, what's interesting here is 
that in other situations, if it's a single number,   it would be called a scalar. But in AR, it's 
still a vector is just a vector of length one.   The important thing about vectors is that the data 
are all of the same data type. So for instance,   all character or all integer. And you can think of 
this as ours basic data object in it, most of the   things are variation of the vector. going one step 
up from this is a matrix, a matrix has rows and   columns, it's two dimensional data. On the other 
hand, they all need to be of the same length,   the columns all need to be the same length, 
and all the data needs to be of the same class.   Interestingly, the columns are not named, they're 
referred to by index numbers, which can make them   a little weird to work with. And then you can step 
up from that into an array. This is identical to   a matrix, but it's for three or more dimensions. 
On the other hand, probably the most common form   is a data frame. This is a two dimensional 
collection that can have vectors of multiple   types. You can have character variables in one, 
you can have integer variables, and another you   can have logical and a third, the trick is, 
they all need to be the same length. And you   can think of this as the closest thing that R has 
that's analogous to a spreadsheet. And in fact,   if you import a spreadsheet, you're going to go 
into a data frame, typically. Now the neat thing   is that R has special functions for working with 
data frames, things that you can do with those you   can do with others. And we'll see how those work 
as we go through this course and through others.   And then finally, there's the list. This is our 
most flexible data format. You can put basically   anything in the list. It's an ordered collection 
of elements. And you can have any class,   any length, any structure. And interestingly, 
lists can include lists include lists, and so on   and so forth. So it gets like the Russian nesting 
dolls, you have one inside the other one inside   the other. Now the trick is that may sound very 
flexible and may very good. It's actually kinda   hard to work with lists. And so a data frame 
really sort of the optimal level of complexity   for a data structure. And then let me talk about 
something else here the idea of coercion now,   in the world of ethics cores is a bad thing in the 
world of data science. coercion is good. What it   means here is coercion is changing data objects. 
From one type to another, it's changing the level   of measurement or the nature of the variable 
that you're dealing with. So for example, you can   change a character to a logical, you can change 
a matrix to a data frame, you can change double   precision to integer, you can do any of these, 
it's going to be easiest to see how it works. If   we go to our end, give it a whirl. So open up this 
script, and let's see how it works in our studio.   For this demonstration of data types, you don't 
need to load any packages, we're just going to   run through things all on their own. We'll start 
with numeric data. And what I'm going to do is I'm   going to create a data object a variable called 
n one, my first numeric variable, and then I use   the assignment operator. That's this, the little 
left arrow, and this right as n, one gets 15. Now,   our does double precision by default, let me do 
this n one. And then you can see that it showed up   here on the top right. If I call the name of that 
object, it'll show its contents in the console.   So I just type n one and run that. And there 
you can see in the console at the bottom left,   it brought up a one in square brackets, that's 
an index number for the first objects in an   array. And this is an array of one number, 
but there it is, and we get the value of 15.   Also, we can use the our command type of to 
get a confirmation of what type of variable   that says. And it's double precision by default, 
we can also do another one where you do 1.5,   we can get its contents 1.5. And then we see 
that it also is double precision, we want to   come down and do a character I'm calling that see 
one for my first character variable, you see that   I do see one the name of the object I want to 
create, I put the assignment operator the less   than and dash, which is right as gets. And then 
I have in double quotes. In other languages, you   would do single quotes for a single character. And 
you would use double quotes for strings. They're   the same thing in R, and I put in double quotes 
the lowercase C, that's just something I chose.   So I feed that in, you can see that it showed 
up in the global environment there on the right,   we can call it forward and you see it shows up 
with the double quotes on it. We've got the type   of and it's a character, that's good. If we want 
to do an entire string of texts, I can feed that   into C two, just by having it all in the double 
quotes. And we pull it out. And we see that it   also is listed as a character even though in other 
languages, it would be called a string. We can do   logical, this is L one for logical first. And 
then feeding in true when you write true or false,   they have to be all caps, or you can do just 
the capital T or the capital F. And then I call   that one out. And it says true. Notice, by 
the way, there's no quotes around it. That's   one way you can tell it it's a logical and 
not a character. If we put quotes into it,   it would be a character variable, we get 
the type of there we go, it's logical.   I said you can also use abbreviation so for my 
second logical variable l two, I'll just use F.   I feed that in. And now you see that it when I ask 
it to tell me what it is it prints out the whole   word false. And then we get the type of again also 
logical, then we can come down to data structures,   I'm going to create a vector which is a collection 
of one dimensional collection. And I'm doing it by   creating v one for vector one. And then I use 
the C here, which stands for concatenate. You   can also think of it as like combine or collect. 
And I'm going to put five numbers in there, you   need to use a comma between the values. And then I 
call out the object. Then there's my five numbers,   notice it shows them without the commas but I had 
to have the commas going in. And then I asked our   Is it a vector is period vector and then asked 
about it. And it's just gonna say true? Yes,   it is. I can also make a vector of characters. 
And do that right here, I get the characters,   and it's also a vector. And that can make a vector 
of logical values true and false. Call that. And   it's a vector also. Now a matrix, you may remember 
is in going in more than one dimension. In this   case, I'm going to call it m one for matrix one. 
And I'm using the matrix function. So I'm saying   matrix and then combine these values tt ffts. And 
then I'm saying how many rows I want in it, and it   can figure out the number of columns by doing some 
math. So I'm going to put that into m one. And   then I'll ask for it AC. Now it displays it in 
the rows and columns, and it writes out the full   true or false. Now I can do another one where I'm 
going to do a second matrix and this is where I   explicitly shape it in the rows and columns. Now, 
that's for my convenience r doesn't care that I   broke it up to make the rows and columns, but it's 
a way of working with it. And if I want to tell   it to organize it To go by rows, I can specify 
that with the by row equals T or true command.   I do that. And now I have the ABCD. And you 
see, by the way that I have the index numbers,   on the left are the row index numbers, that's row 
one and row two, and on the top are the column   index numbers, and they come second, which is why 
it's blank and then one for the first column and   then blank and then two for the second column, 
then we can make an array. What I'm going to   do here is I'm going to create a data and I'm 
going to use the colon operator, which says,   Give me the numbers one through 24, I still have 
to use the concatenate to combine them. And then   they give the dimensions of my array and it goes 
rows, columns, and then tables. Because I'm using   three dimensions here, I'm going to feed that into 
an object called array one. And there's my array   right there, you can see that I have two 
tables. In fact, let me zoom in on that one.   And so it starts at the last level, which is 
the table. And then we have the rows and the   columns listed separately for each of them. 
a data frame allows me to combine vectors   of the same length but of different types. Now, 
what I'm doing here is I'm creating a vector of   numeric values of character values and logical 
values. So these are three different vectors.   But then what I'm going to do is I'm going to 
use this function c bind for a column bind to   combine them into a single data frame and 
call it DFA for a data frame, a, or all.   Now, the trick here is that we had some 
unintentional coercion by just using C bind,   what it did is it coerced it all to the most 
general format. I had numeric variables and   character variables, and logical and the most 
general is character. And so it turned everything   into a character variable. That's a problem, it's 
not what I wanted, I have to add a nother function   to this, I have to tell it specifically make 
it a data frame by using AZ dot data dot frame.   When I do that, I can combine it. And now 
you see it's maintained the data types of   each of the variables. That's the way I want 
it. And then finally, I can do a list, I'm   going to create three objects here, object one, 
which is numeric with three values, object two,   which is character with four and object three, 
which is logical with five. And then I'm going to   combine them into a list using the list function, 
put them into list one, and then we can see the   contents of list one. And you can see it's kind of 
a funky structure, and it can be hard to read. But   there's all the information there. And then we're 
going to do something that's kind of, you know,   hard to get around logically, because I'm going 
to create a new list that has list one in it. So   I have the same three objects, plus I'm adding on 
to it list one. So list two, I'm gonna zoom in on   that one. And you can see it's a lot longer. And 
we got a lot index numbers there in the brackets.   There, the three integers, the four character 
values, and the five logical values. And then here   they are repeated, but that's because they're all 
parts of list one, which I included in this list.   And so those are some of the different ways that 
you can structure data of different types. But   you want to know also that we can coerce them 
into different types to serve our different   purposes. The next thing we need to talk about is 
coercing types. Now there's automatic coercion,   we've seen a little bit of that, where the data 
automatically goes to the least restrictive data   type. So for instance, if we do this where we 
have a one, which is numeric, be in quotes,   which is character, and a logical value, and 
we feed them all into this idea coerce one. And   by the way, by putting parentheses around it, it 
automatically saves it and shows us the response.   Now you can see that what it's done is is taken 
all of them and made all of them character because   that's the least specific most general format. 
And so that'll happen, but you kind of watch out   because you don't want things getting coerced when 
you're not paying attention. On the other hand,   you can coerce things, specifically, if you want 
to haven't go in a particular way. So I can take   this variable right here coerce to, I'm gonna put 
a five into that. And we can get its type and we   see that it's double. Okay, that's fine. What if 
I want to make it integer, then what I do is I use   this command as dot integer. I run that feed into 
coerce three. And it looks the same when we see   the output but now it is an integer. That's how 
it's represented in the memory. I can also take   a character variable and here I have one Two and 
Three in quotes, which thank them characters and   get those and you can see that they're all 
character. But now I can feed them in with this   as dot numeric, and it's able to see that they 
are numerical numbers in there, and coerce them   to numeric. Now you see that is lost the quotes, 
and it goes to the default double precision,   probably the one you'll do the most often is 
taking a matrix. And that's just let's take a   look, I'll make a matrix of nine numbers in three 
rows and three columns. There they are. And what   we're going to do is we're going to coerce 
it to a data frame. Now that doesn't change   the way it looks is going to look the same. But 
there's a lot of functions you can only do with   data frames that you can't do with matrices. This 
one, by the way, will ask is it a matrix? And the   answer is true. But now let's do this, we'll 
do the same thing and just add on as dot data   dot frame. Then now we thought to make it a data 
frame. And you see, it basically looks the same.   It's listed a little differently. This one had its 
index numbers here for the rows and the columns.   This one is a row index. And then we have variable 
names across the top. And it's just automatically   given them variables one, two, and three. 
But the numbers in it look exactly the same.   On the other hand, if we come back here and ask, 
Is it a data frame, we get true. So it's a very   long discussion here. But the point here is, 
data comes in different types and in different   structures, and you're able to manipulate 
those, so you can get them in the format,   and the time and the arrangement that 
you need for doing your analyses in our   to continue our introduction and accessing data, 
we want to talk about factors. And depending   on the kind of work that you do, this may be a 
really important topic. factors have to do with   categories and names of those categories. 
Specifically, a factor is an attribute of   a vector. This specifies the possible values and 
their order, it's going to be a lot easier to see   if we just try it. In our end, let me demonstrate 
some of the variations, just open up this script,   and we can run through it together. What we're 
going to do here is create a bunch of artificial   data, and then we're going to see how it works. 
First one I'm going to do is I'm going to create   a variable x one with the numbers one through 
three. And by putting it in parentheses here,   it'll both stored in the environment, and 
it will display it in the console. So there   we have three numbers, one, two, and three, I'm 
going to create a nother variable y, that's the   numbers one through nine. So there that is. Now 
what I want to do is I want to combine these two,   and I'm going to use the C minor column bind 
data frame. So it's going to put them together,   and it's going to make them a data frame. And 
it's going to save them into a new object I'm   creating called df for data frame one. And we'll 
get to see the results of that. Let me zoom in   on it a little bit. And there you can see, we 
have nine rows of data. We have one variable   x one that's from the one that I created, and then 
we have y. And then we have the nine indexes or   the row IDs there down the side. Please note 
that the first 1x, one only had three values.   And so what it did is it repeated it. So you 
see it happening three different times 123123.   And what we want to find out is now what kind 
of variable is x one in this data frame? Well,   it's an integer, and we want to get the structure, 
it shows that it's still an integer if we're   looking at this line right here. Okay, but we can 
change it to a factor by using as dot factor. And   it's going to react differently than, so I'm going 
to create a new one called x two, that, again, is   just the numbers one, two, and three. But now I'm 
telling are those specifically represent factors,   then I'll create a new data frame using this x two 
that I saved as a factor and the one through nine   that we had and why. Now, at this point, it looks 
the same. But if we come back to where we were,   and we get the type of it's still an integer, 
that's fine, but we get the structure of df   two. Now it tells us that x two instead of being 
an integer is a factor with three levels. And it   gives us the three levels in quotes one, two, 
and three, and then it lists the data. Now,   if we want to take an existing variable, and 
define it as a factor, we can do that too. Here,   I'll create yet another variable with three 
values in it. And then we'll bind it to y   in a data frame. And then I'm going to use this 
one factor right here. And I'm going to tell it   to reclassify this variable x three as a factor 
and feed it into the same place, and that these   are the levels of the factor. And because I put 
in parentheses, it'll show To us in the console,   there we have it, let's get the type. It's an 
integer, but the structure shows it again as   a factor. So that's one way we could take an 
existing variable and turn it into a factor.   If you want to do labels, we can do it this way. 
We'll do x four, again, that's the one through   three. And we'll bind it to nine to make a data 
frame. And here, I'm going to take the existing   variable, df four, and then the variable is x 
four, I'm going to tell it the labels. And then   I'm going to give them text labels, I'm going 
to say that there are Mac OS, Windows and Linux   three operating systems. And please note, I need 
to put those in the same order that I want them   to line up to those numbers. So one will be Mac 
OS two will be windows and three will be Linux. I   run that through, we can pull it up 
here. And now you can see how it goes   through. And it changes that factor to the text 
variables. Even though I entered it numerically.   I want the type of to see what it is. It's still 
called it integer, even though it's showing me   words, and the structure. This is an important 
one, let's zoom in on that just for a second.   The structure here at the bottom, it 
says it's a factor with three levels,   and it starts giving me the labels. But then it 
shows us that those are actually numbers one,   two, and three underneath. If you're used to 
working with a program like SPSS, where you can   have values, and then you can add value labels on 
top of them. It's the same kind of concept here.   Then I want to show you how we can switch 
the order of things. And this gets a little   confusing. So try it a couple of times 
and see if you can follow the logic here.   We'll create another variable x five, 
that's just the one, two and three,   we'll bind it to why. And there's our data 
frame just like we've had in the other examples.   Now what I'm going to do is I'm going to 
take that new variable x five in the data   frame five, df five. And notice here, I'm listing 
the levels, but I'm listing them in a different   order. I'm changing the order that I put them 
in there. And then I'm lining up these labels.   When I run that through, now you can see the 
labels here, maybe yes, now maybe yes, no,   it is showing us the nine values. And then this 
is an interesting one, because they're ordered,   it puts them with the less than sign at each point 
indicate which one comes first which one comes   later, we can take a look at the actual data frame 
that I made. Or zoom in on that. And you can see,   we know that the first one's a one because when 
I created this, it was 123. And so the maybe is   a one you see because it's the second thing here 
in each one. So one equals maybe. But by putting   it in this order, it falls in the middle of this 
one, there may be situations in which you want   to do that, I just want to know that you have this 
flexibility in creating your factor labels in our.   And finally, we can check the type of that. 
And it's still an integer because it's still   coded numerically underneath, but we can 
get this structure and see how that works.   So factors give you the opportunity 
to assign labels to your variables,   and then use them as factors in various analyses 
if you do experimental research, and this sort   of thing becomes really important. And so 
this gives you an additional possibility for   your analyses in our as you define your numerical 
variables as factors for using your own analyses.   Our next step in our an introduction in 
accessing data is entering data. So this is   where you're typing it in manually. And I like 
to think of this as a version of ad hoc data,   because under most circumstances, you would 
import a data set. But there are situations   in which you need just a small amount of data 
right away, and you can type it in this way. Now,   there are many different methods that are 
available for this. There's something called   the colon operator. There's SC Q, which is for 
sequence, there, C which is short for concatenate,   there's a scan, and there's Rep. And I'm going 
to show you how each of these works. I will also   mention this little one, the less than and a 
dash, that is the assignment operator in our   let's take a look at it in our and I'll explain 
how all of it works. Just open up this script,   and we'll give it a whirl. What we're going to 
do here is just begin with a little discussion   of the assignment operator, the less than 
dash is used to assign values to a variable,   so is called an assignment operator. Now a 
lot of other programs would use an equal sign,   but we use this one that's like an arrow, 
and you read it as it gets. So x gets five,   it can go in the other direction pointing to the 
right, that would be very unusual. And you can use   an equal sign or knows what you mean. But those 
are generally considered poor form. And that's   not just arbitrary. If you look at the Google 
style guide for our it's specific about that.   In our studio, you have a shortcut for This, if 
you do option dash, it inserts the assignment   operator and a space. So I'll come down here right 
now, do option dash, there you see. So that's   a nice little shortcut that you can use in our 
studio when you're doing your ad hoc data entry.   Let's start by looking at the colon operator. And 
most of this you would have seen already. And what   this means is you simply stick a colon between two 
numbers, and it goes through them sequentially. So   I'm doing x one is a variable that I'm creating. 
And then I have the assignment operator and   get zero colon 10. And that means it gets the 
numbers zero through 10. And there they all are   going to delete my colon operator that's 
waiting for me to do something here.   Now if we want to go in descending order, just 
put the higher number first. So I'll put 10 colon   zero, there it goes the other way, as EQ or SEC 
is short for sequence, and it's a way of being   a little more specific about what you want. If you 
want to, we can call it the help on sequence. It's   right over here for sequence generation. There's 
the information. And we can do ascending values.   So sec 10, duplicate one through 10 doesn't start 
at zero starts at one. But you can also specify   how much you want things to jump by. So if you 
want to count down in threes, II do 30 to zero   by negative three means step down threes, we'll 
run that one. And because it's in parentheses,   it'll both save it to the environment, and 
it'll show it on the console right away.   So those are ways of doing sequential numbers. 
And that can be really helpful. Now if you want   to enter an arbitrary collection of numbers in 
different order, you can use C that stands for   concatenate, you can also think of it as combine 
or collect, we can call it the help on that one.   There it is. And let's just take these numbers 
and you see to combine them into the data object   x five, and we can pull it in there you see, 
it just went right through. An interesting one   is scan. And this is we're entering data live. So 
we'll do scan here, get some help on that one, you   can see it read data values. And this one takes a 
little bit of explanation, I'm going to create an   object x sex. And then I'm feeding into it a scan 
with opening and closing parentheses because I'm   running that command. So here's what happens, I 
run that one. And then down here in the console,   you see that it now has one and a colon. And I 
can just start typing numbers. And after each one,   I hit Enter. And I can type in however many 
I want. And then when you're done, just hit   enter twice. And it reads them all. And if you 
want to see what's in there, come back up here   and just call the name of that object. There are 
the numbers that I entered. And so there may be   situations in which that makes it a lot easier to 
enter data, especially if you're using a 10 key.   Now, rep you can guess is for repetition. We'll 
call the help on that one, replicate elements.   And here's what we're going to do, we're going to 
say x seven, we're going to repeat or replicate.   True, and we're going to do it five times. So x 
seven. And then if you want to see there are our   five trues. All in a row. If you want to repeat 
more than one value, it depends on anything,   set things up a little bit. Here, I'm going to 
do replicate a repeat for true and false. But   by doing it as a set where I'm doing the 
see concatenate to collect the set, what   it's going to do is repeat that set in order five 
times. So true, false, true, false, true, false,   and so on. That's fine. But if you want to do the 
first one, five times, and then the second one,   five times, I mean, think of it as like co lading. 
On a photocopier. If you don't want it correlated,   you do each. And that's going to do True, true, 
true, true, true false, false, false, false false.   And so these are various ways that you can set 
up data, get it in really for an ad hoc or an as   needed analysis. And it's a way of checking how 
functions work is I've used in a lot of examples   here. And you can explore some as possibilities 
and see how you can use it in your own work.   The next step in our introduction, and accessing 
data is talking about importing data, which will   probably be the most common way of getting data 
into R. Now the goal here is you want to try to   make it easy. Get the data in there, get a large 
amount, get it in quickly and get processing as   soon as you can. Now there are a few kinds of 
data files you might want to import. There are   CSV files, S stands for comma separated values in 
a sort of the plain text version of a spreadsheet.   Any spreadsheet program can export data as a CSV 
and nearly any data program at all can read them.   They're also straight text files. txt. Those can 
actually be opened up in text editors and word   processing documents, then there are XLS x. And 
those are Excel spreadsheets as well as the XLS   version. And then finally, if you're going to 
get fancy, you have the opportunity to import   JSON. That's JavaScript Object Notation. And if 
you're using web data, you might be dealing with   that kind of data. Now, R has built in functions 
for importing data in many formats, including the   ones I just mentioned. But if you really want 
to make your life easy, you can use just one,   a package that I load, every time I use R is 
reo, which is short for our import output. And   what reo does is it combines all of our import 
functions into one simple utility with consistent   syntax and functionality. It makes life so much 
easier. Let's see how this all works in our just   open up this script, and we'll run through 
the examples all the way through. But there   is one thing you're going to want to do first, 
and that is, you're going to want to go to the   course files that we download at the beginning of 
this course, these are the individual our scripts,   because this folder right here that significant. 
This is a collection of three data sets,   I'm going to click on that. And they're all 
called m BB. And the reason they're called that   is because they contain Google Trends information. 
And that searches for Mozart, Beethoven, and Bach,   three major classical music composers. And it's 
all about the relative popularity of these three   search terms over a period of several years. 
And I have it here in CSV or comma separated   value format, and as a txt file dot txt, 
and then even as an Excel spreadsheet. Now   let's go to our and we'll open up each one of 
these. The first thing we're going to need to   do is make sure that you have reo. Now I've 
done this before that Rio is one of the things   I download every time. So I'm going to use Pac 
Man and do my standard importing or loading of   packages. So reals available now, I do want 
to tell you one thing significant about Excel   files. And we're going to go to the official our 
documentation for this. If you click on this,   it'll open up your web browser. And this is 
a shortcut web page to the our documentation.   And here's what it says. I'm actually read 
this verbatim. Reading Excel spreadsheets.   The most common our data import export question 
seems to be how do I read an Excel spreadsheet.   This chapter collects together advice and options 
given earlier. Note that most of the advices for   pre Excel 2007 spreadsheets and not the later XLS 
x format. The first piece of advice is to avoid   doing so if possible. If you have access to excel, 
export the data you want from excel in a tab   delimited or comma separated form, and use read 
dot delete or read dot CSV to import it into R,   you may need to use read.dl m to or read dot CSV 
to and a locale that uses comma as the decimal   point, exporting a diff file and reading it 
using read dot diff is another possibility. Okay,   so really what they're saying is, don't do it. 
Well, let's go back to our now it's gonna say   right here, you have been warned. But let's make 
life easy by using Rio. Now if you've saved these   three files to your desktop, then it's really 
easy to import them this way. We'll start with the   CSV. We use reo underscore CSV is the name of the 
object that I'm going to be using to import stuff   into. And all we need is this command import. We 
don't have to specify that as a CSV, or C that   has headers or anything, we just use import. And 
then in quotes, and in parentheses, we put the   name and location of the file. So on a Mac, it 
shows up this way to your desktop. I'm going to   run that. And you can see that it just 
showed up in my environment on the top right,   I'll expand that a little bit. I now have a data 
frame, I'll come back out. Let's take a look   at the first few rows of that data frame. I'll 
zoom up. And you can see we have months listed.   And then the relative popularity of search for 
Mozart, Beethoven and Bach during those months.   Now, if I want to read the text file, what's 
really nice is I can use the exact same command   import, and I just give the location in the name 
of the file, I have to add the dot txt. But I run   that and we look at the head and you'll see it's 
exactly the same no difference Piece of cake.   What's nice about Rio is I can even do the 
XLS x file. Now it helps that there's only   one tab in that file, and that it's 
set up to look exactly the same as   the others want to do that. We went 
through and you see that once again.   It's the same thing Rio was able to read all 
of these automatically makes life very easy.   Another neat thing is that our hands on thing 
called a Data Viewer. Now we'll get a little   bit of information on that to help and you invoke 
the Data Viewer. Let's do this one we do with a   capital V for view. And then we say what it is we 
want to see. And we'll do rio underscore CSV. When   we do that command, it opens up a new tab here. 
And it's like a spreadsheet right here. And in   fact, it's sortable, we can click on this, go from 
the lowest to the highest, and vice versa. And you   see that Mozart actually is setting the range 
here. And that's one way to do it. You can also   come over to here and just click on this little, 
it looks like a calendar. But it is, in fact, the   same thing, we can double click on that. And now 
you see we get a viewer of that file as well. I'm   going to close both of those. And I'm just going 
to show you the built in our commands for reading   files. Now, these are ones that Rio uses on its 
own. And we don't have to go through all this.   But you may encounter these in a lot of existing 
code, because not everybody uses Rio. And I want   you to see how they work. If you have a text file, 
and it's saved in tab delimited format, you need   the complete address. And you might try to do 
something like this read dot table is normally   the command. And you need to say that you have a 
header that there's variable names across the top.   But when you read this, it's going to get an error 
message. And it's you know, it's frustrating.   That's because there are missing values in there 
in the top left corner. And so what we need to do   is we just need to be a little more specific about 
what the separator is. And so I do the same thing,   I say read dot table, there's the name of the file 
in this location, we have a header. And this is   where I say the separator is a tab, the back score 
says indicate this is a tab. So if I run that one,   then it shows up, it reads it properly. We can 
also do CSV. The nice thing here is you don't   have to specify the delimiter. Because CSV 
means that it's comma separated, so we know   what it is. And I can read that one in the exact 
same way. And if I want to, I can come over here.   And I can just click on the viewer here. And I 
see the data that way also. And so it's really   easy to import data, especially if you use the 
package Rio, which is able to automatically read   the format and get it in properly and get you 
started on your analyses as soon as possible.   Now, the part of our introduction that maybe 
most of you were waiting for is modeling data.   On the other hand, because this is a very short 
introductory course, I'm really just giving a tiny   little overview of a handful of common procedures. 
And an another course here at data lab.cc,   we'll have much more thorough investigations 
of common statistical modeling and machine   learning algorithms. But right now, I just want 
to give you a flavor of what can be done in R.   And we'll start by looking at a common procedure. 
hierarchical clustering are ways of finding which   cases or observations in your data belong with 
each other. More specifically, you can think   of it as the idea of like with like, which cases 
are like other ones. Now, the thing is, of course,   this depends on your criteria, how you measure 
similarity, how you measure distance, and there's   a few decisions you have to make. You can do, for 
instance, what's called a hierarchical approach,   which is what we're going to do. Or you can do it 
where you're trying to get a set number of groups,   or s called K, the number of groups, you also 
have many choices for measures of distance.   And you also have a choice between what's 
called divisive clustering, where you start   with everything in one group, and then you split 
them apart, or agglomerative, which is where they   all start separately, and you selectively put 
them together. But we're going to try to make   our life simple here. So we're going to do the 
single most common kind of clustering, we're   going to use a measure of Euclidean distance, 
we're going to use hierarchical clustering.   So we don't have to set the number of groups in 
advance. And we're going to use a divisive method,   we start with them all together and gradually 
split them. Let me show you how this works in   our. And what you'll find is even though this 
may sound like a very sophisticated technique,   and a lot of the mathematics is sophisticated, 
it's really not hard to do in reality.   So what we're going to do here is we're going 
to use a data set that we use frequently I'm   going to load my default packages to get some of 
this ready. And then I'll bring in the data sets,   we're going to use m t cars, which if you recall, 
is Motor Trend, car road tests data from 1974. And   there are 32 cars in there and we're gonna see how 
they grew up what cars are similar to which other   ones. Now let's take a look at the first few rows 
of data to see what variables we have in here. You   see we have MPG, cylinders displacement, so on 
and so forth. Not all of these are going to be   really influential or are useful variables. And so 
I'm going to drop a few of them and create a new   data set, that includes just the ones I want. If 
you want to see how I do that, I'm going to come   back here and I'm going to create a new object, 
a new data frame called cars. And this says,   it gets the data from empty cars. By putting the 
blank in the space here, that means use all of   the rows. But here I'm selecting the columns see 
for concatenate, means I want columns one through   four, skip Five, six, and seven, skip eight, and 
then nine through 11. That's way of selecting my   variables. So I'm going to do that and you see 
the cars is now showing up in my environment,   they're at the top right, let's take a look 
at the head of that data set. We'll zoom in   on that one. And they can see it's a little bit 
smaller, we have mpg cylinders, displacement,   weight, horsepower, quarter mile, seconds, and so 
on. Now, we're going to do the cluster analysis,   and we're going to find is that if we're using 
the default, it's super, super easy. In fact, I'm   going to be using something called pipes, which is 
from the package D plier, which is why I loaded it   is this thing right here. And what it allows you 
to do is to take the results of one step and feed   it directly in as the input data into the next 
step. Otherwise, this would be several different   steps. But I can run it really quickly, I'm going 
to create an object called h c for hierarchical   clusters, we're going to read the cars data that 
I just created, we're going to get the distance   or the dis similarity matrix, which says how far 
each observation is in Euclidean space from each   of the others. And then we feed that through the 
hierarchical cluster routine h clust. So that   saves it into an object and now we need to do is 
plot the results. We're gonna do plot H, see my   hierarchical cluster object, then we get this 
very busy chart over here. But if I zoom in on it,   and wait a second, you can see that it's this 
nice little, it's called a dendrogram. Because   it's a branches and trees looks more like roots 
here, you can see they all start up together,   and then they split and then they split and they 
split. Now if you know your car's from 1974. And   you can see that some of these things make sense. 
So for instance, here we have the Honda Civic and   the Toyota Corolla, which are still in production 
are right next to each other, if you're 128. And   if yacht x one nine are very well, they were both 
small Italian sports cars, they were different in   many ways. But you can see that they're right next 
to each other. The Ferrari Dino, the Lotus Europa,   they make sense to put next to each other. If 
we come over here, the Lincoln Continental and   the Cadillac Fleetwood and the Chrysler Imperial, 
it's no surprise that are next to each other. What   is interesting is this one here, the mangiarotti 
Bora, it's totally separate from everything else,   because it's a very unusual different kind of car 
at the time. Now, one really important thing to   remember is that the clustering is only valid for 
these data points, based on the data that I gave   it, I only gave it a handful of variables. 
And so it has to use those ones to make the   clusters. If I gave it different variables or 
different observations, we could end up with a   very different kind of clustering. But I want to 
show you one more thing we can do here with this   clusters to make it even easier to read. Let me 
zoom back out. And what we're going to do is draw   some boxes around the clusters, we're going to 
start by drawing two boxes that have gray borders.   Now I'm going to run that one. And you can see 
that it showed up. And then we're going to make   three blue ones, four green ones, and five dark 
red ones. And then let me come and zoom in on this   again. And now it's easier to see what the groups 
are in this particular data set. So we have here,   for instance, the Hornet for drive, the valley and 
the Mercedes Benz, 450, SLC, Dodge, challenger,   and Javelin all clumping together in one general 
group. And then we have these other really big   VAT American cars. What's interesting is again, is 
that the MAS Ronnie Bora is off by itself almost   immediately. It's kind of surprising because the 
Ford Panthera has a lot in common with it. But   this is a way of seeing based on the information 
that I gave it, how things are clustered. And if   you're doing market analysis, if you're trying to 
find out who's in your audience, if you're trying   to find out what groups of people think in similar 
ways, this is an approach that you're probably   going to use. And you can see that it's really 
simple to set it up, at least using the default in   our as a way of seeing how you have regularities 
and consistencies in groupings in your data.   As we go through our very brief introduction to 
modeling data and are another common procedure   that we might want to look at briefly, is called 
principal components. And the idea here is that   in certain situations, less is more. That is less 
noise, and fewer unhelpful variables in your data   can translate to more meaning and that's why 
After In any case, now, this approach is also   known as dimensionality reduction. And I like to 
think of it by an analogy, you look at this photo,   and what you see are these big black outlines of 
people, you can tell basically how tall they are,   what they're wearing, where they're going. And 
it takes a moment to realize that you're actually   looking at a photograph that goes straight down. 
And you can see the people there on the bottom,   and you're looking at their shadows. And we're 
trying to do a similar thing. Even though these   are shadows, you can still tell a lot about 
the people, people are three dimensional,   shadows are two dimensional, but we've retained 
almost all the important information. If you   want to do this with data, the most common 
method is called principal component analysis,   or PCA. And let me give you an example of the 
steps metaphorically in PCA. You begin with two   variables. And so here's a scatterplot, we've got 
x across the bottom y decide, and this is just   artificial data. And you can see that there's a 
strong linear association between these two. Well,   what we're going to do is we're going to draw 
a regression line through the data set, and you   know, it's there about 45 degrees. And then we're 
going to measure the perpendicular distance of   each data point to the regression line. Now, not 
the vertical distance, that's what we would do if   we were looking for regression residuals, but the 
perpendicular distance. And that's what those red   lines are, then what we're going to do is we're 
going to collapse the data by sliding each point   down the red line to the regression line. And 
that's what we have there. And then finally,   we have the option of rotating it. So it's not on 
diagonal anymore, but it's flat. And that there   is the PC the principal component. Now, let's 
recap what we've accomplished here, we went from   a two dimensional data set to a one dimensional 
data set, but maintained some of the information   in the data. But I like to think that we've 
maintained most of the information. And hopefully,   we maintain the most important information in 
our data set. And the reason we're doing this   is we've made the analysis and interpretation 
easier and more reliable. By going from something   that was more complex, two dimensional or higher 
dimensions, down to something that's simpler to   deal with fewer dimensions, it means easier to 
make sense of in general, let me show you how   this works in our open up this script. And we'll 
go through an example in our studio. To do this,   we'll first need to load our packages, 
because I'm going to use a few of these.   Although those will load the data sets. Now I'm 
going to use the empty cars data set, we've seen   that a lot. And I'm going to create a little 
subset of variables. Let's look at the entire   list of variables. And I don't want all of those 
in my particular data set. So the same way I did   with hierarchical clustering, I'm going to create 
a subset by dropping a few of those variables.   And we'll take a look at that subset. Let's zoom 
in on that. So there's the first six cases in my   slightly reduced data set. And we're going to 
use that to see what dimensions we can get to   that we have fewer than the 123456789 variables we 
here. Let's try to get to something a little less   and see if we still maintain some of the important 
information in this data set. Now what we're going   to do is we're going to start by computing 
the PCA, the principal component analysis,   we'll use the entire data frame here, I'm going 
to feed into an object called PC for a principal   components. And there's more than one way to do 
this in our but I want to use p r comp. And this   specifies the data set that I'm going to use. 
And I'm going to do two optional arguments. One   is called centering the data, which means moving 
them so the means of other variables are zero. And   then the second one is scaling the data which sort 
of compresses or expands the range of the data. So   it's unit or variance of one for each of them. 
That puts all of them on the same scale. And it   keeps any one variable from sort of overwhelming 
the analysis. So let me run through that.   And now we have a new object that showed up 
on the right. And if you want to you can also   specify variables by specifically including 
them. The tilde here means that I'm making my   prediction based on all the rest of these. And I 
can give the variable names all the way through.   And then I say what data set it's coming from. 
I say data equals empty cars, and I can do the   centering in the scaling there. Also, it produces 
exactly the same thing. It's just two different   ways of saying the same command. To examine the 
results, we can come down and get a summary of the   object PC that I created. So I'll click on that 
and then we'll zoom in on this. And here's the   summary it talks about creating nine components 
pc one for principal component one to PC nine for   principal component Nice, you get the same number 
of components that you had as original variables.   But the question is whether it divvies up the 
variation separately. Now, you can take a look   here at principal component one is the standard 
deviation of 2.3391. What that means is, if each   variable will begin with a standard deviation of 
one, this one has as much as 2.4 of the original   variables, the second one has 159, and the others 
have less than one unit standard deviation,   which means they're probably not very important 
in the analysis, we can get a scree plot for   the number of components and get an idea on how 
much each one of them explains of the original   variance. And we see right here, I'll zoom in on 
that, that our first component seems to be really   big and important. Our second one is smaller, but 
it still seems to be you know, above zero, and   then we kind of grind out down to that one. Now 
there's several different criteria for choosing   how many components are important what you want 
to do with them. Right now, we're just eyeballing   it. And we see that number one is really big 
number two, sort of a minor axis in our data. If   you want to, you can get the standard deviations 
and something called the rotation here, I mean,   just call PC. And then we'll zoom in on that in 
the console. to scroll back up a little bit. And   it's a lot of numbers. The standard 
deviations here are the same as what   we got from this first row right here. So that 
just repeats it. The first one's really big,   the second one's smaller. And then what 
this right here does, what the rotation is,   it says, What's the association between 
each of the individual variables and the   nine different components. So you 
can read these like correlations.   I'm going to come back. And let's see how 
individual cases load on the PCs. What I   do that is I use predict running 
through PCs, and then I feed those   results using the pipe. And I round them 
off, so they're a little more readable.   I'll zoom in on that. And here, 
we've got nine components listed,   and we got all of our cars. But the first two 
are probably the ones that are most important.   So we have here the PC one and two easy, we 
got a giant value there, 2.49273354, and so on.   But probably the easiest way to deal with all this 
is to make a plot. And what we're going to do is   go something with a funny name of biplot. What 
that means is a two dimensional plot, really,   all it says is going to chart the first two 
components. But that's good, because based on   our analysis, it's really only the first two that 
seem to matter anyhow. So let's do the biplot,   which is a very busy chart. But if we zoom on 
it, we might be able to see a little better   what's going on here. And what we have is the 
first principal component across the bottom,   and the second one up the side. And then the 
red lines indicate approximately the direction   of each individual variables contribution to 
these. And then we have each case we show its   name about where it would go. Now if you remember 
from the hierarchical clustering, the Maasai Bora   was really unusual. And you can see it's up 
there all by itself. And then really, what we   seem to have here is displacement and weight and 
cylinders, and horsepower. This appears to be big,   heavy cars going in this direction. Then we 
have the Honda Civic, the Porsche 911, Lotus,   Europa, these are small cars with smaller engines 
more efficient. These are fast cars up here. And   these are slow cars down here. And so it's pretty 
easy to see what's going on with each of these as   in terms of clustering the variables. With a 
hierarchical clustering, we clustered cases,   now we're looking at clusters of variables. 
And we see that it might work to talk about big   versus small and slow versus fast as the important 
dimensions in our data as a way of getting insight   to what's happening and directing us in our 
subsequent analyses. Let's finish our very short   introduction to modeling data in our with a brief 
discussion of regression, probably one of the most   common and powerful methods for analyzing data. I 
like to think of it as the analytical version of   E Pluribus Unum that is out of many one, or in 
the data science sense, out of many variables,   one variable, you want to put out one more 
way out of many scores, one score. The idea   with regression is that you use many different 
variables simultaneously, to predict scores on   one particular outcome variable. And there's so 
much going on here. I'd like to think that there's   some For everyone, there are many versions, and 
many adaptations of regression that really make   it flexible, and powerful for almost no matter 
what you're trying to do, we'll take a look at   some of these in our so let's try it in our and 
just open up this script. And let's see how you   can adapt regression to a number of different 
tasks and use different versions of it. When   we come here to our script, we're going to scroll 
down here a little bit and install some packages,   we're going to be using several packages in this 
one, I'll load those ones as well as the datasets   package. Because we're going to use a data set 
from that called us judge radians. Let's get some   information on it. It is lawyers ratings of state 
judges in the US Superior Court. And let's take a   look at the first few cases with head I'll zoom 
in on that. And what we have here are six judges   listed by name. And we have scores on a number of 
different variables like diligence and demeanor.   And whether it finishes with whether they're 
worthy of retention, that's the RTN retention.   Let's scroll back out. And what we might want to 
do is use all these different judgments to predict   whether lawyers think that these judges should be 
retained on the bench. Now, we're going to use a   couple of shortcuts that can actually make working 
with regression situations kind of nice. First,   we're going to take our data set, and we're going 
to feed it into an object called data. So that   shows up now in our environment on the top right. 
And then we're going to define variable reps,   you don't have to do this, but it makes 
the code really, really easy to use. Plus,   you find if you do this, then you can actually 
just use the same code without having to redo it   every time you do an analysis. So what we're going 
to do is we're going to create an object called x,   it's actually going to be a matrix, and it's 
going to consist of all of our predictor variables   simultaneously. And the way I'm going to do this 
is I'm going to use as matrix and then I'm gonna   say read data, which is what we defined right 
here, and read all of the columns except number   12. That's one called retention, that's our 
outcome. So the minus means don't include that,   but do all the others. So I do that, and now I 
have an object called x. And then the second one,   I say, go to data. And then this blank means use 
all of the rows, but only read the 12th column,   that's the one that has retention our outcome. 
So following standard method, x, those are all   our variables and why that's our single outcome 
variable. Now, the easiest version of regression   is called simultaneous entry, you use all of the x 
variables at once, throw them in one big equation   to try to predict your single outcome. And in our 
we use lm, which is for linear model. And what we   have here is y, that's our outcome variable. And 
then the tilde that means is predicted by or as a   function of x. And then x is all of our variables 
together being used as predictors. So this is the   simplest possible version, and we'll save it into 
an object called reg for regression one. And now,   if you want to be a little more explicit, you can 
give the individual variables you can say that our   10 retention is a function of or as predicted by 
all of these other variables. And then I say that   they come from the data set us judge ratings that 
we don't have to do the data, and then dollar sign   for you to these. That'll give me the exact same 
thing. So I don't need to do that one explicitly.   If you want to see the results, we just call on 
the object that we created from the linear model.   And I'm going to zoom in on that. And what we 
have are the coefficients. This is the intercept,   start with minus two. And then for each step 
up on this one, as 0.1, point three, six, so   on and so forth. You'll see By the way, that 
it's changed the name of each of the variables   to add the x because they're in the dataset x 
now, that's fine. We can do inferential tests   on these individual coefficients by asking for 
a summary. We click on that. And we'll zoom in.   And now you can see, there's the value that we 
had previously, but now there's a standard error.   And then this is the t test. And then over here is 
the probability value. And the asterisks indicate   values that are below the standard probability 
cutoff of point oh five. Now we expect the   intercept to be below that. I see. For instance, 
this one integrity has a lot to do with people's   judgment of whether a person should be retained. 
And this one physical really, are they sick,   and we have some others that are kind of on 
their way. And this is a nice one overall. And   if you come down here, you can see the multiple 
r squared. It's super high. And what it means is   that These variables collectively predicted very, 
very well, whether the lawyers felt that the judge   should be retained. Let's go back now to our 
script, you can get some more summary data here,   if you want, we can get the analysis of variance 
table, the ANOVA table, and we click on that zoom   in there, you can see that we have our residuals 
and the y. Come back out, we do the coefficients.   Here are the regression coefficients, we saw 
those previously, this is just a different   way of getting at this same information, we can 
get confidence intervals. Let's zoom in on that.   And now we have a 95% confidence interval. So the 
two and a half percent, on the low end the nine,   seven and a half on the top end, in terms 
of what each of the coefficients would be.   We can get the residuals on a case by case basis, 
let's do this one. And when we zoom in on that,   now, this is a little hard to read in and of 
itself, because they're just numbers. But an   easier way to deal with that is to get a histogram 
of the residuals from the model. So to do that,   we just run this command, and then I'll zoom 
in on this. And you can see that it's a little   bit skewed mostly around zero, we've got one 
person we have on the high end, but mostly,   these are pretty good predictions. Come back out. 
Now I want to show you something a little more   complicated. We're going to do different kinds 
of regression, I'm going to use two additional   libraries for this one is called Lars that 
stands for least angle regression, and carat,   which stands for classification and regression 
training. We'll do that by loading those two.   And then we're going to do a conventional stepwise 
regression, which a lot of people say there's   problems with this, but I'm just gonna show that 
I'm gonna do it really fast. There's our stepwise   regression, then we're going to do something from 
Lars called stage wise, it's similar to stepwise,   but it has better generalizability. We run that 
through, we can also do least angle regression.   And then really, one of my favorites is the 
lasso. That's the least absolute shrinkage   and selection operator. Now I'm running through 
just the absolute bare minimum versions of these,   there's a lot more that we would want to do 
explore these. But what I'm going to do is   compare the predictive ability of each of them. 
And I'm going to feed into an object called R   to conference comparison of the R squared 
values. And here I specify where it is,   in each of them, I have to give a little index 
number, then we're going to round off the values.   And I'm going to give them the name, say the first 
one stepwise and forward then larger than lasso.   And we can see the values. And what this shows us 
here at the bottom is that all of them were able   to predict it super well. But we knew that because 
when we did just the standard simultaneous entry,   there was amazingly high predictive ability within 
this data set. But you will find situations in   which each of these can vary a little bit, maybe 
sometimes they vary a lot. But the point here is   there are many different ways of doing regression 
and are makes those available to whatever you want   to do. So explore your possibilities and 
see what seems to fit. In other courses,   we will talk much more about what each of these 
mean, how they can be applied and how it can be   interpreted. But right now, I simply want you 
to note that these exist, and they can be done,   at least in theory in a very simple way in 
our. And so that brings us to the end of   our an introduction. And I want to make a brief 
conclusion primarily to give you some next steps,   other things that you can do. As you learn 
to work more with our now we have a lot of   resources available here. Number one, we have 
additional courses on our in data lab.cc. And   I encourage you to explore each of them. If you 
like our you might also like working with Python,   another very popular language for working in data 
science, which has the advantage of also being a   general purpose programming language. The things 
that we do in our we can do almost all the same   things in Python. And it's nice to do a compare 
and contrast between the two with the courses we   have at data lab.cc. I'd also recommend you spend 
some time simply on the concepts and practice of   data visualization. R has fabulous packages for 
data visualization. But understanding what you're   trying to get and designing quality ones is sort 
of a separate issue. And so encourage you to get   the design training from our other courses on 
visualization. And then finally, a major topic   is machine learning or methods for processing 
large amounts of data and getting predictions from   one set of data that can be applied usefully to 
others. We do that for both R and Python and other   mechanisms here in data lab. Take a look at all of 
them and see how well you think you can use them   in your own work now Another thing that you can 
do is you can try looking at the annual our user   conference, which is user with a capital R and an 
exclamation point. There are also local our user   groups are rugs. And I have to say Unfortunately, 
there is not yet an official our day. But if you   think about September 19, it's International Talk 
Like a Pirate Day. And we like to think as pirates   say are and so that can be our unofficial day 
for celebrating these statistical programming   language are any case, I'd like to thank you for 
joining me for this and I wish you happy computing"
